<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TestMetal.Core</name>
    </assembly>
    <members>
        <member name="T:TestMetal.Core.Customization.CaptureValueMatcher`1">
            <summary>
            	Captures the value matched forlater examination.
            </summary>
            <typeparam name="TCaptureValue"> The type of the value to capture. </typeparam>
        </member>
        <member name="T:NMock2.Matcher">
            <summary>
            A matcher is used to match objects against it.
            </summary>
        </member>
        <member name="T:NMock2.ISelfDescribing">
            <summary>
            This interface is used to get a description of the implementator.
            </summary>
        </member>
        <member name="M:NMock2.ISelfDescribing.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="M:NMock2.Matcher.op_BitwiseAnd(NMock2.Matcher,NMock2.Matcher)">
            <summary>
            Logical and of to matchers.
            </summary>
            <param name="m1">First matcher.</param>
            <param name="m2">Second matcher.</param>
            <returns>Matcher combining the two operands.</returns>
        </member>
        <member name="M:NMock2.Matcher.op_BitwiseOr(NMock2.Matcher,NMock2.Matcher)">
            <summary>
            Logical or of to matchers.
            </summary>
            <param name="m1">First matcher.</param>
            <param name="m2">Second matcher.</param>
            <returns>Matcher combining the two operands.</returns>
        </member>
        <member name="M:NMock2.Matcher.op_LogicalNot(NMock2.Matcher)">
            <summary>
            Negation of a matcher.
            </summary>
            <param name="m">Matcher to negate.</param>
            <returns>Negation of the specified matcher.</returns>
        </member>
        <member name="M:NMock2.Matcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object matches.</returns>
        </member>
        <member name="M:NMock2.Matcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="M:NMock2.Matcher.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:TestMetal.Core.Customization.CaptureValueMatcher`1.#ctor">
            <summary>
            	Initializes a new instance of the CaptureValueMatcher`1 class.
            </summary>
        </member>
        <member name="M:TestMetal.Core.Customization.CaptureValueMatcher`1.DescribeTo(System.IO.TextWriter)">
            <summary>
            	Not documented on purpose.
            </summary>
            <param name="writer"> Not documented on purpose. </param>
        </member>
        <member name="M:TestMetal.Core.Customization.CaptureValueMatcher`1.Matches(System.Object)">
            <summary>
            	Not documented on purpose.
            </summary>
            <param name="o"> Not documented on purpose. </param>
            <returns> Not documented on purpose. </returns>
        </member>
        <member name="E:TestMetal.Core.Customization.CaptureValueMatcher`1.ValueCaptured">
            <summary>
            	Event raised when the value is captured on this instance.
            </summary>
        </member>
        <member name="P:TestMetal.Core.Customization.CaptureValueMatcher`1.CapturedValue">
            <summary>
            	Gets the captured value.
            </summary>
        </member>
        <member name="T:TestMetal.Core.Customization.ForceTrueMatcher">
            <summary>
            	Forces a true match.
            </summary>
        </member>
        <member name="M:TestMetal.Core.Customization.ForceTrueMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            	Not documented on purpose.
            </summary>
            <param name="writer"> Not documented on purpose. </param>
        </member>
        <member name="M:TestMetal.Core.Customization.ForceTrueMatcher.Matches(System.Object)">
            <summary>
            	Not documented on purpose.
            </summary>
            <param name="o"> Not documented on purpose. </param>
            <returns> Not documented on purpose. </returns>
        </member>
        <member name="P:TestMetal.Core.Customization.ForceTrueMatcher.Instance">
            <summary>
            	Gets the singleton instance.
            </summary>
        </member>
        <member name="T:TestMetal.Core.Customization.MemberInfoProxy`1">
            <summary>
            	Provides a mechanism to obtain the MemberInfo of a member using a dummy invocation inside of an anonymous delegate call, useful for mocking scenarios.
            </summary>
            <typeparam name="T"> The type of the interface declaring the member (method, property, event) for which to obtain a MemberInfo. </typeparam>
        </member>
        <member name="M:TestMetal.Core.Customization.MemberInfoProxy`1.GetLastMemberInfo(System.Action{`0})">
            <summary>
            	Obtains the MemberInfo of a member using a dummy invocation inside of the spcified anonymous delegate call, useful for mocking scenarios.
            </summary>
            <param name="exec"> A method which makes a dummy call onto a member of the provided action parameter. </param>
            <returns> A MemberInfo of the dummy invocation. </returns>
        </member>
        <member name="M:TestMetal.Core.Customization.MemberInfoProxy`1.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            	Run-time real proxy invocation.
            </summary>
            <param name="msg"> Invocation call message </param>
            <returns> Invocation return message. </returns>
        </member>
        <member name="T:TestMetal.Core.Customization.ReturnNullAction">
            <summary>
            	Circumvents nullable issue in NMock2.
            </summary>
        </member>
        <member name="T:NMock2.IAction">
            <summary>
            An action defines something that has to be done.
            For example the action to return a result value.
            </summary>
        </member>
        <member name="T:NMock2.Monitoring.IInvokable">
            <summary>
            IInvokable objects can be invoked.
            </summary>
        </member>
        <member name="M:NMock2.Monitoring.IInvokable.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            Invokes this object.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:TestMetal.Core.Customization.ReturnNullAction.DescribeTo(System.IO.TextWriter)">
            <summary>
            	Not documented on purpose.
            </summary>
            <param name="writer"> Not documented on purpose. </param>
        </member>
        <member name="M:TestMetal.Core.Customization.ReturnNullAction.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            	Not documented on purpose.
            </summary>
            <param name="invocation"> Not documented on purpose. </param>
        </member>
        <member name="P:TestMetal.Core.Customization.ReturnNullAction.Instance">
            <summary>
            	Gets the singleton instance.
            </summary>
        </member>
        <member name="T:NMock2.Actions.CollectAction">
            <summary>
            Action that returns the n-th element of the arguments to an invocation.
            </summary>
        </member>
        <member name="F:NMock2.Actions.CollectAction.argumentIndex">
            <summary>
            Stores the index of the argument.
            </summary>
        </member>
        <member name="F:NMock2.Actions.CollectAction.collectedArgumentValue">
            <summary>
            Stores the parameter when this action gets invoked.
            </summary>
        </member>
        <member name="M:NMock2.Actions.CollectAction.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Actions.CollectAction"/> class.
            </summary>
            <param name="argumentIndex">Index of the argument to collect.</param>
        </member>
        <member name="M:NMock2.Actions.CollectAction.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            Invokes this object.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.Actions.CollectAction.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="P:NMock2.Actions.CollectAction.Parameter">
            <summary>
            Gets the collected parameter.
            </summary>
            <value>The collected parameter (n-th parameter of parameter list of the method's call.</value>
        </member>
        <member name="T:NMock2.Actions.DelegateAction">
            <summary>
            Action that executes the delegate passed to the constructor.
            </summary>
        </member>
        <member name="F:NMock2.Actions.DelegateAction.handler">
            <summary>
            Stores the handler of the delegate action.
            </summary>
        </member>
        <member name="M:NMock2.Actions.DelegateAction.#ctor(NMock2.Actions.DelegateAction.Handler)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Actions.DelegateAction"/> class.
            </summary>
            <param name="actionHandler">The action handler.</param>
        </member>
        <member name="M:NMock2.Actions.DelegateAction.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            Invokes this object.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.Actions.DelegateAction.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Actions.DelegateAction.Handler">
            <summary>
            Delegate that is executed on invocation of the action.
            </summary>
        </member>
        <member name="T:NMock2.Actions.FireAction">
            <summary>
            Action that fires an event.
            </summary>
        </member>
        <member name="F:NMock2.Actions.FireAction.eventName">
            <summary>
            Stores the name of the event to fire.
            </summary>
        </member>
        <member name="F:NMock2.Actions.FireAction.eventArgs">
            <summary>
            Stores the event arguments.
            </summary>
        </member>
        <member name="M:NMock2.Actions.FireAction.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Actions.FireAction"/> class.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="M:NMock2.Actions.FireAction.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            Invokes this object. The event is fired on the receiver of the invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.Actions.FireAction.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Actions.CollectAction`1">
            <summary>
            Action that calls the collect delegate passed to constructor with the n-th element of the arguments to an invocation.
            </summary>
            <typeparam name="T">Type of the argument to collect.</typeparam>
        </member>
        <member name="F:NMock2.Actions.CollectAction`1.argumentIndex">
            <summary>
            Stores the index of the argument.
            </summary>
        </member>
        <member name="F:NMock2.Actions.CollectAction`1.collectDelegate">
            <summary>
            Stores the collect delegate.
            </summary>
        </member>
        <member name="M:NMock2.Actions.CollectAction`1.#ctor(System.Int32,NMock2.Actions.CollectAction{`0}.Collect)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Actions.CollectAction`1"/> class.
            </summary>
            <param name="argumentIndex">Index of the argument.</param>
            <param name="collectDelegate">The collect delegate.</param>
        </member>
        <member name="M:NMock2.Actions.CollectAction`1.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            Invokes this object.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.Actions.CollectAction`1.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Actions.CollectAction`1.Collect">
            <summary>
            Delegate that is called on collecting an argument.
            </summary>
            <param name="collectedParameter">The collected generic parameter.</param>
        </member>
        <member name="T:NMock2.Actions.LazyReturnAction">
            <summary>
            Action that sets the result value on an invocation. The value is aquired by calling the delegate specified in the constructor.
            </summary>
        </member>
        <member name="F:NMock2.Actions.LazyReturnAction.evaluate">
            <summary>
            Stores the evaluate delegate for this action.
            </summary>
        </member>
        <member name="M:NMock2.Actions.LazyReturnAction.#ctor(NMock2.Actions.LazyReturnAction.Evaluate)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Actions.LazyReturnAction"/> class.
            </summary>
            <param name="evaluate">The delegate used to aquire the return value.</param>
        </member>
        <member name="M:NMock2.Actions.LazyReturnAction.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            Invokes this object.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.Actions.LazyReturnAction.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Actions.LazyReturnAction.Evaluate">
            <summary>
            Delegate that is used to get the return value.
            </summary>
            <returns>
            Returns an object...
            </returns>
        </member>
        <member name="T:NMock2.Actions.ResultSynthesizer">
            <summary>
            Responsible for handling the results of an invocation.
            </summary>
        </member>
        <member name="F:NMock2.Actions.ResultSynthesizer.defaultResults">
            <summary>
            Stores the default results.
            </summary>
        </member>
        <member name="F:NMock2.Actions.ResultSynthesizer.results">
            <summary>
            Stores the results.
            </summary>
        </member>
        <member name="M:NMock2.Actions.ResultSynthesizer.#cctor">
            <summary>
            Initializes static members of the <see cref="T:NMock2.Actions.ResultSynthesizer"/> class.
            </summary>
        </member>
        <member name="M:NMock2.Actions.ResultSynthesizer.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            Invokes this object.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.Actions.ResultSynthesizer.SetResult(System.Type,System.Object)">
            <summary>
            Sets the result of the specified <paramref name="returnType"/>.
            </summary>
            <param name="returnType">The type to be returned as a result.</param>
            <param name="result">The result to be set.</param>
        </member>
        <member name="M:NMock2.Actions.ResultSynthesizer.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object to the specified <paramref name="writer"/>.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="M:NMock2.Actions.ResultSynthesizer.NewEmptyArray(System.Type)">
            <summary>
            Gets a new the empty array of the specified <paramref name="arrayType"/>.
            </summary>
            <param name="arrayType">Type of the array to be returned.</param>
            <returns>
            Returns a new empty array of the specified <paramref name="arrayType"/>.
            </returns>
        </member>
        <member name="M:NMock2.Actions.ResultSynthesizer.GetAction(System.Type,System.Collections.Hashtable)">
            <summary>
            Gets the action of the specified <paramref name="returnType"/>.
            </summary>
            <param name="returnType">Type of the returned action.</param>
            <param name="results">The results to get the action from. This is used as a parameter for the <see cref="F:NMock2.Actions.ResultSynthesizer.defaultResults"/>.</param>
            <returns>
            Returns the action of the specified <paramref name="returnType"/> out of the <paramref name="results"/>.
            </returns>
        </member>
        <member name="M:NMock2.Actions.ResultSynthesizer.SetAction(System.Type,NMock2.IAction)">
            <summary>
            Sets the action of the specified <paramref name="returnType"/>.
            </summary>
            <param name="returnType">Type of the action to be set.</param>
            <param name="action">The action to be set.</param>
        </member>
        <member name="T:NMock2.Actions.ReturnAction">
            <summary>
            Action that sets the result value on an invocation.
            </summary>
        </member>
        <member name="F:NMock2.Actions.ReturnAction.result">
            <summary>
            Stores the result to set on the invocation as the return value.
            </summary>
        </member>
        <member name="M:NMock2.Actions.ReturnAction.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Actions.ReturnAction"/> class.
            </summary>
            <param name="result">The result to set on the invocation as the return value.</param>
        </member>
        <member name="M:NMock2.Actions.ReturnAction.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            Invokes this object. Sets the result value of the invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.Actions.ReturnAction.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Actions.ReturnCloneAction">
            <summary>
            Action that set the result value of an invocation to a clone of the specified prototype.
            </summary>
        </member>
        <member name="F:NMock2.Actions.ReturnCloneAction.prototype">
            <summary>
            Stores the prototype that will be cloned.
            </summary>
        </member>
        <member name="M:NMock2.Actions.ReturnCloneAction.#ctor(System.ICloneable)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Actions.ReturnCloneAction"/> class.
            </summary>
            <param name="prototype">The prototype.</param>
        </member>
        <member name="M:NMock2.Actions.ReturnCloneAction.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            Invokes this object. Sets the result value of the invocation to a clone of the prototype.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.Actions.ReturnCloneAction.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Actions.SetIndexedParameterAction">
            <summary>
            Action that sets a parameter (method argument) of the invocation to the specified value.
            </summary>
        </member>
        <member name="F:NMock2.Actions.SetIndexedParameterAction.index">
            <summary>
            Stores the index of the paremter to set.
            </summary>
        </member>
        <member name="F:NMock2.Actions.SetIndexedParameterAction.value">
            <summary>
            Stores the value of the parameter to set.
            </summary>
        </member>
        <member name="M:NMock2.Actions.SetIndexedParameterAction.#ctor(System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Actions.SetIndexedParameterAction"/> class.
            </summary>
            <param name="index">The index of the parameter to set.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NMock2.Actions.SetIndexedParameterAction.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            Invokes this object. Sets the parameter at the specified index of the invocation to the specified value.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.Actions.SetIndexedParameterAction.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Actions.SetNamedParameterAction">
            <summary>
            Action that sets the parameter of the invocation with the specified name to the specified value.
            </summary>
        </member>
        <member name="F:NMock2.Actions.SetNamedParameterAction.name">
            <summary>
            Stores the name of the parameter when the class gets initialized.
            </summary>
        </member>
        <member name="F:NMock2.Actions.SetNamedParameterAction.value">
            <summary>
            Stores the value of the parameter when the class gets initialized.
            </summary>
        </member>
        <member name="M:NMock2.Actions.SetNamedParameterAction.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Actions.SetNamedParameterAction"/> class.
            </summary>
            <param name="name">The name of the parameter to set.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NMock2.Actions.SetNamedParameterAction.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            Invokes this object. Sets the value of the parameter with the specified name of the invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.Actions.SetNamedParameterAction.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Actions.SignalAction">
            <summary>
            Action that signals an event.
            You can use this action to synchronize threads when an expectation is invoked.
            </summary>
        </member>
        <member name="F:NMock2.Actions.SignalAction.signal">
            <summary>
            Stores the wait handle to be signalled.
            </summary>
        </member>
        <member name="M:NMock2.Actions.SignalAction.#ctor(System.Threading.EventWaitHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Actions.SignalAction"/> class.
            </summary>
            <param name="signal">The signal.</param>
        </member>
        <member name="M:NMock2.Actions.SignalAction.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            Invokes this object by signaling the event.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.Actions.SignalAction.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="P:NMock2.Actions.SignalAction.Signal">
            <summary>
            Gets the signal.
            You can use this signal to wait for this action beeing invoked.
            </summary>
            <value>The signal.</value>
        </member>
        <member name="T:NMock2.Actions.ThrowAction">
            <summary>
            Action that sets the exception of an invocation.
            </summary>
        </member>
        <member name="F:NMock2.Actions.ThrowAction.exception">
            <summary>
            Stores the exception to be thrown.
            </summary>
        </member>
        <member name="M:NMock2.Actions.ThrowAction.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Actions.ThrowAction"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:NMock2.Actions.ThrowAction.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            Invokes this object. Sets the exception the invocation will throw.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.Actions.ThrowAction.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Collect">
            <summary>
            Gather information about invocations.
            </summary>
        </member>
        <member name="M:NMock2.Collect.MethodArgument``1(System.Int32,NMock2.Actions.CollectAction{``0}.Collect)">
            <summary>
            Calls the specified <paramref name="collectDelegate"/> with the method argument at index <paramref name="argumentIndex"/>.
            Can only be used as action of an expectation on a method call.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="argumentIndex">Index of the argument.</param>
            <param name="collectDelegate">The collect delegate.</param>
            <returns>Action that collects a method argument.</returns>
        </member>
        <member name="M:NMock2.Collect.PropertyValue``1(NMock2.Actions.CollectAction{``0}.Collect)">
            <summary>
            Calls the specified <paramref name="collectDelegate"/> with the value that is set to the property.
            Can only be used as action of an expectation on a property setter. 
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="collectDelegate">The collect delegate.</param>
            <returns>Action that collects a property value.</returns>
        </member>
        <member name="T:NMock2.DefinedAs">
            <summary>
            Defines the initial characteristics of a new mock object.
            This is normally used in conjunction with <see cref="M:NMock2.Mockery.NewMock``1(NMock2.IMockDefinition)"/>
            </summary>
        </member>
        <member name="M:NMock2.DefinedAs.Implementing``1">
            <summary>
            Specifies a type that this mock should implement. This may be a class or interface,
            but there can only be a maximum of one class implemented by a mock.
            </summary>
            <typeparam name="T">The type to implement.</typeparam>
            <returns>The mock object definition.</returns>
        </member>
        <member name="M:NMock2.DefinedAs.Implementing(System.Type[])">
            <summary>
            Specifies the types that this mock should implement. These may be a class or interface,
            but there can only be a maximum of one class implemented by a mock.
            </summary>
            <param name="types">The types to implement.</param>
            <returns>The mock object definition.</returns>
        </member>
        <member name="M:NMock2.DefinedAs.OfStyle(NMock2.MockStyle)">
            <summary>
            Specifies how the mock object should behave when first created.
            </summary>
            <param name="style">A MockStyle value.</param>
            <returns>The mock object definition.</returns>
        </member>
        <member name="M:NMock2.DefinedAs.WithArgs(System.Object[])">
            <summary>
            Specifies the arguments for the constructor of the class to be mocked.
            Only applicable when mocking a class with a non-default constructor.
            </summary>
            <param name="args">The arguments for the class constructor.</param>
            <returns>The mock object definition.</returns>
        </member>
        <member name="M:NMock2.DefinedAs.Named(System.String)">
            <summary>
            Specifies a name for the mock. This will be used in error messages,
            and as the return value of ToString() if not mocking a class.
            </summary>
            <param name="name">The name for the mock.</param>
            <returns>The mock object definition.</returns>
        </member>
        <member name="T:NMock2.Expect">
            <summary>
            Defines expectations on dynamic mocks.
            Expectations that are not fulfilled result in exceptions in <see cref="M:NMock2.Mockery.VerifyAllExpectationsHaveBeenMet"/>
            or when the <see cref="T:NMock2.Mockery"/> is disposed.
            </summary>
        </member>
        <member name="M:NMock2.Expect.Exactly(System.Int32)">
            <summary>
            Gets a receiver of a method, property, etc. that has to be called exactly <paramref name="count"/> times.
            </summary>
            <param name="count">Expected number of invocations.</param>
            <returns>Returns a receiver of a method, property, etc. that has to be called exactly <paramref name="count"/> times.</returns>
        </member>
        <member name="M:NMock2.Expect.AtLeast(System.Int32)">
            <summary>
            Gets a receiver of a method, property, etc. that has to be called at least <paramref name="count"/> times.
            </summary>
            <param name="count">Minimal allowed number of invocations.</param>
            <returns>Returns a receiver of a method, property, etc. that has to be called at least <paramref name="count"/> times.</returns>
        </member>
        <member name="M:NMock2.Expect.AtMost(System.Int32)">
            <summary>
            Gets a receiver of a method, property, etc. that has to be called at most <paramref name="count"/> times.
            </summary>
            <param name="count">Maximal allowed number of invocations.</param>
            <returns>Returns a receiver of a method, property, etc. that has to be called at most <paramref name="count"/> times.</returns>
        </member>
        <member name="M:NMock2.Expect.Between(System.Int32,System.Int32)">
            <summary>
            Gets a receiver of a method, property, etc. that has to be called between <paramref name="minCount"/>
            and <paramref name="maxCount"/> times.
            </summary>
            <param name="minCount">Minimal allowed number of invocations.</param>
            <param name="maxCount">Maximaal allowed number of invocations.</param>
            <returns>Returns a receiver of a method, property, etc. that has to be called between <paramref name="count"/> times.</returns>
        </member>
        <member name="M:NMock2.Expect.On(System.Object)">
            <summary>
            Default expectation, specifies that a method, property, etc. that has to be called at least once.
            </summary>
            <param name="receiver">The receiver.</param>
            <returns>Returns a receiver of a method, property, etc. that has to be called at least once.</returns>
        </member>
        <member name="M:NMock2.Expect.Times(System.Int32)">
            <summary>
            Returns a string representing grammatically correctness of n times depending on the value of <paramref name="n"/>.
            </summary>
            <param name="n">An integer value representing n times.</param>
            <returns>String representation of n times.</returns>
        </member>
        <member name="P:NMock2.Expect.Never">
            <summary>
            Gets a receiver of a method, property, etc. that must never be called.
            </summary>
        </member>
        <member name="P:NMock2.Expect.Once">
            <summary>
            Gets a receiver of a method, property, etc. that has to be called exactly once.
            </summary>
        </member>
        <member name="P:NMock2.Expect.AtLeastOnce">
            <summary>
            Gets a receiver of a method, property, etc. that has to be called at least once.
            </summary>
        </member>
        <member name="T:NMock2.Fire">
            <summary>
            Fires a mocked event.
            </summary>
        </member>
        <member name="M:NMock2.Fire.Event(System.String)">
            <summary>
            Fires the specified event.
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>Returns the event mock corresponding to the given <paramref name="eventName"/>.</returns>
        </member>
        <member name="M:NMock2.Fire.On(System.Object)">
            <summary>
            Defines the mock the event is fired on.
            </summary>
            <param name="mock">The mock the event is fired on.</param>
            <returns>Returns the event fire syntax.</returns>
        </member>
        <member name="T:NMock2.Has">
            <summary>
            Provides shortcuts to matchers.
            </summary>
        </member>
        <member name="M:NMock2.Has.ToString(NMock2.Matcher)">
            <summary>
            Returns a matcher for testing string representation of objects.
            </summary>
            <param name="matcher">The wrapped matcher.</param>
            <returns>Returns a <see cref="T:NMock2.Matchers.ToStringMatcher"/> for testing string representation of objects.</returns>
        </member>
        <member name="M:NMock2.Has.Property(System.String,NMock2.Matcher)">
            <summary>
            Returns a matcher for checking property values.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="valueMatcher">The value matcher.</param>
            <returns>Returns a <see cref="T:NMock2.Matchers.PropertyMatcher"/> for checking property values.</returns>
        </member>
        <member name="M:NMock2.Has.Field(System.String,NMock2.Matcher)">
            <summary>
            Returns a matcher for checking field values.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="valueMatcher">The value matcher.</param>
            <returns>Returns a <see cref="T:NMock2.Matchers.FieldMatcher"/> for checking field values.</returns>
        </member>
        <member name="T:NMock2.IExpectation">
            <summary>
            Represents an expectation.
            </summary>
        </member>
        <member name="M:NMock2.IExpectation.Matches(NMock2.Monitoring.Invocation)">
            <summary>
            Checks whether stored expectations matches the specified invocation.
            </summary>
            <param name="invocation">The invocation to check.</param>
            <returns>Returns whether one of the stored expectations has met the specified invocation.</returns>
        </member>
        <member name="M:NMock2.IExpectation.MatchesIgnoringIsActive(NMock2.Monitoring.Invocation)">
            <summary>
            Matcheses the ignoring is active.
            </summary>
            <param name="invocation">The invocation.</param>
            <returns></returns>
        </member>
        <member name="M:NMock2.IExpectation.Perform(NMock2.Monitoring.Invocation)">
            <summary>
            Performs the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.IExpectation.DescribeActiveExpectationsTo(System.IO.TextWriter)">
            <summary>
            Describes the active expectations to.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:NMock2.IExpectation.DescribeUnmetExpectationsTo(System.IO.TextWriter)">
            <summary>
            Describes the unmet expectations to.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:NMock2.IExpectation.QueryExpectationsBelongingTo(NMock2.Internal.IMockObject,System.Collections.Generic.IList{NMock2.IExpectation})">
            <summary>
            Adds all expectations to <paramref name="result"/> that are associated to <paramref name="mock"/>.
            </summary>
            <param name="mock">The mock for which expectations are queried.</param>
            <param name="result">The result to add matching expectations to.</param>
        </member>
        <member name="P:NMock2.IExpectation.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NMock2.IExpectation.HasBeenMet">
            <summary>
            Gets a value indicating whether this instance has been met.
            </summary>
            <value>
                <c>true</c> if this instance has been met; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NMock2.IMockDefinition">
            <summary>
            The definition of a mock object.
            </summary>
            <remarks>
            Implementations of this interface encapsulate the details of
            how a mock object is defined, and provide the ability to be able to
            instantiate an instance of it.
            </remarks>
        </member>
        <member name="M:NMock2.IMockDefinition.Create(System.Type,NMock2.Mockery,NMock2.Monitoring.IMockObjectFactory)">
            <summary>
            This method supports NMock2 infrastructure and is not intended to be called directly from your code.
            </summary>
            <param name="primaryType">The primary type that is being mocked.</param>
            <param name="mockery">The current <see cref="T:NMock2.Mockery"/> instance.</param>
            <param name="mockFactory">An <see cref="T:NMock2.Monitoring.IMockObjectFactory"/> to use when creating the mock.</param>
            <returns>A new mock instance.</returns>
        </member>
        <member name="M:NMock2.Internal.BuildableExpectation.#ctor(System.String,NMock2.Matcher,NMock2.Matcher)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.BuildableExpectation"/> class.
            </summary>
            <param name="expectationDescription">The expectation description.</param>
            <param name="requiredCountMatcher">The required count matcher.</param>
            <param name="matchingCountMatcher">The matching count matcher.</param>
        </member>
        <member name="M:NMock2.Internal.BuildableExpectation.Matches(NMock2.Monitoring.Invocation)">
            <summary>
            Checks whether stored expectations matches the specified invocation.
            </summary>
            <param name="invocation">The invocation to check.</param>
            <returns>Returns whether one of the stored expectations has met the specified invocation.</returns>
        </member>
        <member name="M:NMock2.Internal.BuildableExpectation.QueryExpectationsBelongingTo(NMock2.Internal.IMockObject,System.Collections.Generic.IList{NMock2.IExpectation})">
            <summary>
            Adds itself to the <paramref name="result"/> if the <see cref="P:NMock2.Internal.BuildableExpectation.Receiver"/> matches
            the specified <paramref name="mock"/>.
            </summary>
            <param name="mock">The mock for which expectations are queried.</param>
            <param name="result">The result to add matching expectations to.</param>
        </member>
        <member name="T:NMock2.Internal.CompositeType">
            <summary>
            Represents one or more types that are to be mocked. Provides operations
            that work over top of all the contained types, as well as a means of
            grouping and identifying unique combinations of types.
            </summary>
            <remarks>Duplicate types are ignored when added. Only interface and class types are
            supported, and there may only be a maximum of one class type per CompositeType instance.</remarks>
        </member>
        <member name="M:NMock2.Internal.CompositeType.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the CompositeType class from the supplied types.
            </summary>
            <param name="types">The types to include in the CompositeType.</param>
        </member>
        <member name="M:NMock2.Internal.CompositeType.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the CompositeType class from the supplied types.
            </summary>
            <param name="type">The first type to include in the CompositeType. This cannot be null.</param>
            <param name="additionalTypes">Zero or more further types to include in the CompositeType.</param>
            <remarks>This constructor is mostly included for convenience.</remarks>
        </member>
        <member name="M:NMock2.Internal.CompositeType.GetMatchingMethods(NMock2.Matcher,System.Boolean)">
            <summary>
            Gets any methods of the contained type(s) that match the specified matcher.
            </summary>
            <param name="matcher">The matcher.</param>
            <param name="firstMatchOnly">if set to <c>true</c> then only the first match is returned.</param>
            <returns>The methods of the contained type(s) that match the specified matcher.</returns>
            <remarks>Only non-private methods can be matched.</remarks>
        </member>
        <member name="M:NMock2.Internal.CompositeType.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>An Int32 containing the hash code for this instance.</returns>
        </member>
        <member name="M:NMock2.Internal.CompositeType.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current CompositeType.
            </summary>
            <param name="obj">The Object to compare with the current CompositeType.</param>
            <returns>true if the specified Object is equal to the current CompositeType; otherwise, false.</returns>
        </member>
        <member name="M:NMock2.Internal.CompositeType.ToString">
            <summary>
            Returns a String that represents the current CompositeType.
            </summary>
            <returns>A String that represents the current CompositeType.</returns>
        </member>
        <member name="M:NMock2.Internal.CompositeType.Equals(NMock2.Internal.CompositeType)">
            <summary>
            Determines whether the specified CompositeType is equal to the current CompositeType.
            </summary>
            <param name="other">The CompositeType to compare with the current CompositeType.</param>
            <returns>true if the specified CompositeType is equal to the current CompositeType; otherwise, false.</returns>
        </member>
        <member name="M:NMock2.Internal.CompositeType.Initialize(System.Type[])">
            <summary>
            Initializes the specified types.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:NMock2.Internal.CompositeType.GetInterfacesImplementedByType(System.Type)">
            <summary>
            Gets the interfaces implemented by the specified type.
            </summary>
            <param name="type">The interface type to inspect.</param>
            <returns>The interfaces implemented by the specified type.</returns>
        </member>
        <member name="M:NMock2.Internal.CompositeType.IsMethodVisible(System.Reflection.MethodInfo)">
            <summary>
            Filters out private methods.
            </summary>
            <param name="methodInfo">The method to test for visibility.</param>
            <returns>True if the method is not private, otherwise false.</returns>
        </member>
        <member name="P:NMock2.Internal.CompositeType.PrimaryType">
            <summary>
            Gets the 'primary' type we are mocking. This may be a class or an interface
            and will determine the proxy generation method that will be used.
            </summary>
        </member>
        <member name="P:NMock2.Internal.CompositeType.AdditionalInterfaceTypes">
            <summary>
            Gets any additional types to be mocked. These will always be interfaces.
            </summary>
        </member>
        <member name="T:NMock2.Internal.DescriptionWriter">
            <summary>
            Used to describe Matchers and other classes for exception handling.
            </summary>
        </member>
        <member name="M:NMock2.Internal.DescriptionWriter.Write(System.Object)">
            <summary>
            Writes the text representation of an object to the text stream by calling ToString on that object.
            </summary>
            <param name="value">The object to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:NMock2.Internal.DescriptionWriter.FormatValue(System.Object)">
            <summary>
            Formats the given <paramref name="value"/> depending on null and the type of the value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>Returns the formatted string.</returns>
        </member>
        <member name="M:NMock2.Internal.DescriptionWriter.FormatString(System.String)">
            <summary>
            Replaces backslashes with three escaped backslashes.
            </summary>
            <param name="s">The string to replace backslashes.</param>
            <returns>Returns the escaped string.</returns>
        </member>
        <member name="T:NMock2.Internal.EventInvocationBuilder">
            <summary>
            Builder for event invocations.
            </summary>
        </member>
        <member name="T:NMock2.Syntax.IEventSyntax">
            <summary>
            Syntax for defining the object that fires an event. 
            </summary>
        </member>
        <member name="M:NMock2.Syntax.IEventSyntax.On(System.Object)">
            <summary>
            Defines the object that fires the event.
            </summary>
            <param name="o">The object firing the event.</param>
            <returns>Event argument syntax defining the arguments passed to the event.</returns>
        </member>
        <member name="T:NMock2.Syntax.IEventArgumentSyntax">
            <summary>
            Syntax for defining event arguments.
            </summary>
        </member>
        <member name="M:NMock2.Syntax.IEventArgumentSyntax.With(System.Object[])">
            <summary>
            Defines the event arguments.
            </summary>
            <param name="args">The event args.</param>
        </member>
        <member name="F:NMock2.Internal.EventInvocationBuilder.eventName">
            <summary>
            Stores the event name to be mocked.
            </summary>
        </member>
        <member name="F:NMock2.Internal.EventInvocationBuilder.mock">
            <summary>
            Stores the mock when called in the On mehtod.
            </summary>
        </member>
        <member name="M:NMock2.Internal.EventInvocationBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.EventInvocationBuilder"/> class.
            </summary>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:NMock2.Internal.EventInvocationBuilder.On(System.Object)">
            <summary>
            Specifies the mock on which the event is fired.
            </summary>
            <param name="o">The mock on which the event is fired.</param>
            <returns>
            Event argument sytax defining the arguments passed to the event.
            </returns>
        </member>
        <member name="M:NMock2.Internal.EventInvocationBuilder.With(System.Object[])">
            <summary>
            Specifies the event arguments that are passed to the event and fires the event.
            </summary>
            <param name="args">The args to be passed to raise the event.</param>
        </member>
        <member name="T:NMock2.Internal.NewEventInvocationBuilder">
            <summary>
            Builder for event invocations.
            </summary>
        </member>
        <member name="T:NMock2.Syntax.INewEventSyntax">
            <summary>
            Syntax for defining the event that is fired.
            </summary>
        </member>
        <member name="M:NMock2.Syntax.INewEventSyntax.Event(System.String)">
            <summary>
            Defines the event to fire.
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>Event argument syntax defining the arguments passed to the event.</returns>
        </member>
        <member name="F:NMock2.Internal.NewEventInvocationBuilder.eventName">
            <summary>
            Stores the event name to be mocked.
            </summary>
        </member>
        <member name="F:NMock2.Internal.NewEventInvocationBuilder.mock">
            <summary>
            Stores the mock when called in the On method.
            </summary>
        </member>
        <member name="M:NMock2.Internal.NewEventInvocationBuilder.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.NewEventInvocationBuilder"/> class.
            </summary>
            <param name="mock">The mock.</param>
        </member>
        <member name="M:NMock2.Internal.NewEventInvocationBuilder.Event(System.String)">
            <summary>
            Defines the event to fire.
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>
            Event argument syntax defining the arguments passed to the event.
            </returns>
        </member>
        <member name="M:NMock2.Internal.NewEventInvocationBuilder.With(System.Object[])">
            <summary>
            Specifies the event arguments that are passed to the event and fires the event.
            </summary>
            <param name="args">The args to be passed to raise the event.</param>
        </member>
        <member name="T:NMock2.Syntax.IReceiverSyntax">
            <summary>
            Syntax defining a receiver.
            </summary>
        </member>
        <member name="M:NMock2.Syntax.IReceiverSyntax.On(System.Object)">
            <summary>
            Defines the receiver.
            </summary>
            <param name="receiver">The dynamic mock on which the expectation or stub is applied.</param>
            <returns>Method syntax defining the method, property or event.</returns>
        </member>
        <member name="T:NMock2.Syntax.IMethodSyntax">
            <summary>
            Syntax defining a method, property or event (de)registration.
            </summary>
        </member>
        <member name="M:NMock2.Syntax.IMethodSyntax.Method(System.String,System.Type[])">
            <summary>
            Defines a method.
            </summary>
            <param name="name">The name of the method.</param>
            <param name="typeParams">The generic type params to match.</param>
            <returns>
            Argument syntax defining the arguments of the method.
            </returns>
        </member>
        <member name="M:NMock2.Syntax.IMethodSyntax.Method(NMock2.Matcher,System.Type[])">
            <summary>
            Defines a method.
            </summary>
            <param name="nameMatcher">Matcher defining the method.</param>
            <param name="typeParams">The generic type params to match.</param>
            <returns>Argument syntax defining the arguments of the method.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMethodSyntax.Method(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Defines a method.
            </summary>
            <param name="method">The method.</param>
            <param name="typeParams">The generic type params to match.</param>
            <returns>Argument syntax defining the arguments of the method.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMethodSyntax.Method(NMock2.Matcher,NMock2.Matcher)">
            <summary>
            Defines a method.
            </summary>
            <param name="methodMatcher">Matcher for matching the method on an invocation.</param>
            <param name="typeParamsMatcher">Matchers for matching type parameters.</param>
            <returns>Argument syntax defining the arguments of the method.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMethodSyntax.SetProperty(System.String)">
            <summary>
            Defines a property setter.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>Value syntax defining the value of the property.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMethodSyntax.GetProperty(System.String)">
            <summary>
            Defines a property getter.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>Match Syntax defining the property behavior.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMethodSyntax.EventAdd(System.String)">
            <summary>
            Defines an event registration.
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>Match syntax defining the behavior of the event adder.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMethodSyntax.EventAdd(System.String,NMock2.Matcher)">
            <summary>
            Defines an event registration.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="listenerMatcher">The listener matcher.</param>
            <returns>Match syntax defining the behavior of the event adder.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMethodSyntax.EventAdd(System.String,System.Delegate)">
            <summary>
            Defines an event registration.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="equalListener">Delegate defining compatible listeners.</param>
            <returns>Match syntax defining the behavior of the event adder.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMethodSyntax.EventRemove(System.String)">
            <summary>
            Defines an event deregistration.
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>Match syntax defining the behavior of the event remover.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMethodSyntax.EventRemove(System.String,NMock2.Matcher)">
            <summary>
            Defines an event deregistration.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="listenerMatcher">The listener matcher.</param>
            <returns>Match syntax defining the behavior of the event remover.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMethodSyntax.EventRemove(System.String,System.Delegate)">
            <summary>
            Defines an event deregistration.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="equalListener">Delegate defining compatible listeners.</param>
            <returns> Match syntax defining the behavior of the event remover.</returns>
        </member>
        <member name="P:NMock2.Syntax.IMethodSyntax.Get">
            <summary>
            Gets an indexer (get operation).
            </summary>
            <value>Get indexer syntax defining the value returned by the indexer.</value>
        </member>
        <member name="P:NMock2.Syntax.IMethodSyntax.Set">
            <summary>
            Gets an indexer (set operation).
            </summary>
            <value>Set indexer syntax defining the value the indexer is set to.</value>
        </member>
        <member name="T:NMock2.Syntax.IArgumentSyntax">
            <summary>
            Syntax for defining expected arguments of a method call.
            </summary>
        </member>
        <member name="T:NMock2.Syntax.IMatchSyntax">
            <summary>
            Syntax defining matching criterias.
            </summary>
        </member>
        <member name="T:NMock2.Syntax.IActionSyntax">
            <summary>
            Syntax for defining actions.
            </summary>
        </member>
        <member name="T:NMock2.Syntax.ICommentSyntax">
            <summary>
            Syntax for adding an explanation for the expectation.
            </summary>
        </member>
        <member name="M:NMock2.Syntax.ICommentSyntax.Comment(System.String)">
            <summary>
            Adds a comment for the expectation that is added to the error message if the expectation is not met.
            </summary>
            <param name="comment">The comment that is shown in the error message if this expectation is not met.
            You can describe here why this expectation has to be met.</param>
        </member>
        <member name="M:NMock2.Syntax.IActionSyntax.Will(NMock2.IAction[])">
            <summary>
            Defines what will happen.
            </summary>
            <param name="actions">The actions to take.</param>
            <returns>Returns the comment syntax defined after will.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMatchSyntax.Matching(NMock2.Matcher)">
            <summary>
            Defines a matching criteria.
            </summary>
            <param name="matcher">The matcher.</param>
            <returns>Action syntax defining the action to take.</returns>
        </member>
        <member name="M:NMock2.Syntax.IArgumentSyntax.With(System.Object[])">
            <summary>
            Defines the arguments that are expected on the method call.
            </summary>
            <param name="expectedArguments">The expected arguments.</param>
            <returns>Matcher syntax.</returns>
        </member>
        <member name="M:NMock2.Syntax.IArgumentSyntax.WithNoArguments">
            <summary>
            Defines that no arguments are expected on the method call.
            </summary>
            <returns>Matcher syntax.</returns>
        </member>
        <member name="M:NMock2.Syntax.IArgumentSyntax.WithAnyArguments">
            <summary>
            Defines that all arguments are allowed on the method call.
            </summary>
            <returns>Matcher syntax.</returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.#ctor(System.String,NMock2.Matcher,NMock2.Matcher)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.ExpectationBuilder"/> class.
            </summary>
            <param name="description">The description.</param>
            <param name="requiredCountMatcher">The required count matcher.</param>
            <param name="acceptedCountMatcher">The accepted count matcher.</param>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.On(System.Object)">
            <summary>
            Defines the receiver.
            </summary>
            <param name="receiver">The dynamic mock on which the expectation or stub is applied.</param>
            <returns>Method syntax defining the method, property or event.</returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.Method(System.String,System.Type[])">
            <summary>
            Methods the specified method name.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="typeParams">The type params.</param>
            <returns></returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.Method(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Defines a method.
            </summary>
            <param name="method">The method.</param>
            <param name="typeParams">The generic type params to match.</param>
            <returns>
            Argument syntax defining the arguments of the method.
            </returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.Method(NMock2.Matcher,System.Type[])">
            <summary>
            Methods the specified method matcher.
            </summary>
            <param name="methodMatcher">The method matcher.</param>
            <param name="typeParams">The type params.</param>
            <returns></returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.Method(NMock2.Matcher,NMock2.Matcher)">
            <summary>
            Defines a method.
            </summary>
            <param name="methodMatcher">Matcher for matching the method on an invocation.</param>
            <param name="typeParamsMatcher">Matchers for matching type parameters.</param>
            <returns>
            Argument syntax defining the arguments of the method.
            </returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.GetProperty(System.String)">
            <summary>
            Gets the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.SetProperty(System.String)">
            <summary>
            Sets the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.EventAdd(System.String)">
            <summary>
            Defines an event registration.
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>
            Match syntax defining the behavior of the event adder.
            </returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.EventAdd(System.String,NMock2.Matcher)">
            <summary>
            Defines an event registration.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="listenerMatcher">The listener matcher.</param>
            <returns>
            Match syntax defining the behavior of the event adder.
            </returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.EventAdd(System.String,System.Delegate)">
            <summary>
            Defines an event registration.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="equalListener">Delegate defining compatible listeners.</param>
            <returns>
            Match syntax defining the behavior of the event adder.
            </returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.EventRemove(System.String,NMock2.Matcher)">
            <summary>
            Defines an event deregistration.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="listenerMatcher">The listener matcher.</param>
            <returns>
            Match syntax defining the behavior of the event remover.
            </returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.EventRemove(System.String)">
            <summary>
            Defines an event deregistration.
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>
            Match syntax defining the behavior of the event remover.
            </returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.EventRemove(System.String,System.Delegate)">
            <summary>
            Defines an event deregistration.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="equalListener">Delegate defining compatible listeners.</param>
            <returns>
            Match syntax defining the behavior of the event remover.
            </returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.With(System.Object[])">
            <summary>
            Defines the arguments that are expected on the method call.
            </summary>
            <param name="expectedArguments">The expected arguments.</param>
            <returns>Matcher syntax.</returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.WithNoArguments">
            <summary>
            Defines that no arguments are expected on the method call.
            </summary>
            <returns>Matcher syntax.</returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.WithAnyArguments">
            <summary>
            Defines that all arguments are allowed on the method call.
            </summary>
            <returns>Matcher syntax.</returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.Matching(NMock2.Matcher)">
            <summary>
            Defines a matching criteria.
            </summary>
            <param name="matcher">The matcher.</param>
            <returns>
            Action syntax defining the action to take.
            </returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.Will(NMock2.IAction[])">
            <summary>
            Defines what will happen.
            </summary>
            <param name="actions">The actions to take.</param>
            <returns>
            Returns the comment syntax defined after will.
            </returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.Comment(System.String)">
            <summary>
            Adds a comment for the expectation that is added to the error message if the expectation is not met.
            </summary>
            <param name="comment">The comment that is shown in the error message if this expectation is not met.
            You can describe here why this expectation has to be met.</param>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.ArgumentMatchers(System.Object[])">
            <summary>
            Arguments the matchers.
            </summary>
            <param name="expectedArguments">The expected arguments.</param>
            <returns></returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.NewMethodNameMatcher(System.String,System.String)">
            <summary>
            News the method name matcher.
            </summary>
            <param name="description">The description.</param>
            <param name="methodName">Name of the method.</param>
            <returns></returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.EnsureMatchingMethodExistsOnMock(NMock2.Matcher,System.String)">
            <summary>
            Ensures the matching method exists on mock.
            </summary>
            <param name="methodMatcher">The method matcher.</param>
            <param name="methodDescription">The method description.</param>
        </member>
        <member name="P:NMock2.Internal.ExpectationBuilder.Get">
            <summary>
            Gets an indexer (get operation).
            </summary>
            <value>Get indexer syntax defining the value returned by the indexer.</value>
        </member>
        <member name="P:NMock2.Internal.ExpectationBuilder.Set">
            <summary>
            Gets an indexer (set operation).
            </summary>
            <value>Set indexer syntax defining the value the indexer is set to.</value>
        </member>
        <member name="T:NMock2.Syntax.IValueSyntax">
            <summary>
            Syntax defining a value.
            </summary>
        </member>
        <member name="M:NMock2.Syntax.IValueSyntax.To(NMock2.Matcher)">
            <summary>
            Defines a value.
            </summary>
            <param name="valueMatcher">The value matcher.</param>
            <returns>Match syntax defining the behavior of the value.</returns>
        </member>
        <member name="M:NMock2.Syntax.IValueSyntax.To(System.Object)">
            <summary>
            Defines a value.
            </summary>
            <param name="equalValue">The value.</param>
            <returns>Match syntax defining the behavior of the value.</returns>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.PropertyValueBuilder.#ctor(NMock2.Internal.ExpectationBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.ExpectationBuilder.PropertyValueBuilder"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:NMock2.Syntax.IGetIndexerSyntax">
            <summary>
            Syntax defining an indexer get operation.
            </summary>
        </member>
        <member name="P:NMock2.Syntax.IGetIndexerSyntax.Item(System.Object[])">
            <summary>
            Defines the indexer.
            </summary>
            <value>
            Match syntax to define a matcher for the object returned by the indexer.
            </value>
            <param name="args">The arguments of the matcher.</param>
        </member>
        <member name="F:NMock2.Internal.ExpectationBuilder.IndexGetterBuilder.builder">
            <summary>
            Holds the instance to the <see cref="T:NMock2.Internal.ExpectationBuilder"/>.
            </summary>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.IndexGetterBuilder.#ctor(NMock2.Internal.BuildableExpectation,NMock2.Internal.ExpectationBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.ExpectationBuilder.IndexGetterBuilder"/> class.
            </summary>
            <param name="expectation">The expectation.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:NMock2.Syntax.ISetIndexerSyntax">
            <summary>
            Syntax defining an indexer set operation.
            </summary>
        </member>
        <member name="P:NMock2.Syntax.ISetIndexerSyntax.Item(System.Object[])">
            <summary>
            Defines the indexer.
            </summary>
            <value>Defines the value the indexer is set to.</value>
            <param name="args">The argument list.</param>
        </member>
        <member name="M:NMock2.Internal.ExpectationBuilder.IndexSetterBuilder.#ctor(NMock2.Internal.BuildableExpectation,NMock2.Internal.ExpectationBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.ExpectationBuilder.IndexSetterBuilder"/> class.
            </summary>
            <param name="expectation">The expectation.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:NMock2.Internal.ExpectationException">
            <summary>
            Exception representing an expectation exception.
            </summary>
        </member>
        <member name="M:NMock2.Internal.ExpectationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.ExpectationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NMock2.Internal.ExpectationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.ExpectationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NMock2.Internal.ExpectationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.ExpectationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:NMock2.Internal.IExpectationOrdering">
            <summary>
            Represents expectations (order or unordered).
            </summary>
        </member>
        <member name="M:NMock2.Internal.IExpectationOrdering.AddExpectation(NMock2.IExpectation)">
            <summary>
            Adds an expectation.
            </summary>
            <param name="expectation">The expectation to add.</param>
        </member>
        <member name="M:NMock2.Internal.IExpectationOrdering.RemoveExpectation(NMock2.IExpectation)">
            <summary>
            Removes the specified expectation.
            </summary>
            <param name="expectation">The expectation to remove.</param>
        </member>
        <member name="T:NMock2.Internal.IMockObject">
            <summary>
            Interface for mocks.
            </summary>
        </member>
        <member name="M:NMock2.Internal.IMockObject.HasMethodMatching(NMock2.Matcher)">
            <summary>
            Determines if this mock has a particular method.
            </summary>
            <param name="methodMatcher">A Matcher to use in identifying the method.</param>
            <returns>True if a matching method exists, otherwise false.</returns>
        </member>
        <member name="M:NMock2.Internal.IMockObject.GetMethodsMatching(NMock2.Matcher)">
            <summary>
            Retrieves all matching methods on this mock. 
            </summary>
            <param name="methodMatcher">A Matcher to use in identifying the methods.</param>
            <returns>A list of zero or more matching MethodInfo instances.</returns>
        </member>
        <member name="M:NMock2.Internal.IMockObject.AddExpectation(NMock2.IExpectation)">
            <summary>
            Adds an expectation to this mock.
            </summary>
            <param name="expectation">The expectation to add.</param>
        </member>
        <member name="M:NMock2.Internal.IMockObject.AddEventHandler(System.String,System.Delegate)">
            <summary>
            Adds an event handler on this mock.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="handler">The handler to add.</param>
        </member>
        <member name="M:NMock2.Internal.IMockObject.RemoveEventHandler(System.String,System.Delegate)">
            <summary>
            Removes an event handler from this mock.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="handler">The handler to remove.</param>
        </member>
        <member name="M:NMock2.Internal.IMockObject.RaiseEvent(System.String,System.Object[])">
            <summary>
            Raises an event on this mock.
            </summary>
            <param name="eventName">Name of the event to fire.</param>
            <param name="args">The arguments passed to the event.</param>
        </member>
        <member name="P:NMock2.Internal.IMockObject.MockName">
            <summary>
            Gets the name of the mock instance. This is often used in error messages
            to identify a specific mock instance.
            </summary>
        </member>
        <member name="T:NMock2.Internal.MockBuilder">
            <summary>
            Allows a mock object to be incrementally defined, and then finally created.
            </summary>
        </member>
        <member name="T:NMock2.Syntax.IMockDefinitionSyntax">
            <summary>
            Syntax describing the initial characteristics of a new mock object.
            </summary>
        </member>
        <member name="M:NMock2.Syntax.IMockDefinitionSyntax.Implementing``1">
            <summary>
            Specifies a type that this mock should implement. This may be a class or interface,
            but there can only be a maximum of one class implemented by a mock.
            </summary>
            <typeparam name="T">The type to implement.</typeparam>
            <returns>The mock object definition.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMockDefinitionSyntax.Implementing(System.Type[])">
            <summary>
            Specifies the types that this mock should implement. These may be a class or interface,
            but there can only be a maximum of one class implemented by a mock.
            </summary>
            <param name="types">The types to implement.</param>
            <returns>The mock object definition.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMockDefinitionSyntax.OfStyle(NMock2.MockStyle)">
            <summary>
            Specifies how the mock object should behave when first created.
            It is invalid to set the MockStyle of a mock more than once.
            </summary>
            <param name="style">A MockStyle value.</param>
            <returns>The mock object definition.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMockDefinitionSyntax.WithArgs(System.Object[])">
            <summary>
            Specifies the arguments for the constructor of the class to be mocked.
            Only applicable when mocking a class with a non-default constructor.
            It is invalid to specify the constructor arguments of a mock more than once.
            </summary>
            <param name="args">The arguments for the class constructor.</param>
            <returns>The mock object definition.</returns>
        </member>
        <member name="M:NMock2.Syntax.IMockDefinitionSyntax.Named(System.String)">
            <summary>
            Specifies a name for the mock. This will be used in error messages,
            and as the return value of ToString() if not mocking a class.
            It is invalid to specify the name of a mock more than once.
            </summary>
            <param name="name">The name for the mock.</param>
            <returns>The mock object definition.</returns>
        </member>
        <member name="F:NMock2.Internal.MockBuilder.EmptyArgsArray">
            <summary>
            A single empty array instance that is used as a default value
            for constructor arguments.
            </summary>
        </member>
        <member name="F:NMock2.Internal.MockBuilder.name">
            <summary>
            The name of the mock object. Null is a valid value.
            </summary>
        </member>
        <member name="F:NMock2.Internal.MockBuilder.types">
            <summary>
            The types that the mock object needs to implement.
            </summary>
        </member>
        <member name="F:NMock2.Internal.MockBuilder.constructorArgs">
            <summary>
            Constructor arguments for any class type that this mock might subclass.
            If not subclassing, or if using a default constructor, then this should
            be an empty array.
            </summary>
        </member>
        <member name="F:NMock2.Internal.MockBuilder.mockStyle">
            <summary>
            The MockStyle for the mock. If not specified, this will ultimately be
            assumed to be MockStyle.Default.
            </summary>
        </member>
        <member name="M:NMock2.Internal.MockBuilder.Implementing``1">
            <summary>
            Specifies a type that this mock should implement. This may be a class or interface,
            but there can only be a maximum of one class implemented by a mock.
            </summary>
            <typeparam name="T">The type to implement.</typeparam>
            <returns>The mock object definition.</returns>
        </member>
        <member name="M:NMock2.Internal.MockBuilder.Implementing(System.Type[])">
            <summary>
            Specifies the types that this mock should implement. These may be a class or interface,
            but there can only be a maximum of one class implemented by a mock.
            </summary>
            <param name="types">The types to implement.</param>
            <returns>The mock object definition.</returns>
        </member>
        <member name="M:NMock2.Internal.MockBuilder.OfStyle(NMock2.MockStyle)">
            <summary>
            Specifies how the mock object should behave when first created.
            It is invalid to set the MockStyle of a mock more than once.
            </summary>
            <param name="style">A MockStyle value.</param>
            <returns>The mock object definition.</returns>
        </member>
        <member name="M:NMock2.Internal.MockBuilder.WithArgs(System.Object[])">
            <summary>
            Specifies the arguments for the constructor of the class to be mocked.
            Only applicable when mocking a class with a non-default constructor.
            It is invalid to specify the constructor arguments of a mock more than once.
            </summary>
            <param name="args">The arguments for the class constructor.</param>
            <returns>The mock object definition.</returns>
        </member>
        <member name="M:NMock2.Internal.MockBuilder.Named(System.String)">
            <summary>
            Specifies a name for the mock. This will be used in error messages,
            and as the return value of ToString() if not mocking a class.
            It is invalid to specify the name of a mock more than once.
            </summary>
            <param name="name">The name for the mock.</param>
            <returns>The mock object definition.</returns>
        </member>
        <member name="M:NMock2.Internal.MockBuilder.Create(System.Type,NMock2.Mockery,NMock2.Monitoring.IMockObjectFactory)">
            <summary>
            This method supports NMock2 infrastructure and is not intended to be called directly from your code.
            </summary>
            <param name="primaryType">The primary type that is being mocked.</param>
            <param name="mockery">The current <see cref="T:NMock2.Mockery"/> instance.</param>
            <param name="mockObjectFactory">An <see cref="T:NMock2.Monitoring.IMockObjectFactory"/> to use when creating the mock.</param>
            <returns>A new mock instance.</returns>
        </member>
        <member name="M:NMock2.Internal.MockBuilder.DefaultNameFor(System.Type)">
            <summary>
            Returns the default name for a type that is used to name mocks.
            </summary>
            <param name="type">The type to get the default name for.</param>
            <returns>Default name for the specified type.</returns>
        </member>
        <member name="M:NMock2.Internal.MockBuilder.FirstLowerCaseChar(System.String)">
            <summary>
            Finds the first lower case char in the specified string.
            </summary>
            <param name="s">The string to inspect.</param>
            <returns>the first lower case char in the specified string.</returns>
        </member>
        <member name="M:NMock2.Internal.MockBuilder.CheckInterfacesDoNotContainToStringMethodDeclaration(NMock2.Internal.CompositeType)">
            <summary>
            Checks that interfaces do not contain ToString method declarations.
            </summary>
            <param name="mockedTypes">The types that are to be mocked.</param>
        </member>
        <member name="F:NMock2.Internal.MockObject.mockery">
            <summary>
            Stores the backlink to the mockery which created this mock object.
            </summary>
        </member>
        <member name="F:NMock2.Internal.MockObject.mockedTypes">
            <summary>
            Stores the mocked type(s).
            </summary>
        </member>
        <member name="F:NMock2.Internal.MockObject.name">
            <summary>
            Stores the name of the mock object.
            </summary>
        </member>
        <member name="F:NMock2.Internal.MockObject.eventHandlers">
            <summary>
            Stores the event handlers that could be added to the mock object.
            </summary>
        </member>
        <member name="F:NMock2.Internal.MockObject.assignedPropertyResults">
            <summary>
            Results that have been explicitly assigned via a call to a property setter.
            These will be returned for all subsequent calls to the matching property getter.
            </summary>
        </member>
        <member name="F:NMock2.Internal.MockObject.rememberedMethodResults">
            <summary>
            Results that have been generated for methods or property getters.
            These will be returned for all subsequent calls to the same member.
            </summary>
        </member>
        <member name="M:NMock2.Internal.MockObject.#ctor(NMock2.Mockery,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.MockObject"/> class.
            This constructor is needed by the <see cref="T:NMock2.Monitoring.InterfaceOnlyMockObjectFactory"/> (the IL generation has to be changed!)
            </summary>
            <param name="mockery">The mockery.</param>
            <param name="mockedType">Type of the mocked.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:NMock2.Internal.MockObject.#ctor(NMock2.Mockery,NMock2.Internal.CompositeType,System.String,NMock2.MockStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.MockObject"/> class.
            </summary>
            <param name="mockery">The mockery.</param>
            <param name="mockedType">Type of the mocked.</param>
            <param name="name">The name.</param>
            <param name="mockStyle">The mock style.</param>
        </member>
        <member name="M:NMock2.Internal.MockObject.GetStubResult(NMock2.Monitoring.Invocation)">
            <summary>
            Gets the default result for an invocation.
            </summary>
            <param name="invocation">The invocation.</param>
            <returns>The default value to return as result of the invocation. 
            <see cref="F:System.Reflection.Missing.Value"/> if no default value was provided.</returns>
        </member>
        <member name="M:NMock2.Internal.MockObject.GetMemberName(NMock2.Monitoring.Invocation)">
            <summary>
            Gets the name of the member to be used as the name for a mock returned an a call to a stub.
            </summary>
            <param name="invocation">The invocation.</param>
            <returns>Name of the mock created as a result value on a call to a stub.</returns>
        </member>
        <member name="P:NMock2.Internal.MockObject.MockStyle">
            <summary>
            Gets the mock style of this mock.
            </summary>
        </member>
        <member name="M:NMock2.Internal.OrderedExpectations.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.OrderedExpectations"/> class.
            </summary>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:NMock2.Internal.OrderedExpectations.Matches(NMock2.Monitoring.Invocation)">
            <summary>
            Checks whether stored expectations matches the specified invocation.
            </summary>
            <param name="invocation">The invocation to check.</param>
            <returns>Returns whether one of the stored expectations has met the specified invocation.</returns>
        </member>
        <member name="M:NMock2.Internal.OrderedExpectations.QueryExpectationsBelongingTo(NMock2.Internal.IMockObject,System.Collections.Generic.IList{NMock2.IExpectation})">
            <summary>
            Adds all expectations to <paramref name="result"/> that are associated to <paramref name="mock"/>.
            </summary>
            <param name="mock">The mock for which expectations are queried.</param>
            <param name="result">The result to add matching expectations to.</param>
        </member>
        <member name="P:NMock2.Internal.OrderedExpectations.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NMock2.Internal.OrderedExpectations.HasBeenMet">
            <summary>
            Gets a value indicating whether this instance has been met.
            </summary>
            <value>
            <c>true</c> if this instance has been met; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NMock2.Internal.OrderedExpectations.CurrentExpectation">
            <summary>
            Gets the current expectation.
            </summary>
            <value>The current expectation.</value>
        </member>
        <member name="P:NMock2.Internal.OrderedExpectations.HasNextExpectation">
            <summary>
            Gets a value indicating whether this instance has next expectation.
            </summary>
            <value>
                <c>true</c> if this instance has next expectation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NMock2.Internal.OrderedExpectations.NextExpectation">
            <summary>
            Gets the next expectation.
            </summary>
            <value>The next expectation.</value>
        </member>
        <member name="T:NMock2.Internal.StubMockStyleDictionary">
            <summary>
            Provides functionality to map stubs and specific types of a stub to mock styles.
            </summary>
        </member>
        <member name="F:NMock2.Internal.StubMockStyleDictionary.mockStyleForType">
            <summary>
            holds mappings from stub.type to mock style.
            </summary>
        </member>
        <member name="F:NMock2.Internal.StubMockStyleDictionary.mockStyleForStub">
            <summary>
            holds mappings from stub to mock style (holds for all types unless there is a mapping defined in <see cref="F:NMock2.Internal.StubMockStyleDictionary.mockStyleForType"/>.
            </summary>
        </member>
        <member name="P:NMock2.Internal.StubMockStyleDictionary.Item(NMock2.Internal.IMockObject)">
            <summary>
            Gets or sets the mock style for the specified mock.
            </summary>
            <param name="mock">the mock object</param>
            <value>mock style. null if no value defined.</value>
        </member>
        <member name="P:NMock2.Internal.StubMockStyleDictionary.Item(NMock2.Internal.IMockObject,System.Type)">
            <summary>
            Gets or sets the mock style for the specified mock and type.
            </summary>
            <param name="mock">the mock object</param>
            <param name="nestedMockType">the type of the nested mock.</param>
            <value>mock style. null if no value defined.</value>
        </member>
        <member name="T:NMock2.Internal.StubMockStyleDictionary.Key">
            <summary>
            Key into the <see cref="F:NMock2.Internal.StubMockStyleDictionary.mockStyleForType"/> dictionary.
            </summary>
        </member>
        <member name="M:NMock2.Internal.StubMockStyleDictionary.Key.#ctor(NMock2.Internal.IMockObject,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.StubMockStyleDictionary.Key"/> class.
            </summary>
            <param name="mock">The mock object.</param>
            <param name="nestedMockType">Type of the nested mock.</param>
        </member>
        <member name="M:NMock2.Internal.StubMockStyleDictionary.Key.Equals(System.Object)">
            <summary>
            Whether this instance equals the specified other.
            </summary>
            <param name="other">The other to compare to.</param>
            <returns>A value indicating whether both instances are equal.</returns>
        </member>
        <member name="M:NMock2.Internal.StubMockStyleDictionary.Key.Equals(NMock2.Internal.StubMockStyleDictionary.Key)">
            <summary>
            Whether this instance equals the specified other.
            </summary>
            <param name="other">The other to compare to.</param>
            <returns>A value indicating whether both instances are equal.</returns>
        </member>
        <member name="M:NMock2.Internal.StubMockStyleDictionary.Key.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NMock2.Internal.StubMockStyleDictionary.Key.Mock">
            <summary>
            Gets the mock.
            </summary>
            <value>The mock object.</value>
        </member>
        <member name="P:NMock2.Internal.StubMockStyleDictionary.Key.NestedMockType">
            <summary>
            Gets the type of the nested mock.
            </summary>
            <value>The type of the nested mock.</value>
        </member>
        <member name="F:NMock2.Internal.UnorderedExpectations.expectations">
            <summary>
            Stores the expectations that could be added.
            </summary>
        </member>
        <member name="F:NMock2.Internal.UnorderedExpectations.depth">
            <summary>
            Stores the calling depth for the document writer output.
            </summary>
        </member>
        <member name="F:NMock2.Internal.UnorderedExpectations.prompt">
            <summary>
            Stores the string to be presented whe describing the expectation.
            </summary>
        </member>
        <member name="M:NMock2.Internal.UnorderedExpectations.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.UnorderedExpectations"/> class.
            </summary>
        </member>
        <member name="M:NMock2.Internal.UnorderedExpectations.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Internal.UnorderedExpectations"/> class.
            </summary>
            <param name="depth">The calling depth.</param>
        </member>
        <member name="M:NMock2.Internal.UnorderedExpectations.Matches(NMock2.Monitoring.Invocation)">
            <summary>
            Checks whether stored expectations matches the specified invocation.
            </summary>
            <param name="invocation">The invocation to check.</param>
            <returns>Returns whether one of the stored expectations has met the specified invocation.</returns>
        </member>
        <member name="M:NMock2.Internal.UnorderedExpectations.Perform(NMock2.Monitoring.Invocation)">
            <summary>
            Performs the specified invocation on the corresponding expectation if a match was found.
            </summary>
            <param name="invocation">The invocation to match.</param>
        </member>
        <member name="M:NMock2.Internal.UnorderedExpectations.QueryExpectationsBelongingTo(NMock2.Internal.IMockObject,System.Collections.Generic.IList{NMock2.IExpectation})">
            <summary>
            Adds all expectations to <paramref name="result"/> that are associated to <paramref name="mock"/>.
            </summary>
            <param name="mock">The mock for which expectations are queried.</param>
            <param name="result">The result to add matching expectations to.</param>
        </member>
        <member name="P:NMock2.Internal.UnorderedExpectations.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NMock2.Internal.UnorderedExpectations.HasBeenMet">
            <summary>
            Gets a value indicating whether this instance has been met.
            </summary>
            <value>
                <c>true</c> if this instance has been met; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NMock2.Is">
            <summary>
            Provides shortcuts to <see cref="T:NMock2.Matcher"/>s.
            </summary>
        </member>
        <member name="F:NMock2.Is.Anything">
            <summary>
            Matches anything.
            </summary>
        </member>
        <member name="F:NMock2.Is.Nothing">
            <summary>
            Matches nothing.
            </summary>
        </member>
        <member name="F:NMock2.Is.Null">
            <summary>
            Matches if the value is null.
            </summary>
        </member>
        <member name="F:NMock2.Is.NotNull">
            <summary>
            Matches if the value is not null.
            </summary>
        </member>
        <member name="F:NMock2.Is.Out">
            <summary>
            Matches out parameters of methods.
            </summary>
        </member>
        <member name="M:NMock2.Is.EqualTo(System.Object)">
            <summary>
            Matches objects the are equal to the expected object.
            <seealso cref="M:NMock2.Is.Same(System.Object)"/>
            </summary>
            <param name="expected">The expected.</param>
            <returns>Returns a new instance of the <see cref="T:NMock2.Matchers.EqualMatcher"/> class.</returns>
        </member>
        <member name="M:NMock2.Is.Same(System.Object)">
            <summary>
            Matches an expected object.
            <seealso cref="M:NMock2.Is.EqualTo(System.Object)"/>
            </summary>
            <param name="expected">The expected object.</param>
            <returns>Returns a new instance of the <see cref="T:NMock2.Matchers.SameMatcher"/> class.</returns>
        </member>
        <member name="M:NMock2.Is.StringContaining(System.String)">
            <summary>
            Matches strings containing the specified <paramref name="substring"/>.
            </summary>
            <param name="substring">The substring.</param>
            <returns>Returns a new instance of the <see cref="T:NMock2.Matchers.StringContainsMatcher"/> class.</returns>
        </member>
        <member name="M:NMock2.Is.GreaterThan(System.IComparable)">
            <summary>
            Matches objects that are greater than <paramref name="value"/>.
            </summary>
            <param name="value">The value to compare.</param>
            <returns>Returns a new instance of the <see cref="T:NMock2.Matchers.ComparisonMatcher"/> class.</returns>
        </member>
        <member name="M:NMock2.Is.AtLeast(System.IComparable)">
            <summary>
            Matches objects that are at least equal to <paramref name="value"/>.
            </summary>
            <param name="value">The value to compare.</param>
            <returns>Returns a new instance of the <see cref="T:NMock2.Matchers.ComparisonMatcher"/> class.</returns>
        </member>
        <member name="M:NMock2.Is.LessThan(System.IComparable)">
            <summary>
            Matches objects less than <paramref name="value"/>.
            </summary>
            <param name="value">The value to compare.</param>
            <returns>Returns a new instance of the <see cref="T:NMock2.Matchers.ComparisonMatcher"/> class.</returns>
        </member>
        <member name="M:NMock2.Is.AtMost(System.IComparable)">
            <summary>
            Matches objects that are less or equal to <paramref name="value"/>.
            </summary>
            <param name="value">The value to compare.</param>
            <returns>Returns a new instance of the <see cref="T:NMock2.Matchers.ComparisonMatcher"/> class.</returns>
        </member>
        <member name="M:NMock2.Is.In(System.Collections.ICollection)">
            <summary>
            Matches objects in the specified collection.
            </summary>
            <param name="collection">The collection with objects to match.</param>
            <returns>Returns a new instance of the <see cref="T:NMock2.Matchers.ElementMatcher"/> class.</returns>
        </member>
        <member name="M:NMock2.Is.OneOf(System.Object[])">
            <summary>
            Matches objects in the specified elements.
            </summary>
            <param name="elements">The elements to match.</param>
            <returns>Returns a new instance of the <see cref="T:NMock2.Matchers.ElementMatcher"/> class.</returns>
        </member>
        <member name="M:NMock2.Is.TypeOf(System.Type)">
            <summary>
            Matches objects of the specified type.
            </summary>
            <param name="type">The type to match.</param>
            <returns>Returns a new instance of the <see cref="T:NMock2.Matchers.TypeMatcher"/> class.</returns>
        </member>
        <member name="M:NMock2.Is.TypeOf``1">
            <summary>
            Matches objects of the specified type.
            </summary>
            <typeparam name="T">The type to match.</typeparam>
            <returns>
            Returns a new instance of the <see cref="T:NMock2.Matchers.TypeMatcher"/> class.
            </returns>
        </member>
        <member name="M:NMock2.Is.Match``1(NMock2.Matchers.GenericMatcher{``0}.MatchExpression)">
            <summary>
            Matches objects against the specified expression.
            </summary>
            <typeparam name="T">Type of the value to match.</typeparam>
            <param name="expression">The match expression.</param>
            <returns>returns a new instance of the <see cref="T:NMock2.Matchers.GenericMatcher`1"/>.</returns>
        </member>
        <member name="T:NMock2.Matchers.AlwaysMatcher">
            <summary>
            A matcher that will always or never match independent of the value matched but depending on how it is initialized.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.AlwaysMatcher.matches">
            <summary>
            Stores the matcher value which was given at initialization.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.AlwaysMatcher.description">
            <summary>
            Stores the description which was given at initialization.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.AlwaysMatcher.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.AlwaysMatcher"/> class.
            </summary>
            <param name="matches">if set to <c>true</c> the matcher will always match, otherwise it will never match.</param>
            <param name="description">The description which will be printed out when calling <see cref="M:NMock2.Matchers.AlwaysMatcher.DescribeTo(System.IO.TextWriter)"/>.</param>
        </member>
        <member name="M:NMock2.Matchers.AlwaysMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Returns whether the object matches.</returns>
        </member>
        <member name="M:NMock2.Matchers.AlwaysMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.AndMatcher">
            <summary>
            Matcher that is the logical and combination of two matchers.
            </summary>
        </member>
        <member name="T:NMock2.Matchers.BinaryOperator">
            <summary>
            BinaryOperator is an abstract base class for matchers that combine two matchers into a single matcher. 
            </summary>
        </member>
        <member name="F:NMock2.Matchers.BinaryOperator.Right">
            <summary>
            The right hand side of the binary operator.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.BinaryOperator.Left">
            <summary>
            The left hand side of the binary operator.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.BinaryOperator.#ctor(NMock2.Matcher,NMock2.Matcher)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.BinaryOperator"/> class.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:NMock2.Matchers.AndMatcher.#ctor(NMock2.Matcher,NMock2.Matcher)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.AndMatcher"/> class.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:NMock2.Matchers.AndMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Returns whether the object matches.</returns>
        </member>
        <member name="M:NMock2.Matchers.AndMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.ArgumentsMatcher">
            <summary>
            Matcher that checks whether parameters of a method match with the specified list of matchers.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.ArgumentsMatcher.OutParameter">
            <summary>
            Stores the out parameter.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.ArgumentsMatcher.valueMatchers">
            <summary>
            Stores the valuematchers given at initialization.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.ArgumentsMatcher.#ctor(NMock2.Matcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.ArgumentsMatcher"/> class.
            </summary>
            <param name="valueMatchers">The value matchers. This is an ordered list of matchers, each matching a single method argument.</param>
        </member>
        <member name="M:NMock2.Matchers.ArgumentsMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object is an <see cref="T:NMock2.Monitoring.Invocation"/> and all method arguments match their corresponding matcher.</returns>
        </member>
        <member name="M:NMock2.Matchers.ArgumentsMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="M:NMock2.Matchers.ArgumentsMatcher.MatcherCount">
            <summary>
            Number of argument matchers.
            </summary>
            <returns>Returns the number of argument matchers.</returns>
        </member>
        <member name="M:NMock2.Matchers.ArgumentsMatcher.LastMatcher">
            <summary>
            Returns the last argument matcher.
            </summary>
            <returns>Argument matcher</returns>
        </member>
        <member name="M:NMock2.Matchers.ArgumentsMatcher.WriteListOfMatchers(System.Int32,System.IO.TextWriter)">
            <summary>
            Writes the list of matchers to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="listLength">Length of the list.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:NMock2.Matchers.ArgumentsMatcher.OutMatcher">
            <summary>
            Matcher that matches method out parameters. 
            </summary>
        </member>
        <member name="M:NMock2.Matchers.ArgumentsMatcher.OutMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object mached is an out parameter.</returns>
        </member>
        <member name="M:NMock2.Matchers.ArgumentsMatcher.OutMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.ComparisonMatcher">
            <summary>
            Matcher that checks a value against upper and lower bounds.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.ComparisonMatcher.value">
            <summary>
            Stores the value to be compared.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.ComparisonMatcher.minComparisonResult">
            <summary>
            Stores the minimum comparison result for a successful match.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.ComparisonMatcher.maxComparisonResult">
            <summary>
            Stores the maximum comparison result for a successful match.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.ComparisonMatcher.#ctor(System.IComparable,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.ComparisonMatcher"/> class.
            </summary>
            <param name="value">The value to compare.</param>
            <param name="comparisonResult1">The first allowed comparison result (result of value.CompareTo(other)).</param>
            <param name="comparisonResult2">The second allowed comparison result (result of value.CompareTo(other)).</param>
        </member>
        <member name="M:NMock2.Matchers.ComparisonMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object compared to the value resulted in either of both specified comparison results.</returns>
        </member>
        <member name="M:NMock2.Matchers.ComparisonMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.DescriptionOverride">
            <summary>
            Matcher that is used to change the description the wrapped matcher.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.DescriptionOverride.description">
            <summary>
            Stores the new description for the wrapped matcher.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.DescriptionOverride.otherMatcher">
            <summary>
            Stores the matcher to wrap.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.DescriptionOverride.#ctor(System.String,NMock2.Matcher)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.DescriptionOverride"/> class.
            </summary>
            <param name="description">The new description for the wrapped matcher.</param>
            <param name="otherMatcher">The matcher to wrap.</param>
        </member>
        <member name="M:NMock2.Matchers.DescriptionOverride.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the wrapped matcher matches.</returns>
        </member>
        <member name="M:NMock2.Matchers.DescriptionOverride.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.ElementMatcher">
            <summary>
            Matcher that checks whether a single object is in a collection of elements.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.ElementMatcher.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.ElementMatcher"/> class.
            </summary>
            <param name="collection">The collection to match against.</param>
        </member>
        <member name="M:NMock2.Matchers.ElementMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="actual">The object to match.</param>
            <returns>Whether to object matches.</returns>
        </member>
        <member name="M:NMock2.Matchers.ElementMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.EqualMatcher">
            <summary>
            Matcher that checks whether the expected and actual value are equal.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.EqualMatcher.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.EqualMatcher"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NMock2.Matchers.EqualMatcher.Matches(System.Object)">
            <summary>
            Matcheses the specified actual.
            </summary>
            <param name="actual">The actual value.</param>
            <returns>Whether the expected value is equal to the actual value.</returns>
        </member>
        <member name="M:NMock2.Matchers.EqualMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.FieldMatcher">
            <summary>
            Matcher that checks whether the specified field of the actual object matches with the specified matcher. 
            </summary>
        </member>
        <member name="F:NMock2.Matchers.FieldMatcher.fieldName">
            <summary>
            Name of the field to match against the <seealso cref="F:NMock2.Matchers.FieldMatcher.valueMatcher"/>.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.FieldMatcher.valueMatcher">
            <summary>
            The value <see cref="T:NMock2.Matcher"/> used to match the field of the object under investigation.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.FieldMatcher.#ctor(System.String,NMock2.Matcher)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.FieldMatcher"/> class.
            </summary>
            <param name="fieldName">Name of the field to match against the <paramref name="valueMatcher"/>.</param>
            <param name="valueMatcher">The value matcher.</param>
        </member>
        <member name="M:NMock2.Matchers.FieldMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object matches.</returns>
        </member>
        <member name="M:NMock2.Matchers.FieldMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.GenericMatcher`1">
            <summary>
            Matcher that checks whether a value matches the check provided as a delegate.
            the expectation.
            </summary>
            <typeparam name="T">The type of the expected value.</typeparam>
        </member>
        <member name="F:NMock2.Matchers.GenericMatcher`1.matchExpression">
            <summary>
            The test that is performed to see if the value matches the expectation.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.GenericMatcher`1.#ctor(NMock2.Matchers.GenericMatcher{`0}.MatchExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.GenericMatcher`1"/> class.
            </summary>
            <param name="matchExpression">The test that is performed to check if the value matches expectation.</param>
            <exception cref="T:System.ArgumentNullException"><c>matchExpression</c> is null.</exception>
        </member>
        <member name="M:NMock2.Matchers.GenericMatcher`1.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object matches.</returns>
        </member>
        <member name="M:NMock2.Matchers.GenericMatcher`1.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.GenericMatcher`1.MatchExpression">
            <summary>
            The test that is performed to check if the <paramref name="value"/> matches the expectation.
            </summary>
            <param name="value">The actually received value.</param>
            <returns>True then value matches the expectation.</returns>
        </member>
        <member name="T:NMock2.Matchers.GenericMethodTypeParametersMatcher">
            <summary>
            Matcher that checks whether parameters of a method match with the specified list of matchers.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.GenericMethodTypeParametersMatcher.typeMatchers">
            <summary>
            An ordered list of type <see cref="T:NMock2.Matcher"/>'s each matching a single method argument.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.GenericMethodTypeParametersMatcher.#ctor(NMock2.Matcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.GenericMethodTypeParametersMatcher"/> class.
            </summary>
            <param name="typeMatchers">The value matchers. This is an ordered list of matchers, each matching a single method argument.</param>
        </member>
        <member name="M:NMock2.Matchers.GenericMethodTypeParametersMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object is an <see cref="T:NMock2.Monitoring.Invocation"/> and all method arguments match their corresponding matcher.</returns>
        </member>
        <member name="M:NMock2.Matchers.GenericMethodTypeParametersMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="M:NMock2.Matchers.GenericMethodTypeParametersMatcher.MatcherCount">
            <summary>
            Number of argument matchers.
            </summary>
            <returns>Returns the number of argument matchers.</returns>
        </member>
        <member name="M:NMock2.Matchers.GenericMethodTypeParametersMatcher.LastMatcher">
            <summary>
            Returns the last argument matcher.
            </summary>
            <returns>Argument matcher</returns>
        </member>
        <member name="M:NMock2.Matchers.GenericMethodTypeParametersMatcher.WriteListOfMatchers(System.Int32,System.IO.TextWriter)">
            <summary>
            Writes the list of matchers to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="listLength">Length of the list.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:NMock2.Matchers.GenericMethodTypeParametersMatcher.MatchesTypes(NMock2.Monitoring.Invocation)">
            <summary>
            Determines whether the arguments of the invocation matches the initial arguments.
            </summary>
            <param name="invocation">The invocation to match against the initial arguments.</param>
            <returns>
            Returns true if invocation matches the initial arguments; false otherwise.
            </returns>
        </member>
        <member name="M:NMock2.Matchers.GenericMethodTypeParametersMatcher.MatchesTypeValues(NMock2.Monitoring.Invocation)">
            <summary>
            Determines whether all argument types of the generic method matches the invocation.
            </summary>
            <param name="invocation">The invocation to match against the initial argument types.</param>
            <returns>
            Returns true if invocation types matches the inital argument types; false otherwise.
            </returns>
        </member>
        <member name="T:NMock2.Matchers.IndexGetterArgumentsMatcher">
            <summary>
            Matcher for indexer getters. Checks that the arguments passed to the indexer match.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.IndexGetterArgumentsMatcher.#ctor(NMock2.Matcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.IndexGetterArgumentsMatcher"/> class.
            </summary>
            <param name="valueMatchers">The value matchers. This is an ordered list of matchers, each matching a single method argument.</param>
        </member>
        <member name="M:NMock2.Matchers.IndexGetterArgumentsMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.IndexSetterArgumentsMatcher">
            <summary>
            Matcher for indexer setters. Checks that the arguments passed to the indexer match.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.IndexSetterArgumentsMatcher.#ctor(NMock2.Matcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.IndexSetterArgumentsMatcher"/> class.
            </summary>
            <param name="valueMatchers">The value matchers. This is an ordered list of matchers, each matching a single method argument.</param>
        </member>
        <member name="M:NMock2.Matchers.IndexSetterArgumentsMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.MethodNameMatcher">
            <summary>
            Matcher that checks whether the actual object is a <see cref="T:System.Reflection.MethodInfo"/> and its name is equal to the expected name.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.MethodNameMatcher.methodName">
            <summary>
            Holds the expected name of the mocked method.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.MethodNameMatcher.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.MethodNameMatcher"/> class.
            </summary>
            <param name="methodName">The expected name of the method.</param>
        </member>
        <member name="M:NMock2.Matchers.MethodNameMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The MethodInfo to match.</param>
            <returns>Whether the object is a MethodInfo and its name matches the expected one.</returns>
        </member>
        <member name="M:NMock2.Matchers.MethodNameMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.NotMatcher">
            <summary>
            Matcher that negates another matcher.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.NotMatcher.negated">
            <summary>
            Holds the matcher to negate.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.NotMatcher.#ctor(NMock2.Matcher)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.NotMatcher"/> class.
            </summary>
            <param name="negated">The matcher to negate.</param>
        </member>
        <member name="M:NMock2.Matchers.NotMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object does not matche the wrapped matcher.</returns>
        </member>
        <member name="M:NMock2.Matchers.NotMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.NullMatcher">
            <summary>
            Matcher that checks whether to actual value is equal to null.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.NullMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object is equal to null.</returns>
        </member>
        <member name="M:NMock2.Matchers.NullMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.OrMatcher">
            <summary>
            Matcher that combines two matcher with a logically or.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.OrMatcher.#ctor(NMock2.Matcher,NMock2.Matcher)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.OrMatcher"/> class.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:NMock2.Matchers.OrMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object matches one of the two combined matchers.</returns>
        </member>
        <member name="M:NMock2.Matchers.OrMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.PropertyMatcher">
            <summary>
            Matcher that checks whether the actual object has a property with the specified name 
            and its value matches the specified matcher.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.PropertyMatcher.#ctor(System.String,NMock2.Matcher)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.PropertyMatcher"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="valueMatcher">The value matcher.</param>
        </member>
        <member name="M:NMock2.Matchers.PropertyMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object has a property with the expected name and expected value.</returns>
        </member>
        <member name="M:NMock2.Matchers.PropertyMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.SameMatcher">
            <summary>
            Matcher that checks whether the actual object is the same as the expected one (equality by reference).
            </summary>
        </member>
        <member name="M:NMock2.Matchers.SameMatcher.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.SameMatcher"/> class.
            </summary>
            <param name="expected">The expected object.</param>
        </member>
        <member name="M:NMock2.Matchers.SameMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object is the same as the expected one.</returns>
        </member>
        <member name="M:NMock2.Matchers.SameMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.StringContainsMatcher">
            <summary>
            Matcher that checks whether the actual value contains the expected substring.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.StringContainsMatcher.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.StringContainsMatcher"/> class.
            </summary>
            <param name="substring">The substring that is expected.</param>
        </member>
        <member name="M:NMock2.Matchers.StringContainsMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object is a string and contains the expected substring.</returns>
        </member>
        <member name="M:NMock2.Matchers.StringContainsMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.ToStringMatcher">
            <summary>
            Matcher that checks whether the actual value in string representation (actual.ToString())
            matches with the wrapped matcher.
            </summary>
        </member>
        <member name="F:NMock2.Matchers.ToStringMatcher.matcher">
            <summary>
            Holds the wrapped matcher.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.ToStringMatcher.#ctor(NMock2.Matcher)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.ToStringMatcher"/> class.
            </summary>
            <param name="matcher">The wrapped matcher.</param>
        </member>
        <member name="M:NMock2.Matchers.ToStringMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object in string representation (o.ToString()) matches the wrapped matcher.</returns>
        </member>
        <member name="M:NMock2.Matchers.ToStringMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.Matchers.TypeMatcher">
            <summary>
            Matcher that checks whether the actual object can be assigned to the expected type.
            </summary>
        </member>
        <member name="M:NMock2.Matchers.TypeMatcher.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Matchers.TypeMatcher"/> class.
            </summary>
            <param name="type">The expected type.</param>
        </member>
        <member name="M:NMock2.Matchers.TypeMatcher.Matches(System.Object)">
            <summary>
            Matches the specified object to this matcher and returns whether it matches.
            </summary>
            <param name="o">The object to match.</param>
            <returns>Whether the object castable to the expected type.</returns>
        </member>
        <member name="M:NMock2.Matchers.TypeMatcher.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="T:NMock2.ResolveTypeDelegate">
            <summary>
            Delegate used to override default type returned in stub behavior.
            </summary>
            <param name="mock">The mock that has to return a value.</param>
            <param name="requestedType">Type of the return value.</param>
            <returns>The object to return as return value for the requested type.</returns>
        </member>
        <member name="T:NMock2.Mockery">
            <summary>
            The mockery is used to create dynamic mocks and check that all expectations were met during a unit test.
            </summary>
            <remarks>Name inspired by Ivan Moore.</remarks>
        </member>
        <member name="F:NMock2.Mockery.availableMockObjectFactories">
            <summary>
            In the rare case where the default mock object factory is replaced, we hold on to the
            previous factory (or factories) in case we need to switch back to them.
            </summary>
        </member>
        <member name="F:NMock2.Mockery.currentMockObjectFactory">
            <summary>
            The mock object factory that is being used by this Mockery instance.
            </summary>
        </member>
        <member name="F:NMock2.Mockery.stubMockStyleDictionary">
            <summary>
            Holds all mapping from mocks/types to mock styles.
            </summary>
        </member>
        <member name="F:NMock2.Mockery.defaultMockObjectFactory">
            <summary>
            The mock object factory that will be used when a new Mockery instance is created
            </summary>
        </member>
        <member name="F:NMock2.Mockery.depth">
            <summary>
            Depth of cascaded ordered, unordered expectation blocks.
            </summary>
        </member>
        <member name="F:NMock2.Mockery.expectations">
            <summary>
            All expectations.
            </summary>
        </member>
        <member name="F:NMock2.Mockery.topOrdering">
            <summary>
            Expectations at current cascade level.
            </summary>
        </member>
        <member name="F:NMock2.Mockery.thrownUnexpectedInvocationException">
            <summary>
            If an unexpected invocation exception is thrown then it is stored here to re-throw it in the 
            <see cref="M:NMock2.Mockery.VerifyAllExpectationsHaveBeenMet"/> method - exception cannot be swallowed by tested code.
            </summary>
        </member>
        <member name="F:NMock2.Mockery.resolveTypeDelegate">
            <summary>
            The delegate used to resolve the default type returned as return value in calls to mocks with stub behavior.
            </summary>
        </member>
        <member name="M:NMock2.Mockery.#cctor">
            <summary>
            Initializes static members of the <see cref="T:NMock2.Mockery"/> class.
            </summary>
        </member>
        <member name="M:NMock2.Mockery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Mockery"/> class.
            Clears all expectations.
            </summary>
        </member>
        <member name="M:NMock2.Mockery.ChangeDefaultMockObjectFactory(System.Type)">
            <summary>
            Allows the default <see cref="T:NMock2.Monitoring.IMockObjectFactory"/> to be replaced with a different implementation.
            </summary>
            <param name="factoryType">The System.Type of the <see cref="T:NMock2.Monitoring.IMockObjectFactory"/> implementation to use.
            This is expected to implement <see cref="T:NMock2.Monitoring.IMockObjectFactory"/> and have a default constructor.</param>
        </member>
        <member name="M:NMock2.Mockery.NewMock(System.Type,NMock2.IMockDefinition)">
            <summary>
            Creates a new dynamic mock of the specified type using the supplied definition.
            </summary>
            <param name="mockedType">The type to mock.</param>
            <param name="definition">An <see cref="T:NMock2.IMockDefinition"/> to create the mock from.</param>
            <returns>A dynamic mock for the specified type.</returns>
        </member>
        <member name="M:NMock2.Mockery.NewMock(System.Type,System.Object[])">
            <summary>
            Creates a new dynamic mock of the specified type.
            </summary>
            <param name="mockedType">The type to mock.</param>
            <param name="constructorArgs">The arguments for the constructor of the class to be mocked.
            Only applicable when mocking classes with non-default constructors.</param>
            <returns>A dynamic mock for the specified type.</returns>
        </member>
        <member name="M:NMock2.Mockery.NewMock(System.Type,NMock2.MockStyle,System.Object[])">
            <summary>
            Creates a new dynamic mock of the specified type.
            </summary>
            <param name="mockedType">The type to mock.</param>
            <param name="mockStyle">Specifies how the mock object should behave when first created.</param>
            <param name="constructorArgs">The arguments for the constructor of the class to be mocked.
            Only applicable when mocking classes with non-default constructors.</param>
            <returns>A named dynamic mock for the specified type.</returns>
        </member>
        <member name="M:NMock2.Mockery.NewMock``1(NMock2.IMockDefinition)">
            <summary>
            Creates a new dynamic mock of the specified type using the supplied definition.
            </summary>
            <typeparam name="TMockedType">The type to mock.</typeparam>
            <param name="definition">An <see cref="T:NMock2.IMockDefinition"/> to create the mock from.</param>
            <returns>A dynamic mock for the specified type.</returns>
        </member>
        <member name="M:NMock2.Mockery.NewMock``1(System.Object[])">
            <summary>
            Creates a new dynamic mock of the specified type.
            </summary>
            <typeparam name="TMockedType">The type to mock.</typeparam>
            <param name="constructorArgs">The arguments for the constructor of the class to be mocked.
            Only applicable when mocking classes with non-default constructors.</param>
            <returns>A dynamic mock for the specified type.</returns>
        </member>
        <member name="M:NMock2.Mockery.NewMock``1(NMock2.MockStyle,System.Object[])">
            <summary>
            Creates a new dynamic mock of the specified type.
            </summary>
            <typeparam name="TMockedType">The type to mock.</typeparam>
            <param name="mockStyle">Specifies how the mock object should behave when first created.</param>
            <param name="constructorArgs">The arguments for the constructor of the class to be mocked.
            Only applicable when mocking classes with non-default constructors.</param>
            <returns>A dynamic mock for the specified type.</returns>
        </member>
        <member name="M:NMock2.Mockery.NewNamedMock(System.Type,System.String,System.Object[])">
            <summary>
            Creates a new named dynamic mock of the specified type.
            </summary>
            <param name="mockedType">The type to mock.</param>
            <param name="name">A name for the mock that will be used in error messages.</param>
            <param name="constructorArgs">The arguments for the constructor of the class to be mocked.
            Only applicable when mocking classes with non-default constructors.</param>
            <returns>A named mock.</returns>
        </member>
        <member name="M:NMock2.Mockery.NewNamedMock(System.Type,System.String,NMock2.MockStyle,System.Object[])">
            <summary>
            Creates a new named dynamic mock of the specified type and allows the style
            of the mock to be specified.
            </summary>
            <param name="mockedType">The type to mock.</param>
            <param name="name">A name for the mock that will be used in error messages.</param>
            <param name="mockStyle">Specifies how the mock object should behave when first created.</param>
            <param name="constructorArgs">The arguments for the constructor of the class to be mocked.
            Only applicable when mocking classes with non-default constructors.</param>
            <returns>A named mock.</returns>
        </member>
        <member name="M:NMock2.Mockery.NewNamedMock``1(System.String,System.Object[])">
            <summary>
            Creates a new named dynamic mock of the specified type.
            </summary>
            <typeparam name="TMockedType">The type to mock.</typeparam>
            <param name="name">A name for the mock that will be used in error messages.</param>
            <param name="constructorArgs">The arguments for the constructor of the class to be mocked.
            Only applicable when mocking classes with non-default constructors.</param>
            <returns>A named mock.</returns>
        </member>
        <member name="M:NMock2.Mockery.NewNamedMock``1(System.String,NMock2.MockStyle,System.Object[])">
            <summary>
            Creates a new named dynamic mock of the specified type and allows the style
            of the mock to be specified.
            </summary>
            <typeparam name="TMockedType">The type to mock.</typeparam>
            <param name="name">A name for the mock that will be used in error messages.</param>
            <param name="mockStyle">Specifies how the mock object should behave when first created.</param>
            <param name="constructorArgs">The arguments for the constructor of the class to be mocked.
            Only applicable when mocking classes with non-default constructors.</param>
            <returns>A named mock.</returns>
        </member>
        <member name="M:NMock2.Mockery.VerifyAllExpectationsHaveBeenMet">
            <summary>
            Verifies that all expectations have been met.
            Will be called in <see cref="M:NMock2.Mockery.Dispose"/>, too. 
            </summary>
        </member>
        <member name="M:NMock2.Mockery.Dispose">
            <summary>
            Disposes the mockery be verifying that all expectations were met.
            </summary>
        </member>
        <member name="M:NMock2.Mockery.SetResolveTypeHandler(NMock2.ResolveTypeDelegate)">
            <summary>
            Sets the resolve type handler used to override default values returned by stubs.
            </summary>
            <param name="resolveTypeHandler">The resolve type handler.</param>
        </member>
        <member name="M:NMock2.Mockery.SetStubMockStyle(System.Object,NMock2.MockStyle)">
            <summary>
            Sets the mock style used for all properties and methods returning a value of any type of the <paramref name="mock"/>.
            Can be overridden with a type specific mock style with <see cref="M:NMock2.Mockery.SetStubMockStyle``1(System.Object,NMock2.MockStyle)"/>.
            </summary>
            <param name="mock">The mock (with mock style Stub).</param>
            <param name="nestedMockStyle">The nested mock style.</param>
        </member>
        <member name="M:NMock2.Mockery.SetStubMockStyle``1(System.Object,NMock2.MockStyle)">
            <summary>
            Sets the mock style used for all properties and methods returning a value of type <typeparamref name="TStub"/>
            of the <paramref name="mock"/>.
            </summary>
            <typeparam name="TStub">The type of the stub.</typeparam>
            <param name="mock">The mock (with mock style Stub).</param>
            <param name="nestedMockStyle">The nested mock style.</param>
        </member>
        <member name="M:NMock2.Mockery.SetStubMockStyle(System.Object,System.Type,NMock2.MockStyle)">
            <summary>
            Sets the mock style used for all properties and methods returning a value of type <paramref name="nestedMockType"/>
            of the <paramref name="mock"/>.
            </summary>
            <param name="mock">The mock (with mock style Stub).</param>
            <param name="nestedMockType">Type of the nested mock.</param>
            <param name="nestedMockStyle">The nested mock style.</param>
        </member>
        <member name="M:NMock2.Mockery.ClearExpectation(System.Object)">
            <summary>
            Clears all expectation on the specified mock.
            </summary>
            <param name="mock">The mock for which all expectations are cleared.</param>
        </member>
        <member name="M:NMock2.Mockery.AddExpectation(NMock2.IExpectation)">
            <summary>
            Adds the expectation.
            </summary>
            <param name="expectation">The expectation.</param>
        </member>
        <member name="M:NMock2.Mockery.ResolveType(System.Object,System.Type)">
            <summary>
            Resolves the return value to be used in a call to a mock with stub behavior.
            </summary>
            <param name="mock">The mock on which the call is made.</param>
            <param name="requestedType">The type of the return value.</param>
            <returns>The object to be returned as return value; or <see cref="F:System.Reflection.Missing.Value"/>
            if the default value should be used.</returns>
        </member>
        <member name="M:NMock2.Mockery.GetDependencyMockStyle(System.Object,System.Type)">
            <summary>
            Gets the mock style to be used for a mock created for a return value of a call to mock with stub behavior.
            </summary>
            <param name="mock">The mock that wants to create a mock.</param>
            <param name="requestedType">The type of the requested mock.</param>
            <returns>The mock style to use on the created mock. Null if <see cref="F:NMock2.MockStyle.Default"/> has to be used.</returns>
        </member>
        <member name="M:NMock2.Mockery.Dispatch(NMock2.Monitoring.Invocation)">
            <summary>
            Dispatches the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.Mockery.HasExpectationFor(NMock2.Monitoring.Invocation)">
            <summary>
            Determines whether there exist expectations for the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
            <returns><c>true</c> if there exist expectations for the specified invocation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NMock2.Mockery.CastToMockObject(System.Object)">
            <summary>
            Casts the argument to <see cref="T:NMock2.Internal.IMockObject"/>.
            </summary>
            <param name="mock">The object to cast.</param>
            <returns>The argument casted to <see cref="T:NMock2.Internal.IMockObject"/></returns>
            <throws cref="T:System.ArgumentNullException">Thrown if <paramref name="mock"/> is null</throws>
            <throws cref="T:System.ArgumentException">Thrown if <paramref name="mock"/> is not a <see cref="T:NMock2.Internal.IMockObject"/></throws>
        </member>
        <member name="M:NMock2.Mockery.ClearExpectations">
            <summary>
            Clears the expectations.
            </summary>
        </member>
        <member name="M:NMock2.Mockery.Push(NMock2.Internal.IExpectationOrdering)">
            <summary>
            Pushes the specified new ordering on the expectations stack.
            </summary>
            <param name="newOrdering">The new ordering.</param>
            <returns>Disposable popper.</returns>
        </member>
        <member name="M:NMock2.Mockery.Pop(NMock2.Internal.IExpectationOrdering)">
            <summary>
            Pops the specified old ordering from the expectations stack.
            </summary>
            <param name="oldOrdering">The old ordering.</param>
        </member>
        <member name="M:NMock2.Mockery.FailUnmetExpectations">
            <summary>
            Throws an exception listing all unmet expectations.
            </summary>
        </member>
        <member name="M:NMock2.Mockery.FailUnexpectedInvocation(NMock2.Monitoring.Invocation)">
            <summary>
            Throws an exception indicating that the specified invocation is not expected.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="P:NMock2.Mockery.Ordered">
            <summary>
            Gets a disposable object and tells the mockery that the following expectations are ordered, i.e. they have to be met in the specified order.
            Dispose the returned value to return to previous mode.
            </summary>
            <value>Disposable object. When this object is disposed then the ordered expectation mode is set back to the mode it was previously
            to call to <see cref="P:NMock2.Mockery.Ordered"/>.</value>
        </member>
        <member name="P:NMock2.Mockery.Unordered">
            <summary>
            Gets a disposable object and tells the mockery that the following expectations are unordered, i.e. they can be met in any order.
            Dispose the returned value to return to previous mode.
            </summary>
            <value>Disposable object. When this object is disposed then the unordered expectation mode is set back to the mode it was previously
            to the call to <see cref="P:NMock2.Mockery.Unordered"/>.</value>
        </member>
        <member name="T:NMock2.Mockery.Popper">
            <summary>
            A popper pops an expectation ordering from the expectations stack on disposal.
            </summary>
        </member>
        <member name="F:NMock2.Mockery.Popper.mockery">
            <summary>
            The mockery.
            </summary>
        </member>
        <member name="F:NMock2.Mockery.Popper.previous">
            <summary>
            The previous expectation ordering.
            </summary>
        </member>
        <member name="M:NMock2.Mockery.Popper.#ctor(NMock2.Mockery,NMock2.Internal.IExpectationOrdering)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Mockery.Popper"/> class.
            </summary>
            <param name="mockery">The mockery.</param>
            <param name="previous">The previous.</param>
        </member>
        <member name="M:NMock2.Mockery.Popper.Dispose">
            <summary>
            Pops the expectation ordering from the stack.
            </summary>
        </member>
        <member name="T:NMock2.MockStyle">
            <summary>
            Specifies how a mock object should behave when it is first created.
            </summary>
        </member>
        <member name="F:NMock2.MockStyle.Default">
            <summary>
            Calls to members that do not have expectations set will
            result in ExpectationExceptions.
            </summary>
        </member>
        <member name="F:NMock2.MockStyle.Transparent">
            <summary>
            Calls to members that do not have expectations set will
            pass through to the underlying implementation on the class
            being mocked.
            </summary>
        </member>
        <member name="F:NMock2.MockStyle.Stub">
            <summary>
            Calls to members that do not have expectations set will
            be ignored. Default values are used for return values 
            (default value of the return type, stub or empty enumerable)
            and the same value is returned on every call to the same member.
            </summary>
        </member>
        <member name="T:NMock2.Monitoring.CastleMockObjectFactory">
            <summary>
            Class that creates mocks for interfaces and classes (virtual members only) using the
            Castle proxy generator.
            </summary>
        </member>
        <member name="T:NMock2.Monitoring.IMockObjectFactory">
            <summary>
            Implementations of this interface are responsible for generating runtime
            proxies of classes and interfaces for use as mock objects.
            </summary>
            <remarks>
            Returned instances are expected to implement IMockObject and take care of
            intercepting calls to their public members. Intercepted calls should be
            forwarded on to the supplied Mockery for processing against expectations.
            </remarks>
        </member>
        <member name="M:NMock2.Monitoring.IMockObjectFactory.CreateMock(NMock2.Mockery,NMock2.Internal.CompositeType,System.String,NMock2.MockStyle,System.Object[])">
            <summary>
            Creates a mock of the specified type(s).
            </summary>
            <param name="mockery">The mockery used to create this mock instance.</param>
            <param name="typesToMock">The type(s) to include in the mock.</param>
            <param name="name">The name to use for the mock instance.</param>
            <param name="mockStyle">The behaviour of the mock instance when first created.</param>
            <param name="constructorArgs">Constructor arguments for the class to be mocked. Only valid if mocking a class type.</param>
            <returns>A mock instance of the specified type(s).</returns>
        </member>
        <member name="M:NMock2.Monitoring.CastleMockObjectFactory.CreateMock(NMock2.Mockery,NMock2.Internal.CompositeType,System.String,NMock2.MockStyle,System.Object[])">
            <summary>
            Creates a mock of the specified type(s).
            </summary>
            <param name="mockery">The mockery used to create this mock instance.</param>
            <param name="typesToMock">The type(s) to include in the mock.</param>
            <param name="name">The name to use for the mock instance.</param>
            <param name="mockStyle">The behaviour of the mock instance when first created.</param>
            <param name="constructorArgs">Constructor arguments for the class to be mocked. Only valid if mocking a class type.</param>
            <returns>A mock instance of the specified type(s).</returns>
        </member>
        <member name="T:NMock2.Monitoring.CastleMockObjectFactory.InterfaceMockBase">
            <summary>
            Used as a base for interface mocks in order to provide a holder
            for a meaningful ToString() value.
            </summary>
        </member>
        <member name="M:NMock2.Monitoring.CastleMockObjectFactory.InterfaceMockBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Monitoring.CastleMockObjectFactory.InterfaceMockBase"/> class.
            </summary>
            <param name="stringValue">The string value.</param>
        </member>
        <member name="T:NMock2.Monitoring.InterfaceOnlyMockObjectFactory">
            <summary>
            Class that creates mocks for interfaces only. This was the original implementation
            of NMock2 mocks used before the Castle proxies were introduced.
            </summary>
        </member>
        <member name="M:NMock2.Monitoring.InterfaceOnlyMockObjectFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Monitoring.InterfaceOnlyMockObjectFactory"/> class.
            </summary>
        </member>
        <member name="M:NMock2.Monitoring.InterfaceOnlyMockObjectFactory.GetGenericParameterNames(System.Type[])">
            <summary>
            Returns an array of <see langword="string"/>s that represent
            the names of the generic type parameter.
            </summary>
            <param name="args">The parameter info array.</param>
            <returns>An array containing parameter names.</returns>
        </member>
        <member name="M:NMock2.Monitoring.InterfaceOnlyMockObjectFactory.GetParameterTypes(System.Reflection.ParameterInfo[])">
            <summary>
            Returns an array of parameter <see cref="T:System.Type"/>s for the
            specified parameter info array.
            </summary>
            <param name="args">The parameter info array.</param>
            <returns>
            An array containing parameter <see cref="T:System.Type"/>s.
            </returns>
        </member>
        <member name="M:NMock2.Monitoring.InterfaceOnlyMockObjectFactory.CreateMock(NMock2.Mockery,NMock2.Internal.CompositeType,System.String,NMock2.MockStyle,System.Object[])">
            <summary>
            Creates a mock of the specified type(s).
            </summary>
            <param name="mockery">The mockery used to create this mock instance.</param>
            <param name="typesToMock">The type(s) to include in the mock.</param>
            <param name="name">The name to use for the mock instance.</param>
            <param name="mockStyle">The behaviour of the mock instance when first created.</param>
            <param name="constructorArgs">Constructor arguments for the class to be mocked. Only valid if mocking a class type.</param>
            <returns>
            A mock instance of the specified type(s).
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NMock2.Monitoring.InterfaceOnlyMockObjectFactory.DefineMethod(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo,System.Boolean)" -->
        <member name="M:NMock2.Monitoring.InterfaceOnlyMockObjectFactory.DefineParameters(System.Reflection.Emit.MethodBuilder,System.Reflection.MethodInfo)">
            <summary>
            Defines method parameters based on proxied method metadata.
            </summary>
            <param name="methodBuilder">The <see cref="T:System.Reflection.Emit.MethodBuilder"/> to use.</param>
            <param name="method">The method to proxy.</param>
        </member>
        <member name="M:NMock2.Monitoring.InterfaceOnlyMockObjectFactory.TypeId.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Monitoring.InterfaceOnlyMockObjectFactory.TypeId"/> class.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="T:NMock2.Monitoring.Invocation">
            <summary>
            Represents the invocation of a method on an object (receiver).
            </summary>
        </member>
        <member name="F:NMock2.Monitoring.Invocation.Receiver">
            <summary>
            Holds the receiver providing the method.
            </summary>
        </member>
        <member name="F:NMock2.Monitoring.Invocation.Method">
            <summary>
            Holds the method that is being invoked.
            </summary>
        </member>
        <member name="F:NMock2.Monitoring.Invocation.Parameters">
            <summary>
            Holds the parameterlist of the invocation.
            </summary>
        </member>
        <member name="F:NMock2.Monitoring.Invocation.result">
            <summary>
            Holds the result of the invocation.
            </summary>
        </member>
        <member name="F:NMock2.Monitoring.Invocation.exception">
            <summary>
            Holds the exception to be thrown. When this field has been set, <see cref="F:NMock2.Monitoring.Invocation.isThrowing"/> will become true.
            </summary>
        </member>
        <member name="F:NMock2.Monitoring.Invocation.isThrowing">
            <summary>
            Holds a boolean value whether the method is throwing an exception or not.
            </summary>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.#ctor(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Monitoring.Invocation"/> class.
            </summary>
            <param name="receiver">The receiver providing the method.</param>
            <param name="method">The method.</param>
            <param name="parameters">The parameters passed to the method..</param>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.InvokeOn(System.Object)">
            <summary>
            Invokes this invocation on the specified receiver and stores the result and exception
            returns/thrown by the invocation.
            </summary>
            <param name="otherReceiver">The other receiver.</param>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.DescribeTo(System.IO.TextWriter)">
            <summary>
            Describes this object to the specified <paramref name="writer"/>.
            </summary>
            <param name="writer">The text writer the description is added to.</param>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.CheckReturnType(System.Object)">
            <summary>
            Checks the returnType of the initialized method if it is valid to be mocked.
            </summary>
            <param name="value">The return value to be checked.</param>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.MethodIsProperty">
            <summary>
            Determines whether the initialized method is a property.
            </summary>
            <returns>
            Returns true if initialized method is a property; false otherwise.
            </returns>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.MethodIsIndexerGetter">
            <summary>
            Determines whether the initialized method is an index getter.
            </summary>
            <returns>
            Returns true if initialized method is an index getter; false otherwise.
            </returns>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.MethodIsIndexerSetter">
            <summary>
            Determines whether the initialized method is an index setter.
            </summary>
            <returns>
            Returns true if initialized method is an index setter; false otherwise.
            </returns>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.MethodIsEventAdder">
            <summary>
            Determines whether the initialized method is an event adder.
            </summary>
            <returns>
            Returns true if initialized method is an event adder; false otherwise.
            </returns>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.MethodIsEventRemover">
            <summary>
            Determines whether the initialized method is an event remover.
            </summary>
            <returns>
            Returns true if initialized method is an event remover; false otherwise.
            </returns>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.DescribeAsProperty(System.IO.TextWriter)">
            <summary>
            Describes the property with parameters to the specified <paramref name="writer"/>.
            </summary>
            <param name="writer">The writer where the description is written to.</param>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.DescribeAsIndexerGetter(System.IO.TextWriter)">
            <summary>
            Describes the index setter with parameters to the specified <paramref name="writer"/>.
            </summary>
            <param name="writer">The writer where the description is written to.</param>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.DescribeAsIndexerSetter(System.IO.TextWriter)">
            <summary>
            Describes the index setter with parameters to the specified <paramref name="writer"/>.
            </summary>
            <param name="writer">The writer where the description is written to.</param>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.DescribeNormalMethod(System.IO.TextWriter)">
            <summary>
            Describes the method with parameters to the specified <paramref name="writer"/>.
            </summary>
            <param name="writer">The writer where the description is written to.</param>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.WriteTypeParams(System.IO.TextWriter)">
            <summary>
            Writes the generic parameters of the method to the specified <paramref name="writer"/>.
            </summary>
            <param name="writer">The writer where the description is written to.</param>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.WriteParameterList(System.IO.TextWriter,System.Int32)">
            <summary>
            Writes the parameter list to the specified <paramref name="writer"/>.
            </summary>
            <param name="writer">The writer where the description is written to.</param>
            <param name="count">The count of parameters to describe.</param>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.DescribeAsEventAdder(System.IO.TextWriter)">
            <summary>
            Describes the event adder to the specified <paramref name="writer"/>.
            </summary>
            <param name="writer">The writer where the description is written to.</param>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.DescribeAsEventRemover(System.IO.TextWriter)">
            <summary>
            Describes the event remover to the specified <paramref name="writer"/>.
            </summary>
            <param name="writer">The writer where the description is written to.</param>
        </member>
        <member name="M:NMock2.Monitoring.Invocation.DescribeType(System.Object)">
            <summary>
            Describes the interfaces used for <see cref="M:NMock2.Monitoring.Invocation.DescribeTo(System.IO.TextWriter)"/>.
            </summary>
            <param name="obj">The object which interfaces to describe.</param>
            <returns>
            Returns a string containing the description of the given object's interfaces.
            </returns>
        </member>
        <member name="P:NMock2.Monitoring.Invocation.Result">
            <summary>
            Gets or sets the result of the invocation.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:NMock2.Monitoring.Invocation.Exception">
            <summary>
            Gets or sets the exception that is thrown on the invocation.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:NMock2.Monitoring.Invocation.IsThrowing">
            <summary>
            Gets a value indicating whether an exception is thrown an this invocation.
            </summary>
            <value>
                <c>true</c> if this invocation is throwing an exception; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NMock2.Monitoring.Invoker">
            <summary>
            An invoker invokes an <see cref="T:NMock2.Monitoring.Invocation"/> on a target if
            it is responsible for the target type, otherwise the invocation is passed
            to the next invoker in the 'next' chain.
            </summary>
        </member>
        <member name="F:NMock2.Monitoring.Invoker.targetType">
            <summary>
            Holds the type of the target. Can not be inferred from target because it could be a base type.
            </summary>
        </member>
        <member name="F:NMock2.Monitoring.Invoker.target">
            <summary>
            Holds the target.
            </summary>
        </member>
        <member name="F:NMock2.Monitoring.Invoker.next">
            <summary>
            Holds the next <see cref="T:NMock2.Monitoring.IInvokable"/> to pass the invocation to, 
            if this instance is not responsible for the target type on an invocation.
            </summary>
        </member>
        <member name="M:NMock2.Monitoring.Invoker.#ctor(System.Type,System.Object,NMock2.Monitoring.IInvokable)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Monitoring.Invoker"/> class.
            </summary>
            <param name="targetType">Type of the target. Can not be inferred from <paramref name="target"/> 
            because it could be a base type.</param>
            <param name="target">The target.</param>
            <param name="next">The next <see cref="T:NMock2.Monitoring.IInvokable"/> to pass the invocation to, 
            if this instance is not responsible for the target type on an invocation.</param>
        </member>
        <member name="M:NMock2.Monitoring.Invoker.Invoke(NMock2.Monitoring.Invocation)">
            <summary>
            Executes the <paramref name="invocation"/> on the target of this instance
            if the targetType of this instance matches the invocation, otherwise the invocation
            is passed to the next <see cref="T:NMock2.Monitoring.IInvokable"/> specified in the constructor.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:NMock2.Monitoring.MockObjectFactory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Monitoring.MockObjectFactory"/> class.
            </summary>
            <param name="name">The name of the assembly to generate.</param>
        </member>
        <member name="M:NMock2.Monitoring.MockObjectFactory.GetGenericParameterNames(System.Type[])">
            <summary>
            Returns an array of <see langword="string"/>s that represent
            the names of the generic type parameter.
            </summary>
            <param name="args">The parameter info array.</param>
            <returns>An array containing parameter names.</returns>
        </member>
        <member name="M:NMock2.Monitoring.MockObjectFactory.GetParameterTypes(System.Reflection.ParameterInfo[])">
            <summary>
            Returns an array of parameter <see cref="T:System.Type"/>s for the
            specified parameter info array.
            </summary>
            <param name="args">The parameter info array.</param>
            <returns>
            An array containing parameter <see cref="T:System.Type"/>s.
            </returns>
        </member>
        <member name="M:NMock2.Monitoring.MockObjectFactory.DefineMethod(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Defines proxy method for the target object.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="method">The method to proxy.</param>
            <param name="explicitImplementation"><see langword="true"/> if the supplied <paramref name="intfMethod"/> is to be
            implemented explicitly; otherwise <see langword="false"/>.</param>
            <returns>
            The <see cref="T:System.Reflection.Emit.MethodBuilder"/> for the proxy method.
            </returns>
            <remarks>
            Original code from Spring.Net http://springnet.cvs.sourceforge.net/springnet/Spring.Net/src/Spring/Spring.Core/Proxy/AbstractProxyMethodBuilder.cs
            </remarks>
        </member>
        <member name="M:NMock2.Monitoring.MockObjectFactory.DefineParameters(System.Reflection.Emit.MethodBuilder,System.Reflection.MethodInfo)">
            <summary>
            Defines method parameters based on proxied method metadata.
            </summary>
            <param name="methodBuilder">The <see cref="T:System.Reflection.Emit.MethodBuilder"/> to use.</param>
            <param name="method">The method to proxy.</param>
        </member>
        <member name="M:NMock2.Monitoring.MockObjectFactory.TypeId.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Monitoring.MockObjectFactory.TypeId"/> class.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="T:Castle.DynamicProxy.IInterceptor">
            <summary>
              New interface that is going to be used by DynamicProxy 2
            </summary>
        </member>
        <member name="M:NMock2.Monitoring.MockObjectInterceptor.#cctor">
            <summary>
            Initializes static members of the <see cref="T:NMock2.Monitoring.MockObjectInterceptor"/> class.
            </summary>
        </member>
        <member name="M:NMock2.Monitoring.MockObjectInterceptor.#ctor(NMock2.Mockery,NMock2.Internal.CompositeType,System.String,NMock2.MockStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Monitoring.MockObjectInterceptor"/> class.
            </summary>
            <param name="mockery">The mockery.</param>
            <param name="mockedType">Type of the mocked.</param>
            <param name="name">The name.</param>
            <param name="mockStyle">The mock style.</param>
        </member>
        <member name="M:NMock2.Monitoring.MultiInterfaceFactory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Monitoring.MultiInterfaceFactory"/> class.
            </summary>
            <param name="name">The name of the assembly to generate.</param>
        </member>
        <member name="M:NMock2.Monitoring.MultiInterfaceFactory.TypeId.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Monitoring.MultiInterfaceFactory.TypeId"/> class.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="T:NMock2.Monitoring.ParameterList">
            <summary>
            Manages a list of parameters for a mocked method together with the parameter's values.
            </summary>
        </member>
        <member name="F:NMock2.Monitoring.ParameterList.method">
            <summary>
            Holds the method to be mocked.
            </summary>
        </member>
        <member name="F:NMock2.Monitoring.ParameterList.values">
            <summary>
            An array holding the values of the parameters.
            </summary>
        </member>
        <member name="F:NMock2.Monitoring.ParameterList.isValueSet">
            <summary>
            Holds a boolean for each value if it was set or not.
            </summary>
        </member>
        <member name="M:NMock2.Monitoring.ParameterList.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Monitoring.ParameterList"/> class.
            </summary>
            <param name="method">The method to be mocked.</param>
            <param name="values">The values of the parameters.</param>
        </member>
        <member name="M:NMock2.Monitoring.ParameterList.IsValueSet(System.Int32)">
            <summary>
            Determines whether the value specified by index was set.
            </summary>
            <param name="index">The index.</param>
            <returns>
            Returns <c>true</c> if value specified by index was set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NMock2.Monitoring.ParameterList.MarkAllValuesAsSet">
            <summary>
            Marks all values as set.
            </summary>
        </member>
        <member name="M:NMock2.Monitoring.ParameterList.CanValueBeSet(System.Int32)">
            <summary>
            Determines whether the parameter specified by index can be set.
            </summary>
            <param name="index">The index of the parameter.</param>
            <returns>
            Returns <c>true</c> if the parameter specified by index can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NMock2.Monitoring.ParameterList.GetParameterName(System.Int32)">
            <summary>
            Gets the parameter name by index.
            </summary>
            <param name="index">The index of the parameter name to get.</param>
            <returns>
            Returns the parameter name with the given index.
            </returns>
        </member>
        <member name="P:NMock2.Monitoring.ParameterList.Count">
            <summary>
            Gets the number of values.
            </summary>
            <value>The number of values.</value>
        </member>
        <member name="P:NMock2.Monitoring.ParameterList.AsArray">
            <summary>
            Gets the values as array.
            </summary>
            <value>Values as array.</value>
        </member>
        <member name="P:NMock2.Monitoring.ParameterList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified index.
            </summary>
            <param name="index">The index of the value to be get or set.</param>
            <value>
            The value of a parameter specified by its <paramref name="index"/>.
            </value>
        </member>
        <member name="M:NMock2.Monitoring.ProxiedObjectIdentity.#ctor(System.Object,NMock2.Monitoring.IInvokable)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Monitoring.ProxiedObjectIdentity"/> class.
            </summary>
            <param name="identityProvider">The identity provider.</param>
            <param name="next">The next object to be invoked.</param>
        </member>
        <member name="M:NMock2.Monitoring.ProxyInvokableAdapter.#ctor(System.Type,NMock2.Monitoring.IInvokable)">
            <summary>
            Initializes a new instance of the <see cref="T:NMock2.Monitoring.ProxyInvokableAdapter"/> class.
            </summary>
            <param name="proxyType">Type of the proxy.</param>
            <param name="invokable">The invokable.</param>
        </member>
        <member name="T:NMock2.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NMock2.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NMock2.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:NMock2.Return">
            <summary>
            Defines the return value of a mocked method call.
            </summary>
        </member>
        <member name="M:NMock2.Return.Value(System.Object)">
            <summary>
            Returns a value as method return value.
            </summary>
            <param name="result">The result value.</param>
            <returns>Action defining the return value of a method.</returns>
        </member>
        <member name="M:NMock2.Return.CloneOf(System.ICloneable)">
            <summary>
            Returns a clone as method return value.
            </summary>
            <param name="prototype">The prototype to clone.</param>
            <returns>Action defining the return value of a method.</returns>
        </member>
        <member name="M:NMock2.Return.OutValue(System.String,System.Object)">
            <summary>
            Defines the value returned by an out parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value to return.</param>
            <returns>Action defining the value of an out parameter.</returns>
        </member>
        <member name="M:NMock2.Return.OutValue(System.Int32,System.Object)">
            <summary>
            Defines the value returned by an out parameter.
            </summary>
            <param name="parameterIndex">Index of the parameter.</param>
            <param name="value">The value to return.</param>
            <returns>Action defining the value of an out parameter.</returns>
        </member>
        <member name="T:NMock2.Signal">
            <summary>
            Defines that an <see cref="M:NMock2.Signal.EventWaitHandle(System.Threading.EventWaitHandle)"/> should be signaled.
            </summary>
        </member>
        <member name="M:NMock2.Signal.EventWaitHandle(System.Threading.EventWaitHandle)">
            <summary>
            Signals an <see cref="M:NMock2.Signal.EventWaitHandle(System.Threading.EventWaitHandle)"/> to synchronizes threads.
            </summary>
            <param name="signal">The signal to set.</param>
            <returns>Action that signals an <see cref="M:NMock2.Signal.EventWaitHandle(System.Threading.EventWaitHandle)"/>.</returns>
        </member>
        <member name="T:NMock2.Stub">
            <summary>
            Defines stubs for interfaces. Stubs are used when it does not matter how many times (even 0) something is called.
            A stub is the same as an "at least once" expecation.
            Normally you use stubs on mocks that just provide information to your object under test.
            </summary>
        </member>
        <member name="M:NMock2.Stub.On(System.Object)">
            <summary>
            Defines the mock that is stubbed.
            </summary>
            <param name="mock">The mock to stub.</param>
            <returns>Method syntax defining the method, property or event to stub.</returns>
        </member>
        <member name="T:NMock2.Throw">
            <summary>
            Defines action for throwing actions.
            </summary>
        </member>
        <member name="M:NMock2.Throw.Exception(System.Exception)">
            <summary>
            Throws an exeception when the action is invoked.
            </summary>
            <param name="exception">The exception to throw when invoked.</param>
            <returns>Returns a new instance of the <see cref="T:NMock2.Actions.ThrowAction"/> class.</returns>
        </member>
        <member name="T:NMock2.Verify">
            <summary>
            Verify that a condition is met.
            </summary>
        </member>
        <member name="M:NMock2.Verify.That(System.Object,NMock2.Matcher,System.String,System.Object[])">
            <summary>
            Verifies that the <paramref name="actualValue"/> is matched by the <paramref name="matcher"/>.
            </summary>
            <param name="actualValue">The actual value to match.</param>
            <param name="matcher">The matcher.</param>
            <param name="message">The error message.</param>
            <param name="formatArgs">The format args for the error message.</param>
            <exception cref="T:NMock2.Internal.ExpectationException">Thrown if value does not match.</exception>
        </member>
        <member name="M:NMock2.Verify.That(System.Object,NMock2.Matcher)">
            <summary>
            Verifies that the <paramref name="actualValue"/> is matched by the <paramref name="matcher"/>.
            </summary>
            <param name="actualValue">The actual value.</param>
            <param name="matcher">The matcher.</param>
            <exception cref="T:NMock2.Internal.ExpectationException">Thrown if value does not match.</exception>
        </member>
        <member name="M:NMock2.Verify.WriteDescriptionOfFailedMatch(System.IO.TextWriter,System.Object,NMock2.Matcher)">
            <summary>
            Writes the description of a failed match to the specified <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> where the description is written to.</param>
            <param name="actualValue">The actual value to be written.</param>
            <param name="matcher">The matcher which is used for the expected value to be written.</param>
        </member>
        <member name="T:NUnit.Framework.CategoryAttribute">
            <summary>
            Attribute used to apply a category to a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.CategoryAttribute.categoryName">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor(System.String)">
            <summary>
            Construct attribute for a given category based on
            a name. The name may not contain the characters ',',
            '+', '-' or '!'. However, this is not checked in the
            constructor since it would cause an error to arise at
            as the test was loaded without giving a clear indication
            of where the problem is located. The error is handled
            in NUnitFramework.cs by marking the test as not
            runnable.
            </summary>
            <param name="name">The name of the category</param>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor">
            <summary>
            Protected constructor uses the Type name as the name
            of the category.
            </summary>
        </member>
        <member name="P:NUnit.Framework.CategoryAttribute.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointAttribute">
            <summary>
            Used to mark a field for use as a datapoint when executing a theory
            within the same fixture that requires an argument of the field's Type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointsAttribute">
            <summary>
            Used to mark an array as containing a set of datapoints to be used
            executing a theory within the same fixture that requires an argument 
            of the Type of the array elements.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DescriptionAttribute">
            <summary>
            Attribute used to provide descriptive text about a 
            test case or fixture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Construct the attribute
            </summary>
            <param name="description">Text describing the test</param>
        </member>
        <member name="P:NUnit.Framework.DescriptionAttribute.Description">
            <summary>
            Gets the test description
            </summary>
        </member>
        <member name="T:NUnit.Framework.MessageMatch">
            <summary>
            Enumeration indicating how the expected message parameter is to be used
            </summary>
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Exact">
            Expect an exact match
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Contains">
            Expect a message containing the parameter string
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Regex">
            Match the regular expression provided as a parameter
        </member>
        <member name="F:NUnit.Framework.MessageMatch.StartsWith">
            Expect a message that starts with the parameter string
        </member>
        <member name="T:NUnit.Framework.ExpectedExceptionAttribute">
            <summary>
            ExpectedExceptionAttribute
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor">
            <summary>
            Constructor for a non-specific exception
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.Type)">
            <summary>
            Constructor for a given type of exception
            </summary>
            <param name="exceptionType">The type of the expected exception</param>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.String)">
            <summary>
            Constructor for a given exception name
            </summary>
            <param name="exceptionName">The full name of the expected exception</param>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedException">
            <summary>
            Gets or sets the expected exception type
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedExceptionName">
            <summary>
            Gets or sets the full Type name of the expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedMessage">
            <summary>
            Gets or sets the expected message text
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.UserMessage">
            <summary>
            Gets or sets the user message displayed in case of failure
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.MatchType">
            <summary>
             Gets or sets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.Handler">
            <summary>
             Gets the name of a method to be used as an exception handler
            </summary>
        </member>
        <member name="T:NUnit.Framework.ExplicitAttribute">
            <summary>
            ExplicitAttribute marks a test or test fixture so that it will
            only be run if explicitly executed from the gui or command line
            or if it is included by use of a filter. The test will not be
            run simply because an enclosing suite is run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor(System.String)">
            <summary>
            Constructor with a reason
            </summary>
            <param name="reason">The reason test is marked explicit</param>
        </member>
        <member name="P:NUnit.Framework.ExplicitAttribute.Reason">
            <summary>
            The reason test is marked explicit
            </summary>
        </member>
        <member name="T:NUnit.Framework.IgnoreAttribute">
            <summary>
            Attribute used to mark a test that is to be ignored.
            Ignored tests result in a warning message when the
            tests are run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor">
            <summary>
            Constructs the attribute without giving a reason 
            for ignoring the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor(System.String)">
            <summary>
            Constructs the attribute giving a reason for ignoring the test
            </summary>
            <param name="reason">The reason for ignoring the test</param>
        </member>
        <member name="P:NUnit.Framework.IgnoreAttribute.Reason">
            <summary>
            The reason for ignoring a test
            </summary>
        </member>
        <member name="T:NUnit.Framework.IncludeExcludeAttribute">
            <summary>
            Abstract base for Attributes that are used to include tests
            in the test run based on environmental settings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor">
            <summary>
            Constructor with no included items specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more included items
            </summary>
            <param name="include">Comma-delimited list of included items</param>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Include">
            <summary>
            Name of the item that is needed in order for
            a test to run. Multiple itemss may be given,
            separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Exclude">
            <summary>
            Name of the item to be excluded. Multiple items
            may be given, separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Reason">
            <summary>
            The reason for including or excluding the test
            </summary>
        </member>
        <member name="T:NUnit.Framework.PlatformAttribute">
            <summary>
            PlatformAttribute is used to mark a test fixture or an
            individual method as applying to a particular platform only.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor">
            <summary>
            Constructor with no platforms specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more platforms
            </summary>
            <param name="platforms">Comma-deliminted list of platforms</param>
        </member>
        <member name="T:NUnit.Framework.CultureAttribute">
            <summary>
            CultureAttribute is used to mark a test fixture or an
            individual method as applying to a particular Culture only.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor">
            <summary>
            Constructor with no cultures specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more cultures
            </summary>
            <param name="cultures">Comma-deliminted list of cultures</param>
        </member>
        <member name="T:NUnit.Framework.CombinatorialAttribute">
            <summary>
            Marks a test to use a combinatorial join of any argument data 
            provided. NUnit will create a test case for every combination of 
            the arguments provided. This can result in a large number of test
            cases and so should be used judiciously. This is the default join
            type, so the attribute need not be used except as documentation.
            </summary>
        </member>
        <member name="T:NUnit.Framework.PropertyAttribute">
            <summary>
            PropertyAttribute is used to attach information to a test as a name/value pair..
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Construct a PropertyAttribute with a name and string value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Construct a PropertyAttribute with a name and int value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Double)">
            <summary>
            Construct a PropertyAttribute with a name and double value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor">
            <summary>
            Constructor for derived classes that set the
            property dictionary directly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.Object)">
            <summary>
            Constructor for use by derived classes that use the
            name of the type as the property name. Derived classes
            must ensure that the Type of the property value is
            a standard type supported by the BCL. Any custom
            types will cause a serialization Exception when
            in the client.
            </summary>
        </member>
        <member name="P:NUnit.Framework.PropertyAttribute.Properties">
            <summary>
            Gets the property dictionary for this attribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.CombinatorialAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.PairwiseAttribute">
            <summary>
            Marks a test to use pairwise join of any argument data provided. 
            NUnit will attempt too excercise every pair of argument values at 
            least once, using as small a number of test cases as it can. With
            only two arguments, this is the same as a combinatorial join.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PairwiseAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.SequentialAttribute">
            <summary>
            Marks a test to use a sequential join of any argument data
            provided. NUnit will use arguements for each parameter in
            sequence, generating test cases up to the largest number
            of argument values provided and using null for any arguments
            for which it runs out of values. Normally, this should be
            used with the same number of arguments for each parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SequentialAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.MaxTimeAttribute">
            <summary>
            Summary description for MaxTimeAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.MaxTimeAttribute.#ctor(System.Int32)">
            <summary>
            Construct a MaxTimeAttribute, given a time in milliseconds.
            </summary>
            <param name="milliseconds">The maximum elapsed time in milliseconds</param>
        </member>
        <member name="T:NUnit.Framework.RandomAttribute">
            <summary>
            RandomAttribute is used to supply a set of random values
            to a single parameter of a parameterized test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ValuesAttribute">
            <summary>
            ValuesAttribute is used to provide literal arguments for
            an individual parameter of a test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ParameterDataAttribute">
            <summary>
            Abstract base class for attributes that apply to parameters 
            and supply data for the parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ParameterDataAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Gets the data to be provided to the specified parameter
            </summary>
        </member>
        <member name="F:NUnit.Framework.ValuesAttribute.data">
            <summary>
            The collection of data to be returned. Must
            be set by any derived attribute classes.
            We use an object[] so that the individual
            elements may have their type changed in GetData
            if necessary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object)">
            <summary>
            Construct with one argument
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct with two arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Construct with three arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object[])">
            <summary>
            Construct with an array of arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Get the collection of values to be used as arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int32)">
            <summary>
            Construct a set of doubles from 0.0 to 1.0,
            specifying only the count.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Construct a set of doubles from min to max
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a set of ints from min to max
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.GetData(System.Reflection.ParameterInfo)">
            <summary>
            Get the collection of values to be used as arguments
            </summary>
        </member>
        <member name="T:NUnit.Framework.RangeAttribute">
            <summary>
            RangeAttribute is used to supply a range of values to an
            individual parameter of a parameterized test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a range of ints using default step of 1
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a range of ints specifying the step size 
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Construct a range of longs
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a range of doubles
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct a range of floats
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="T:NUnit.Framework.RepeatAttribute">
            <summary>
            RepeatAttribute may be applied to test case in order
            to run it multiple times.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RepeatAttribute.#ctor(System.Int32)">
            <summary>
            Construct a RepeatAttribute
            </summary>
            <param name="count">The number of times to run the test</param>
        </member>
        <member name="T:NUnit.Framework.RequiredAddinAttribute">
            <summary>
            RequiredAddinAttribute may be used to indicate the names of any addins
            that must be present in order to run some or all of the tests in an
            assembly. If the addin is not loaded, the entire assembly is marked
            as NotRunnable.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiredAddinAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RequiredAddinAttribute"/> class.
            </summary>
            <param name="requiredAddin">The required addin.</param>
        </member>
        <member name="P:NUnit.Framework.RequiredAddinAttribute.RequiredAddin">
            <summary>
            Gets the name of required addin.
            </summary>
            <value>The required addin name.</value>
        </member>
        <member name="T:NUnit.Framework.SetCultureAttribute">
            <summary>
            Summary description for SetCultureAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SetCultureAttribute.#ctor(System.String)">
            <summary>
            Construct given the name of a culture
            </summary>
            <param name="culture"></param>
        </member>
        <member name="T:NUnit.Framework.SetUICultureAttribute">
            <summary>
            Summary description for SetUICultureAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SetUICultureAttribute.#ctor(System.String)">
            <summary>
            Construct given the name of a culture
            </summary>
            <param name="culture"></param>
        </member>
        <member name="T:NUnit.Framework.SetUpAttribute">
            <summary>
            Attribute used to mark a class that contains one-time SetUp 
            and/or TearDown methods that apply to all the tests in a
            namespace or an assembly.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetUpFixtureAttribute">
            <summary>
            SetUpFixtureAttribute is used to identify a SetUpFixture
            </summary>
        </member>
        <member name="T:NUnit.Framework.SuiteAttribute">
            <summary>
            Attribute used to mark a static (shared in VB) property
            that returns a list of tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TearDownAttribute">
            <summary>
            Attribute used to identify a method that is called 
            immediately after each test is run. The method is 
            guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestActionAttribute">
            <summary>
            Provide actions to execute before and after tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ITestAction">
            <summary>
            When implemented by an attribute, this interface implemented to provide actions to execute before and after tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ITestAction.BeforeTest(NUnit.Framework.TestDetails)">
            <summary>
            Executed before each test is run
            </summary>
            <param name="testDetails">Provides details about the test that is going to be run.</param>
        </member>
        <member name="M:NUnit.Framework.ITestAction.AfterTest(NUnit.Framework.TestDetails)">
            <summary>
            Executed after each test is run
            </summary>
            <param name="testDetails">Provides details about the test that has just been run.</param>
        </member>
        <member name="P:NUnit.Framework.ITestAction.Targets">
            <summary>
            Provides the target for the action attribute
            </summary>
            <returns>The target for the action attribute</returns>
        </member>
        <member name="T:NUnit.Framework.TestAttribute">
            <summary>
            Adding this attribute to a method within a <seealso cref="T:NUnit.Framework.TestFixtureAttribute"/> 
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            </summary>
            
            <example>
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              publc void TestDescriptionMethod()
              {}
            }
            </example>
            
        </member>
        <member name="P:NUnit.Framework.TestAttribute.Description">
            <summary>
            Descriptive text for this test
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestCaseAttribute">
            <summary>
            TestCaseAttribute is used to mark parameterized test cases
            and provide them with their arguments.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ITestCaseData">
            <summary>
            The ITestCaseData interface is implemented by a class
            that is able to return complete testcases for use by
            a parameterized test method.
            
            NOTE: This interface is used in both the framework
            and the core, even though that results in two different
            types. However, sharing the source code guarantees that
            the various implementations will be compatible and that
            the core is able to reflect successfully over the
            framework implementations of ITestCaseData.
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Arguments">
            <summary>
            Gets the argument list to be provided to the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Result">
            <summary>
            Gets the expected result
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.HasExpectedResult">
            <summary>
            Indicates whether a result has been specified.
            This is necessary because the result may be
            null, so it's value cannot be checked.
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.ExpectedException">
            <summary>
             Gets the expected exception Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.ExpectedExceptionName">
            <summary>
            Gets the FullName of the expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.TestName">
            <summary>
            Gets the name to be used for the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Description">
            <summary>
            Gets the description of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Ignored">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Framework.ITestCaseData"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.Explicit">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Framework.ITestCaseData"/> is explicit.
            </summary>
            <value><c>true</c> if explicit; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.ITestCaseData.IgnoreReason">
            <summary>
            Gets the ignore reason.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object[])">
            <summary>
            Construct a TestCaseAttribute with a list of arguments.
            This constructor is not CLS-Compliant
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object)">
            <summary>
            Construct a TestCaseAttribute with a single argument
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct a TestCaseAttribute with a two arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Construct a TestCaseAttribute with a three arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Arguments">
            <summary>
            Gets the list of arguments to a test case
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Result">
            <summary>
            Gets or sets the expected result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedResult">
            <summary>
            Gets the expected result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.HasExpectedResult">
            <summary>
            Gets a flag indicating whether an expected
            result has been set.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Categories">
            <summary>
            Gets a list of categories associated with this test;
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Category">
            <summary>
            Gets or sets the category associated with this test.
            May be a single category or a comma-separated list.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedException">
            <summary>
            Gets or sets the expected exception.
            </summary>
            <value>The expected exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedExceptionName">
            <summary>
            Gets or sets the name the expected exception.
            </summary>
            <value>The expected name of the exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedMessage">
            <summary>
            Gets or sets the expected message of the expected exception
            </summary>
            <value>The expected message of the exception.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.MatchType">
            <summary>
             Gets or sets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.TestName">
            <summary>
            Gets or sets the name of the test.
            </summary>
            <value>The name of the test.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Ignore">
            <summary>
            Gets or sets the ignored status of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Ignored">
            <summary>
            Gets or sets the ignored status of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Explicit">
            <summary>
            Gets or sets the explicit status of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Reason">
            <summary>
            Gets or sets the reason for not running the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.IgnoreReason">
            <summary>
            Gets or sets the reason for not running the test.
            Set has the side effect of marking the test as ignored.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="T:NUnit.Framework.TestCaseSourceAttribute">
            <summary>
            FactoryAttribute indicates the source to be used to
            provide test cases for a test method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the factory - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceName">An array of the names of the factories that will provide data</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of the method, property or field that will provide data</param>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or fiend to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.Category">
            <summary>
            Gets or sets the category associated with this test.
            May be a single category or a comma-separated list.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureAttribute">
            <example>
            [TestFixture]
            public class ExampleClass 
            {}
            </example>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.#ctor(System.Object[])">
            <summary>
            Construct with a object[] representing a set of arguments. 
            In .NET 2.0, the arguments may later be separated into
            type arguments and constructor arguments.
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Description">
            <summary>
            Descriptive text for this fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Category">
            <summary>
            Gets and sets the category for this fixture.
            May be a comma-separated list of categories.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Categories">
            <summary>
            Gets a list of categories for this fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Arguments">
            <summary>
            The arguments originally provided to the attribute
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Ignore">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NUnit.Framework.TestFixtureAttribute"/> should be ignored.
            </summary>
            <value><c>true</c> if ignore; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.IgnoreReason">
            <summary>
            Gets or sets the ignore reason. May set Ignored as a side effect.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.TypeArgs">
            <summary>
            Get or set the type arguments. If not set
            explicitly, any leading arguments that are
            Types are taken as type arguments.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureSetUpAttribute">
            <summary>
            Attribute used to identify a method that is 
            called before any tests in a fixture are run.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureTearDownAttribute">
            <summary>
            Attribute used to identify a method that is called after
            all the tests in a fixture have run. The method is 
            guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TheoryAttribute">
            <summary>
            Adding this attribute to a method within a <seealso cref="T:NUnit.Framework.TestFixtureAttribute"/> 
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            </summary>
            
            <example>
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              publc void TestDescriptionMethod()
              {}
            }
            </example>
            
        </member>
        <member name="T:NUnit.Framework.TimeoutAttribute">
            <summary>
            Used on a method, marks the test with a timeout value in milliseconds. 
            The test will be run in a separate thread and is cancelled if the timeout 
            is exceeded. Used on a method or assembly, sets the default timeout 
            for all contained test methods.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TimeoutAttribute.#ctor(System.Int32)">
            <summary>
            Construct a TimeoutAttribute given a time in milliseconds
            </summary>
            <param name="timeout">The timeout value in milliseconds</param>
        </member>
        <member name="T:NUnit.Framework.RequiresSTAAttribute">
            <summary>
            Marks a test that must run in the STA, causing it
            to run in a separate thread if necessary.
            
            On methods, you may also use STAThreadAttribute
            to serve the same purpose.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiresSTAAttribute.#ctor">
            <summary>
            Construct a RequiresSTAAttribute
            </summary>
        </member>
        <member name="T:NUnit.Framework.RequiresMTAAttribute">
            <summary>
            Marks a test that must run in the MTA, causing it
            to run in a separate thread if necessary.
            
            On methods, you may also use MTAThreadAttribute
            to serve the same purpose.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiresMTAAttribute.#ctor">
            <summary>
            Construct a RequiresMTAAttribute
            </summary>
        </member>
        <member name="T:NUnit.Framework.RequiresThreadAttribute">
            <summary>
            Marks a test that must run on a separate thread.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiresThreadAttribute.#ctor">
            <summary>
            Construct a RequiresThreadAttribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiresThreadAttribute.#ctor(System.Threading.ApartmentState)">
            <summary>
            Construct a RequiresThreadAttribute, specifying the apartment
            </summary>
        </member>
        <member name="T:NUnit.Framework.ValueSourceAttribute">
            <summary>
            ValueSourceAttribute indicates the source to be used to
            provide data for one parameter of a test method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the factory - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceName">The name of the data source to be used</param>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of the method, property or field that will provide data</param>
        </member>
        <member name="P:NUnit.Framework.ValueSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or fiend to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.ValueSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeExistsConstraint">
            <summary>
            AttributeExistsConstraint tests for the presence of a
            specified attribute on  a Type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Constraint">
            <summary>
            The Constraint class is the base of all built-in constraints
            within NUnit. It provides the operator overloads used to combine 
            constraints.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.IResolveConstraint">
            <summary>
            The IConstraintExpression interface is implemented by all
            complete and resolvable constraints and expressions.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.IResolveConstraint.Resolve">
            <summary>
            Return the top-level constraint for this expression
            </summary>
            <returns></returns>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.UNSET">
            <summary>
            Static UnsetObject used to detect derived constraints
            failing to set the actual value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.actual">
            <summary>
            The actual value being tested against a constraint
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.displayName">
            <summary>
            The display name of this Constraint for use by ToString()
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.argcnt">
            <summary>
            Argument fields used by ToString();
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.builder">
            <summary>
            The builder holding this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.#ctor">
            <summary>
            Construct a constraint with no arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.#ctor(System.Object)">
            <summary>
            Construct a constraint with one argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.#ctor(System.Object,System.Object)">
            <summary>
            Construct a constraint with two arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.SetBuilder(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Sets the ConstraintBuilder holding this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the failure message to the MessageWriter provided
            as an argument. The default implementation simply passes
            the constraint and the actual value to the writer, which
            then displays the constraint description and the value.
            
            Constraints that need to provide additional details,
            such as where the error occured can override this.
            </summary>
            <param name="writer">The MessageWriter on which to display the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Matches(NUnit.Framework.Constraints.ActualValueDelegate)">
            <summary>
            Test whether the constraint is satisfied by an
            ActualValueDelegate that returns the value to be tested.
            The default implementation simply evaluates the delegate
            but derived classes may override it to provide for delayed 
            processing.
            </summary>
            <param name="del">An ActualValueDelegate</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Matches``1(``0@)">
            <summary>
            Test whether the constraint is satisfied by a given reference.
            The default implementation simply dereferences the value but
            derived classes may override it to provide for delayed processing.
            </summary>
            <param name="actual">A reference to the value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.ToString">
            <summary>
            Default override of ToString returns the constraint DisplayName
            followed by any arguments within angle brackets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.GetStringRepresentation">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_BitwiseAnd(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied only if both 
            argument constraints are satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_BitwiseOr(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied if either 
            of the argument constraints is satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_LogicalNot(NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied if the 
            argument constraint is not satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.After(System.Int32)">
            <summary>
            Returns a DelayedConstraint with the specified delay time.
            </summary>
            <param name="delayInMilliseconds">The delay in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.After(System.Int32,System.Int32)">
            <summary>
            Returns a DelayedConstraint with the specified delay time
            and polling interval.
            </summary>
            <param name="delayInMilliseconds">The delay in milliseconds.</param>
            <param name="pollingInterval">The interval at which to test the constraint.</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.DisplayName">
            <summary>
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.And">
            <summary>
            Returns a ConstraintExpression by appending And
            to the current constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.With">
            <summary>
            Returns a ConstraintExpression by appending And
            to the current constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.Or">
            <summary>
            Returns a ConstraintExpression by appending Or
            to the current constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Constraint.UnsetObject">
            <summary>
            Class used to detect any derived constraints
            that fail to set the actual value in their
            Matches override.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.#ctor(System.Type)">
            <summary>
            Constructs an AttributeExistsConstraint for a specific attribute Type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.Matches(System.Object)">
            <summary>
            Tests whether the object provides the expected attribute.
            </summary>
            <param name="actual">A Type, MethodInfo, or other ICustomAttributeProvider</param>
            <returns>True if the expected attribute is present, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes the description of the constraint to the specified writer
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeConstraint">
            <summary>
            AttributeConstraint tests that a specified attribute is present
            on a Type or other provider and that the value of the attribute
            satisfies some other constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PrefixConstraint">
            <summary>
            Abstract base class used for prefixes
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.PrefixConstraint.baseConstraint">
            <summary>
            The base constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixConstraint.#ctor(NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Construct given a base constraint
            </summary>
            <param name="resolvable"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.#ctor(System.Type,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Constructs an AttributeConstraint for a specified attriute
            Type and base constraint.
            </summary>
            <param name="type"></param>
            <param name="baseConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.Matches(System.Object)">
            <summary>
            Determines whether the Type or other provider has the 
            expected attribute and if its value matches the
            additional constraint specified.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes a description of the attribute to the specified writer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes the actual value supplied to the specified writer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.GetStringRepresentation">
            <summary>
            Returns a string representation of the constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.BasicConstraint">
            <summary>
            BasicConstraint is the abstract base for constraints that
            perform a simple comparison to a constant value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BasicConstraint.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.BasicConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.BasicConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.NullConstraint">
            <summary>
            NullConstraint tests that the actual value is null
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NullConstraint"/> class.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.TrueConstraint">
            <summary>
            TrueConstraint tests that the actual value is true
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.TrueConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrueConstraint"/> class.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.FalseConstraint">
            <summary>
            FalseConstraint tests that the actual value is false
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.FalseConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FalseConstraint"/> class.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NaNConstraint">
            <summary>
            NaNConstraint tests that the actual value is a double or float NaN
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NaNConstraint.Matches(System.Object)">
            <summary>
            Test that the actual value is an NaN
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NaNConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a specified writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinaryConstraint">
            <summary>
            BinaryConstraint is the abstract base of all constraints
            that combine two other constraints in some fashion.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.BinaryConstraint.left">
            <summary>
            The first constraint being combined
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.BinaryConstraint.right">
            <summary>
            The second constraint being combined
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryConstraint.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct a BinaryConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AndConstraint">
            <summary>
            AndConstraint succeeds only if both members succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Create an AndConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.Matches(System.Object)">
            <summary>
            Apply both member constraints to an actual value, succeeding 
            succeeding only if both of them succeed.
            </summary>
            <param name="actual">The actual value</param>
            <returns>True if the constraints both succeeded</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description for this contraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to receive the description</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.OrConstraint">
            <summary>
            OrConstraint succeeds if either member succeeds
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Create an OrConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.Matches(System.Object)">
            <summary>
            Apply the member constraints to an actual value, succeeding 
            succeeding as soon as one of them succeeds.
            </summary>
            <param name="actual">The actual value</param>
            <returns>True if either constraint succeeded</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description for this contraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to receive the description</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionConstraint">
            <summary>
            CollectionConstraint is the abstract base class for
            constraints that operate on collections.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.#ctor">
            <summary>
            Construct an empty CollectionConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionConstraint
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines whether the specified enumerable is empty.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>
            	<c>true</c> if the specified enumerable is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Protected method to be implemented by derived classes
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionItemsEqualConstraint">
            <summary>
            CollectionItemsEqualConstraint is the abstract base class for all
            collection constraints that apply some notion of item equality
            as a part of their operation.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.#ctor">
            <summary>
            Construct an empty CollectionConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionConstraint
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied Comparison object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.ItemsEqual(System.Object,System.Object)">
            <summary>
            Compares two collection members for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Tally(System.Collections.IEnumerable)">
            <summary>
            Return a new CollectionTally for use in making tests
            </summary>
            <param name="c">The collection to be included in the tally</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyCollectionConstraint">
            <summary>
            EmptyCollectionConstraint tests whether a collection is empty. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyCollectionConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Check that the collection is empty
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyCollectionConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.UniqueItemsConstraint">
            <summary>
            UniqueItemsConstraint tests whether all the items in a 
            collection are unique.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.UniqueItemsConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Check that all items are unique.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.UniqueItemsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionContainsConstraint">
            <summary>
            CollectionContainsConstraint is used to test whether a collection
            contains an expected object as a member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionContainsConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether the expected item is contained in the collection
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a descripton of the constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionEquivalentConstraint">
            <summary>
            CollectionEquivalentCOnstraint is used to determine whether two
            collections are equivalent.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionEquivalentConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether two collections are equivalent
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionSubsetConstraint">
            <summary>
            CollectionSubsetConstraint is used to determine whether
            one collection is a subset of another
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionSubsetConstraint
            </summary>
            <param name="expected">The collection that the actual value is expected to be a subset of</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether the actual collection is a subset of 
            the expected collection provided.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionOrderedConstraint">
            <summary>
            CollectionOrderedConstraint is used to test whether a collection is ordered.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.#ctor">
            <summary>
            Construct a CollectionOrderedConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an IComparer and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an IComparer&lt;T&gt; and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a Comparison&lt;T&gt; and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.By(System.String)">
            <summary>
            Modifies the constraint to test ordering by the value of
            a specified property and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.doMatch(System.Collections.IEnumerable)">
            <summary>
            Test whether the collection is ordered
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of the constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionOrderedConstraint.Descending">
            <summary>
             If used performs a reverse comparison
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionTally">
            <summary>
            CollectionTally counts (tallies) the number of
            occurences of each object in one or more enumerations.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.#ctor(NUnit.Framework.Constraints.NUnitEqualityComparer,System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionTally object from a comparer and a collection
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.TryRemove(System.Object)">
            <summary>
            Try to remove an object from the tally
            </summary>
            <param name="o">The object to remove</param>
            <returns>True if successful, false if the object was not found</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.TryRemove(System.Collections.IEnumerable)">
            <summary>
            Try to remove a set of objects from the tally
            </summary>
            <param name="c">The objects to remove</param>
            <returns>True if successful, false if any object was not found</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionTally.Count">
            <summary>
            The number of objects remaining in the tally
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonAdapter">
            <summary>
            ComparisonAdapter class centralizes all comparisons of
            values in NUnit, adapting to the use of any provided
            IComparer, IComparer&lt;T&gt; or Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For(System.Collections.IComparer)">
            <summary>
            Returns a ComparisonAdapter that wraps an IComparer
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a ComparisonAdapter that wraps an IComparer&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For``1(System.Comparison{``0})">
            <summary>
            Returns a ComparisonAdapter that wraps a Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ComparisonAdapter.Default">
            <summary>
            Gets the default ComparisonAdapter, which wraps an
            NUnitComparer object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter.#ctor(System.Collections.IComparer)">
            <summary>
            Construct a ComparisonAdapter for an IComparer
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.DefaultComparisonAdapter.#ctor">
            <summary>
            Construct a default ComparisonAdapter
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1">
            <summary>
            ComparisonAdapter&lt;T&gt; extends ComparisonAdapter and
            allows use of an IComparer&lt;T&gt; or Comparison&lt;T&gt;
            to actually perform the comparison.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Construct a ComparisonAdapter for an IComparer&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1.Compare(System.Object,System.Object)">
            <summary>
            Compare a Type T to an object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparisonAdapterForComparison`1.#ctor(System.Comparison{`0})">
            <summary>
            Construct a ComparisonAdapter for a Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparisonAdapterForComparison`1.Compare(System.Object,System.Object)">
            <summary>
            Compare a Type T to an object
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonConstraint">
            <summary>
            Abstract base class for constraints that compare values to
            determine if one is greater than, equal to or less than
            the other. This class supplies the Using modifiers.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.comparer">
            <summary>
            ComparisonAdapter to be used in making the comparison
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ComparisonConstraint"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ComparisonConstraint"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an IComparer and returns self
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an IComparer&lt;T&gt; and returns self
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a Comparison&lt;T&gt; and returns self
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ActualValueDelegate">
            <summary>
            Delegate used to delay evaluation of the actual value
            to be used in evaluating a constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder">
            <summary>
            ConstraintBuilder maintains the stacks that are used in
            processing a ConstraintExpression. An OperatorStack
            is used to hold operators that are waiting for their
            operands to be reognized. a ConstraintStack holds 
            input constraints as well as the results of each
            operator applied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintBuilder"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Append(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Appends the specified operator to the expression by first
            reducing the operator stack and then pushing the new
            operator on the stack.
            </summary>
            <param name="op">The operator to push.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Append(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Appends the specified constraint to the expresson by pushing
            it on the constraint stack.
            </summary>
            <param name="constraint">The constraint to push.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.SetTopOperatorRightContext(System.Object)">
            <summary>
            Sets the top operator right context.
            </summary>
            <param name="rightContext">The right context.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ReduceOperatorStack(System.Int32)">
            <summary>
            Reduces the operator stack until the topmost item
            precedence is greater than or equal to the target precedence.
            </summary>
            <param name="targetPrecedence">The target precedence.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Resolve">
            <summary>
            Resolves this instance, returning a Constraint. If the builder
            is not currently in a resolvable state, an exception is thrown.
            </summary>
            <returns>The resolved constraint</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.IsResolvable">
            <summary>
            Gets a value indicating whether this instance is resolvable.
            </summary>
            <value>
            	<c>true</c> if this instance is resolvable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack">
            <summary>
            OperatorStack is a type-safe stack for holding ConstraintOperators
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:OperatorStack"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Push(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Pushes the specified operator onto the stack.
            </summary>
            <param name="op">The op.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Pop">
            <summary>
            Pops the topmost operator from the stack.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:OpStack"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Top">
            <summary>
            Gets the topmost operator without modifying the stack.
            </summary>
            <value>The top.</value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack">
            <summary>
            ConstraintStack is a type-safe stack for holding Constraints
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintStack"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Push(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Pushes the specified constraint. As a side effect,
            the constraint's builder field is set to the 
            ConstraintBuilder owning this stack.
            </summary>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Pop">
            <summary>
            Pops this topmost constrait from the stack.
            As a side effect, the constraint's builder
            field is set to null.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:ConstraintStack"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Top">
            <summary>
            Gets the topmost constraint without modifying the stack.
            </summary>
            <value>The topmost constraint</value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintExpression">
            <summary>
            ConstraintExpression represents a compound constraint in the 
            process of being constructed from a series of syntactic elements.
            
            Individual elements are appended to the expression as they are
            reognized. Once an actual Constraint is appended, the expression
            returns a resolvable Constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintExpressionBase">
            <summary>
            ConstraintExpressionBase is the abstract base class for the 
            ConstraintExpression class, which represents a 
            compound constraint in the process of being constructed 
            from a series of syntactic elements.
            
            NOTE: ConstraintExpressionBase is separate because the
            ConstraintExpression class was generated in earlier
            versions of NUnit. The two classes may be combined
            in a future version.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintExpressionBase.builder">
            <summary>
            The ConstraintBuilder holding the elements recognized so far
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpressionBase"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpressionBase"/> 
            class passing in a ConstraintBuilder, which may be pre-populated.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.ToString">
            <summary>
            Returns a string representation of the expression as it
            currently stands. This should only be used for testing,
            since it has the side-effect of resolving the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.Append(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Appends an operator to the expression and returns the
            resulting expression itself.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.Append(NUnit.Framework.Constraints.SelfResolvingOperator)">
            <summary>
            Appends a self-resolving operator to the expression and
            returns a new ResolvableConstraintExpression.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpressionBase.Append(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Appends a constraint to the expression and returns that
            constraint, which is associated with the current state
            of the expression being built.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpression"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpression"/> 
            class passing in a ConstraintBuilder, which may be pre-populated.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Exactly(System.Int32)">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches``1(System.Predicate{``0})">
            <summary>
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOfType(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOfType``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Member(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.String)">
            <summary>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument. 
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a 
            collection member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.ContainsSubstring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StartsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EndsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the Regex pattern supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringMatching(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the Regex pattern supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SamePath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same as an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SubPath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SamePathOrUnder(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InRange``1(``0,``0)">
            <summary>
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.With">
            <summary>
            With is currently a NOP - reserved for future use.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Positive">
            <summary>
            Returns a constraint that tests for a positive value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Negative">
            <summary>
            Returns a constraint that tests for a negative value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Unique">
            <summary>
            Returns a constraint that tests whether a collection 
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.BinarySerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in binary format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.XmlSerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in xml format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintFactory">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Exactly(System.Int32)">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InstanceOfType(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InstanceOfType``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Member(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Contains(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Contains(System.String)">
            <summary>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument. 
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a 
            collection member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.ContainsSubstring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotContain(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StartsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotStartWith(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.EndsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotEndWith(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Matches(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the Regex pattern supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringMatching(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the Regex pattern supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotMatch(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value matches the pattern supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SamePath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same as an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SubPath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SamePathOrUnder(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InRange``1(``0,``0)">
            <summary>
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Positive">
            <summary>
            Returns a constraint that tests for a positive value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Negative">
            <summary>
            Returns a constraint that tests for a negative value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Unique">
            <summary>
            Returns a constraint that tests whether a collection 
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.BinarySerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in binary format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.XmlSerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in xml format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintOperator">
            <summary>
            The ConstraintOperator class is used internally by a
            ConstraintBuilder to represent an operator that 
            modifies or combines constraints. 
            
            Constraint operators use left and right precedence
            values to determine whether the top operator on the
            stack should be reduced before pushing a new operator.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintOperator.left_precedence">
            <summary>
            The precedence value used when the operator
            is about to be pushed to the stack.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintOperator.right_precedence">
            <summary>
            The precedence value used when the operator
            is on the top of the stack.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.LeftContext">
            <summary>
            The syntax element preceding this operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.RightContext">
            <summary>
            The syntax element folowing this operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.LeftPrecedence">
            <summary>
            The precedence value used when the operator
            is about to be pushed to the stack.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.RightPrecedence">
            <summary>
            The precedence value used when the operator
            is on the top of the stack.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PrefixOperator">
            <summary>
            PrefixOperator takes a single constraint and modifies
            it's action in some way.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns the constraint created by applying this
            prefix to another constraint.
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NotOperator">
            <summary>
            Negates the test of the constraint it wraps.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotOperator.#ctor">
            <summary>
            Constructs a new NotOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a NotConstraint applied to its argument.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionOperator">
            <summary>
            Abstract base for operators that indicate how to
            apply a constraint to items in a collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOperator.#ctor">
            <summary>
            Constructs a CollectionOperator
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AllOperator">
            <summary>
            Represents a constraint that succeeds if all the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            they all succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.SomeOperator">
            <summary>
            Represents a constraint that succeeds if any of the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            any of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NoneOperator">
            <summary>
            Represents a constraint that succeeds if none of the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoneOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            none of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactCountOperator">
            <summary>
            Represents a constraint that succeeds if the specified 
            count of members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountOperator.#ctor(System.Int32)">
            <summary>
            Construct an ExactCountOperator for a specified count
            </summary>
            <param name="expectedCount">The expected count</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            none of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.WithOperator">
            <summary>
            Represents a constraint that simply wraps the
            constraint provided as an argument, without any
            further functionality, but which modifes the
            order of evaluation because of its precedence.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.WithOperator.#ctor">
            <summary>
            Constructor for the WithOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.WithOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Returns a constraint that wraps its argument
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.SelfResolvingOperator">
            <summary>
            Abstract base class for operators that are able to reduce to a 
            constraint whether or not another syntactic element follows.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropOperator">
            <summary>
            Operator used to test for the presence of a named Property
            on an object and optionally apply further tests to the
            value of that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropOperator.#ctor(System.String)">
            <summary>
            Constructs a PropOperator for a particular named property
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.PropOperator.Name">
            <summary>
            Gets the name of the property to which the operator applies
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeOperator">
            <summary>
            Operator that tests for the presence of a particular attribute
            on a type and optionally applies further tests to the attribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeOperator.#ctor(System.Type)">
            <summary>
            Construct an AttributeOperator for a particular Type
            </summary>
            <param name="type">The Type of attribute tested</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsOperator">
            <summary>
            Operator that tests that an exception is thrown and
            optionally applies further tests to the exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsOperator.#ctor">
            <summary>
            Construct a ThrowsOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinaryOperator">
            <summary>
            Abstract base class for all binary operators
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryOperator.ApplyOperator(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Abstract method that produces a constraint by applying
            the operator to its left and right constraint arguments.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.BinaryOperator.LeftPrecedence">
            <summary>
            Gets the left precedence of the operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.BinaryOperator.RightPrecedence">
            <summary>
            Gets the right precedence of the operator
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AndOperator">
            <summary>
            Operator that requires both it's arguments to succeed
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndOperator.#ctor">
            <summary>
            Construct an AndOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndOperator.ApplyOperator(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Apply the operator to produce an AndConstraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.OrOperator">
            <summary>
            Operator that requires at least one of it's arguments to succeed
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrOperator.#ctor">
            <summary>
            Construct an OrOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrOperator.ApplyOperator(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Apply the operator to produce an OrConstraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ContainsConstraint">
            <summary>
            ContainsConstraint tests a whether a string contains a substring
            or a collection contains an object. It postpones the decision of
            which test to use until the type of the actual argument is known.
            This allows testing whether a string is contained in a collection
            or as a substring of another string using the same syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ContainsConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied Comparison object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ContainsConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.DelayedConstraint">
            <summary>
             Applies a delay to the match so that a match can be evaluated in the future.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.#ctor(NUnit.Framework.Constraints.Constraint,System.Int32)">
            <summary>
             Creates a new DelayedConstraint
            </summary>
            <param name="baseConstraint">The inner constraint two decorate</param>
            <param name="delayInMilliseconds">The time interval after which the match is performed</param>
            <exception cref="T:System.InvalidOperationException">If the value of <paramref name="delayInMilliseconds"/> is less than 0</exception>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.#ctor(NUnit.Framework.Constraints.Constraint,System.Int32,System.Int32)">
            <summary>
             Creates a new DelayedConstraint
            </summary>
            <param name="baseConstraint">The inner constraint two decorate</param>
            <param name="delayInMilliseconds">The time interval after which the match is performed</param>
            <param name="pollingInterval">The time interval used for polling</param>
            <exception cref="T:System.InvalidOperationException">If the value of <paramref name="delayInMilliseconds"/> is less than 0</exception>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for if the base constraint fails, false if it succeeds</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.Matches(NUnit.Framework.Constraints.ActualValueDelegate)">
            <summary>
            Test whether the constraint is satisfied by a delegate
            </summary>
            <param name="del">The delegate whose value is to be tested</param>
            <returns>True for if the base constraint fails, false if it succeeds</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.Matches``1(``0@)">
            <summary>
            Test whether the constraint is satisfied by a given reference.
            Overridden to wait for the specified delay period before
            calling the base constraint with the dereferenced value.
            </summary>
            <param name="actual">A reference to the value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a MessageWriter.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyDirectoryContraint">
            <summary>
            EmptyDirectoryConstraint is used to test that a directory is empty
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyDirectoryContraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyDirectoryContraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyDirectoryContraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyConstraint">
            <summary>
            EmptyConstraint tests a whether a string or collection is empty,
            postponing the decision about which test is applied until the
            type of the actual argument is known.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualConstraint">
            <summary>
            EqualConstraint is able to compare an actual value with the
            expected value provided in its constructor. Two objects are 
            considered equal if both are null, or if both have the same 
            value. NUnit has special semantics for some object types.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.EqualConstraint.clipStrings">
            <summary>
            If true, strings in error messages will be clipped
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.EqualConstraint.comparer">
            <summary>
            NUnitEqualityComparer used to test equality.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.EqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Within(System.Object)">
            <summary>
            Flag the constraint to use a tolerance when determining equality.
            </summary>
            <param name="amount">Tolerance value to be used</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Comparer(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied Comparison object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a failure message. Overridden to provide custom 
            failure messages for EqualConstraint.
            </summary>
            <param name="writer">The MessageWriter to write to</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write description of this constraint
            </summary>
            <param name="writer">The MessageWriter to write to</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.DisplayCollectionDifferences(NUnit.Framework.Constraints.MessageWriter,System.Collections.ICollection,System.Collections.ICollection,System.Int32)">
            <summary>
            Display the failure information for two collections that did not match.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected collection.</param>
            <param name="actual">The actual collection</param>
            <param name="depth">The depth of this failure in a set of nested collections</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.DisplayTypesAndSizes(NUnit.Framework.Constraints.MessageWriter,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Displays a single line showing the types and sizes of the expected
            and actual enumerations, collections or arrays. If both are identical, 
            the value is only shown once.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected collection or array</param>
            <param name="actual">The actual collection or array</param>
            <param name="indent">The indentation level for the message line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.DisplayFailurePoint(NUnit.Framework.Constraints.MessageWriter,System.Collections.IEnumerable,System.Collections.IEnumerable,NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint,System.Int32)">
            <summary>
            Displays a single line showing the point in the expected and actual
            arrays at which the comparison failed. If the arrays have different
            structures or dimensions, both values are shown.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected array</param>
            <param name="actual">The actual array</param>
            <param name="failurePoint">Index of the failure point in the underlying collections</param>
            <param name="indent">The indentation level for the message line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.DisplayEnumerableDifferences(NUnit.Framework.Constraints.MessageWriter,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Display the failure information for two IEnumerables that did not match.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected enumeration.</param>
            <param name="actual">The actual enumeration</param>
            <param name="depth">The depth of this failure in a set of nested collections</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.NoClip">
            <summary>
            Flag the constraint to suppress string clipping 
            and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.AsCollection">
            <summary>
            Flag the constraint to compare arrays as collections
            and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Ulps">
            <summary>
            Switches the .Within() modifier to interpret its tolerance as
            a distance in representable values (see remarks).
            </summary>
            <returns>Self.</returns>
            <remarks>
            Ulp stands for "unit in the last place" and describes the minimum
            amount a given value can change. For any integers, an ulp is 1 whole
            digit. For floating point values, the accuracy of which is better
            for smaller numbers and worse for larger numbers, an ulp depends
            on the size of the number. Using ulps for comparison of floating
            point results instead of fixed tolerances is safer because it will
            automatically compensate for the added inaccuracy of larger numbers.
            </remarks>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Percent">
            <summary>
            Switches the .Within() modifier to interpret its tolerance as
            a percentage that the actual values is allowed to deviate from
            the expected value.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Days">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in days.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Hours">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in hours.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Minutes">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in minutes.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Seconds">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in seconds.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Milliseconds">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in milliseconds.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Ticks">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in clock ticks.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualityAdapter">
            <summary>
            EqualityAdapter class handles all equality comparisons
            that use an IEqualityComparer, IEqualityComparer&lt;T&gt;
            or a ComparisonAdapter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.AreEqual(System.Object,System.Object)">
            <summary>
            Compares two objects, returning true if they are equal
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.CanCompare(System.Object,System.Object)">
            <summary>
            Returns true if the two objects can be compared by this adapter.
            The base adapter cannot handle IEnumerables except for strings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For(System.Collections.IComparer)">
            <summary>
            Returns an EqualityAdapter that wraps an IComparer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For(System.Collections.IEqualityComparer)">
            <summary>
            Returns an EqualityAdapter that wraps an IEqualityComparer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an EqualityAdapter that wraps an IEqualityComparer&lt;T&gt;.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns an EqualityAdapter that wraps an IComparer&lt;T&gt;.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Comparison{``0})">
            <summary>
            Returns an EqualityAdapter that wraps a Comparison&lt;T&gt;.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualityAdapter.ComparerAdapter">
            <summary>
            EqualityAdapter that wraps an IComparer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.GenericEqualityAdapter`1.CanCompare(System.Object,System.Object)">
            <summary>
            Returns true if the two objects can be compared by this adapter.
            Generic adapter requires objects of the specified type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualityAdapter.ComparerAdapter`1">
            <summary>
            EqualityAdapter that wraps an IComparer.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics">
            <summary>Helper routines for working with floating point numbers</summary>
            <remarks>
              <para>
                The floating point comparison code is based on this excellent article:
                http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm
              </para>
              <para>
                "ULP" means Unit in the Last Place and in the context of this library refers to
                the distance between two adjacent floating point numbers. IEEE floating point
                numbers can only represent a finite subset of natural numbers, with greater
                accuracy for smaller numbers and lower accuracy for very large numbers.
              </para>
              <para>
                If a comparison is allowed "2 ulps" of deviation, that means the values are
                allowed to deviate by up to 2 adjacent floating point values, which might be
                as low as 0.0000001 for small numbers or as high as 10.0 for large numbers.
              </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.AreAlmostEqualUlps(System.Single,System.Single,System.Int32)">
            <summary>Compares two floating point values for equality</summary>
            <param name="left">First floating point value to be compared</param>
            <param name="right">Second floating point value t be compared</param>
            <param name="maxUlps">
              Maximum number of representable floating point values that are allowed to
              be between the left and the right floating point values
            </param>
            <returns>True if both numbers are equal or close to being equal</returns>
            <remarks>
              <para>
                Floating point values can only represent a finite subset of natural numbers.
                For example, the values 2.00000000 and 2.00000024 can be stored in a float,
                but nothing inbetween them.
              </para>
              <para>
                This comparison will count how many possible floating point values are between
                the left and the right number. If the number of possible values between both
                numbers is less than or equal to maxUlps, then the numbers are considered as
                being equal.
              </para>
              <para>
                Implementation partially follows the code outlined here:
                http://www.anttirt.net/2007/08/19/proper-floating-point-comparisons/
              </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.AreAlmostEqualUlps(System.Double,System.Double,System.Int64)">
            <summary>Compares two double precision floating point values for equality</summary>
            <param name="left">First double precision floating point value to be compared</param>
            <param name="right">Second double precision floating point value t be compared</param>
            <param name="maxUlps">
              Maximum number of representable double precision floating point values that are
              allowed to be between the left and the right double precision floating point values
            </param>
            <returns>True if both numbers are equal or close to being equal</returns>
            <remarks>
              <para>
                Double precision floating point values can only represent a limited series of
                natural numbers. For example, the values 2.0000000000000000 and 2.0000000000000004
                can be stored in a double, but nothing inbetween them.
              </para>
              <para>
                This comparison will count how many possible double precision floating point
                values are between the left and the right number. If the number of possible
                values between both numbers is less than or equal to maxUlps, then the numbers
                are considered as being equal.
              </para>
              <para>
                Implementation partially follows the code outlined here:
                http://www.anttirt.net/2007/08/19/proper-floating-point-comparisons/
              </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsInt(System.Single)">
            <summary>
              Reinterprets the memory contents of a floating point value as an integer value
            </summary>
            <param name="value">
              Floating point value whose memory contents to reinterpret
            </param>
            <returns>
              The memory contents of the floating point value interpreted as an integer
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsLong(System.Double)">
            <summary>
              Reinterprets the memory contents of a double precision floating point
              value as an integer value
            </summary>
            <param name="value">
              Double precision floating point value whose memory contents to reinterpret
            </param>
            <returns>
              The memory contents of the double precision floating point value
              interpreted as an integer
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsFloat(System.Int32)">
            <summary>
              Reinterprets the memory contents of an integer as a floating point value
            </summary>
            <param name="value">Integer value whose memory contents to reinterpret</param>
            <returns>
              The memory contents of the integer value interpreted as a floating point value
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsDouble(System.Int64)">
            <summary>
              Reinterprets the memory contents of an integer value as a double precision
              floating point value
            </summary>
            <param name="value">Integer whose memory contents to reinterpret</param>
            <returns>
              The memory contents of the integer interpreted as a double precision
              floating point value
            </returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion">
            <summary>Union of a floating point variable and an integer</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.Float">
            <summary>The union's value as a floating point variable</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.Int">
            <summary>The union's value as an integer</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.UInt">
            <summary>The union's value as an unsigned integer</summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion">
            <summary>Union of a double precision floating point variable and a long</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.Double">
            <summary>The union's value as a double precision floating point variable</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.Long">
            <summary>The union's value as a long</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.ULong">
            <summary>The union's value as an unsigned long</summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.GreaterThanConstraint">
            <summary>
            Tests whether a value is greater than the value supplied to its constructor
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.GreaterThanConstraint.expected">
            <summary>
            The value against which a comparison is to be made
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:GreaterThanConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint">
            <summary>
            Tests whether a value is greater than or equal to the value supplied to its constructor
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint.expected">
            <summary>
            The value against which a comparison is to be made
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:GreaterThanOrEqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.LessThanConstraint">
            <summary>
            Tests whether a value is less than the value supplied to its constructor
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.LessThanConstraint.expected">
            <summary>
            The value against which a comparison is to be made
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:LessThanConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.LessThanOrEqualConstraint">
            <summary>
            Tests whether a value is less than or equal to the value supplied to its constructor
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.LessThanOrEqualConstraint.expected">
            <summary>
            The value against which a comparison is to be made
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanOrEqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:LessThanOrEqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanOrEqualConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanOrEqualConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.MessageWriter">
            <summary>
            MessageWriter is the abstract base for classes that write
            constraint descriptions and messages in some form. The
            class has separate methods for writing various components
            of a message, allowing implementations to tailor the
            presentation as needed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.#ctor">
            <summary>
            Construct a MessageWriter given a culture
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteMessageLine(System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message.
            </summary>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteMessageLine(System.Int32,System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message, at a givel 
            indentation level.
            </summary>
            <param name="level">The indentation level of the message</param>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Display Expected and Actual lines for a constraint. This
            is called by MessageWriter's default implementation of 
            WriteMessageTo and provides the generic two-line display. 
            </summary>
            <param name="constraint">The constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(System.Object,System.Object)">
            <summary>
            Display Expected and Actual lines for given values. This
            method may be called by constraints that need more control over
            the display of actual and expected values than is provided
            by the default implementation.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Display Expected and Actual lines for given values, including
            a tolerance value on the Expected line.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayStringDifferences(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Display the expected and actual string values on separate lines.
            If the mismatch parameter is >=0, an additional line is displayed
            line containing a caret that points to the mismatch point.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual string value</param>
            <param name="mismatch">The point at which the strings don't match or -1</param>
            <param name="ignoreCase">If true, case is ignored in locating the point where the strings differ</param>
            <param name="clipping">If true, the strings should be clipped to fit the line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteConnector(System.String)">
            <summary>
            Writes the text for a connector.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WritePredicate(System.String)">
            <summary>
            Writes the text for a predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteExpectedValue(System.Object)">
            <summary>
            Writes the text for an expected value.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteModifier(System.String)">
            <summary>
            Writes the text for a modifier
            </summary>
            <param name="modifier">The modifier.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteActualValue(System.Object)">
            <summary>
            Writes the text for an actual value.
            </summary>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteValue(System.Object)">
            <summary>
            Writes the text for a generalized value.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteCollectionElements(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            Writes the text for a collection value,
            starting at a particular point, to a max length
            </summary>
            <param name="collection">The collection containing elements to write.</param>
            <param name="start">The starting point of the elements to write</param>
            <param name="max">The maximum number of elements to write</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.MessageWriter.MaxLineLength">
            <summary>
            Abstract method to get the max line length
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.MsgUtils">
            <summary>
            Static methods used in creating messages
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.MsgUtils.ELLIPSIS">
            <summary>
            Static string used when strings are clipped
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetTypeRepresentation(System.Object)">
            <summary>
            Returns the representation of a type as used in NUnitLite.
            This is the same as Type.ToString() except for arrays,
            which are displayed with their declared sizes.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.EscapeControlChars(System.String)">
            <summary>
            Converts any control characters in a string 
            to their escaped representation.
            </summary>
            <param name="s">The string to be converted</param>
            <returns>The converted string</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetArrayIndicesAsString(System.Int32[])">
            <summary>
            Return the a string representation for a set of indices into an array
            </summary>
            <param name="indices">Array of indices for which a string is needed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetArrayIndicesFromCollectionIndex(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Get an array of indices representing the point in a enumerable, 
            collection or array corresponding to a single int index into the 
            collection.
            </summary>
            <param name="collection">The collection to which the indices apply</param>
            <param name="index">Index in the collection</param>
            <returns>Array of indices</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.ClipString(System.String,System.Int32,System.Int32)">
            <summary>
            Clip a string to a given length, starting at a particular offset, returning the clipped
            string with ellipses representing the removed parts
            </summary>
            <param name="s">The string to be clipped</param>
            <param name="maxStringLength">The maximum permitted length of the result string</param>
            <param name="clipStart">The point at which to start clipping</param>
            <returns>The clipped string</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.ClipExpectedAndActual(System.String@,System.String@,System.Int32,System.Int32)">
            <summary>
            Clip the expected and actual strings in a coordinated fashion, 
            so that they may be displayed together.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="maxDisplayLength"></param>
            <param name="mismatch"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.FindMismatchPosition(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Shows the position two strings start to differ.  Comparison 
            starts at the start index.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="istart">The index in the strings at which comparison should start</param>
            <param name="ignoreCase">Boolean indicating whether case should be ignored</param>
            <returns>-1 if no mismatch found, or the index where mismatch found</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.Numerics">
            <summary>
            The Numerics class contains common operations on numeric values.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsNumericType(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsFloatingPointNumeric(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a floating point numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a floating point numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsFixedPointNumeric(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a fixed point numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a fixed point numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.AreEqual(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance@)">
            <summary>
            Test two numeric values for equality, performing the usual numeric 
            conversions and using a provided or default tolerance. If the tolerance 
            provided is Empty, this method may set it to a default tolerance.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="tolerance">A reference to the tolerance in effect</param>
            <returns>True if the values are equal</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.Compare(System.Object,System.Object)">
            <summary>
            Compare two numeric values, performing the usual numeric conversions.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <returns>The relationship of the values to each other</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitComparer">
            <summary>
            NUnitComparer encapsulates NUnit's default behavior
            in comparing two objects.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitComparer.Default">
            <summary>
            Returns the default NUnitComparer.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitComparer`1">
            <summary>
            Generic version of NUnitComparer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitComparer`1.Compare(`0,`0)">
            <summary>
            Compare two objects of the same type
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitEqualityComparer">
            <summary>
            NUnitEqualityComparer encapsulates NUnit's handling of
            equality tests between objects.
            </summary>
        </member>
        <member name="T:NUnit.Framework.INUnitEqualityComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:NUnit.Framework.INUnitEqualityComparer.AreEqual(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance@)">
            <summary>
            Compares two objects for equality within a tolerance
            </summary>
            <param name="x">The first object to compare</param>
            <param name="y">The second object to compare</param>
            <param name="tolerance">The tolerance to use in the comparison</param>
            <returns></returns>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.caseInsensitive">
            <summary>
            If true, all string comparisons will ignore case
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.compareAsCollection">
            <summary>
            If true, arrays will be treated as collections, allowing
            those of different dimensions to be compared
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.externalComparers">
            <summary>
            Comparison objects used in comparisons for some constraints.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitEqualityComparer.AreEqual(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance@)">
            <summary>
            Compares two objects for equality within a tolerance.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitEqualityComparer.ArraysEqual(System.Array,System.Array,NUnit.Framework.Constraints.Tolerance@)">
            <summary>
            Helper method to compare two arrays
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitEqualityComparer.DirectoriesEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Method to compare two DirectoryInfo objects
            </summary>
            <param name="x">first directory to compare</param>
            <param name="y">second directory to compare</param>
            <returns>true if equivalent, false if not</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.Default">
            <summary>
            Returns the default NUnitEqualityComparer
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.IgnoreCase">
            <summary>
            Gets and sets a flag indicating whether case should
            be ignored in determining equality.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.CompareAsCollection">
            <summary>
            Gets and sets a flag indicating that arrays should be
            compared as collections, without regard to their shape.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.ExternalComparers">
            <summary>
            Gets and sets an external comparer to be used to
            test for equality. It is applied to members of
            collections, in place of NUnit's own logic.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoints">
            <summary>
            Gets the list of failure points for the last Match performed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint">
            <summary>
            FailurePoint class represents one point of failure
            in an equality test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.Position">
            <summary>
            The location of the failure
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ExpectedValue">
            <summary>
            The expected value
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ActualValue">
            <summary>
            The actual value
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ExpectedHasData">
            <summary>
            Indicates whether the expected value is valid
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ActualHasData">
            <summary>
            Indicates whether the actual value is valid
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PathConstraint">
            <summary>
            PathConstraint serves as the abstract base of constraints
            that operate on paths and provides several helper methods.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.PathConstraint.expectedPath">
            <summary>
            The expected path used in the constraint
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.PathConstraint.actualPath">
            <summary>
            The actual path being tested
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.PathConstraint.caseInsensitive">
            <summary>
            Flag indicating whether a caseInsensitive comparison should be made
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.#ctor(System.String)">
            <summary>
            Construct a PathConstraint for a give expected path
            </summary>
            <param name="expected">The expected path</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.IsMatch(System.String,System.String)">
            <summary>
            Returns true if the expected path and actual path match
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.Canonicalize(System.String)">
            <summary>
            Canonicalize the provided path
            </summary>
            <param name="path"></param>
            <returns>The path in standardized form</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.IsSamePath(System.String,System.String,System.Boolean)">
            <summary>
            Test whether two paths are the same
            </summary>
            <param name="path1">The first path</param>
            <param name="path2">The second path</param>
            <param name="ignoreCase">Indicates whether case should be ignored</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.IsSubPath(System.String,System.String,System.Boolean)">
            <summary>
            Test whether one path is under another path
            </summary>
            <param name="path1">The first path - supposed to be the parent path</param>
            <param name="path2">The second path - supposed to be the child path</param>
            <param name="ignoreCase">Indicates whether case should be ignored</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.IsSamePathOrUnder(System.String,System.String)">
            <summary>
            Test whether one path is the same as or under another path
            </summary>
            <param name="path1">The first path - supposed to be the parent path</param>
            <param name="path2">The second path - supposed to be the child path</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.PathConstraint.IgnoreCase">
            <summary>
            Modifies the current instance to be case-insensitve
            and returns it.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.PathConstraint.RespectCase">
            <summary>
            Modifies the current instance to be case-sensitve
            and returns it.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.SamePathConstraint">
            <summary>
            Summary description for SamePathConstraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SamePathConstraint"/> class.
            </summary>
            <param name="expected">The expected path</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathConstraint.IsMatch(System.String,System.String)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="expectedPath">The expected path</param>
            <param name="actualPath">The actual path</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SubPathConstraint">
            <summary>
            SubPathConstraint tests that the actual path is under the expected path
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubPathConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubPathConstraint"/> class.
            </summary>
            <param name="expected">The expected path</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubPathConstraint.IsMatch(System.String,System.String)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="expectedPath">The expected path</param>
            <param name="actualPath">The actual path</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubPathConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SamePathOrUnderConstraint">
            <summary>
            SamePathOrUnderConstraint tests that one path is under another
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathOrUnderConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SamePathOrUnderConstraint"/> class.
            </summary>
            <param name="expected">The expected path</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathOrUnderConstraint.IsMatch(System.String,System.String)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="expectedPath">The expected path</param>
            <param name="actualPath">The actual path</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathOrUnderConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.PredicateConstraint`1">
            <summary>
            Predicate constraint wraps a Predicate in a constraint,
            returning success if the predicate is true.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PredicateConstraint`1.#ctor(System.Predicate{`0})">
            <summary>
            Construct a PredicateConstraint from a predicate
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PredicateConstraint`1.Matches(System.Object)">
            <summary>
            Determines whether the predicate succeeds when applied
            to the actual value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PredicateConstraint`1.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes the description to a MessageWriter
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NotConstraint">
            <summary>
            NotConstraint negates the effect of some other constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Initializes a new instance of the <see cref="T:NotConstraint"/> class.
            </summary>
            <param name="baseConstraint">The base constraint to be negated.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for if the base constraint fails, false if it succeeds</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a MessageWriter.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AllItemsConstraint">
            <summary>
            AllItemsConstraint applies another constraint to each
            item in a collection, succeeding if they all succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct an AllItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.Matches(System.Object)">
            <summary>
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SomeItemsConstraint">
            <summary>
            SomeItemsConstraint applies another constraint to each
            item in a collection, succeeding if any of them succeeds.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct a SomeItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.Matches(System.Object)">
            <summary>
            Apply the item constraint to each item in the collection,
            succeeding if any item succeeds.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.NoItemConstraint">
            <summary>
            NoItemConstraint applies another constraint to each
            item in a collection, failing if any of them succeeds.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct a SomeItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.Matches(System.Object)">
            <summary>
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactCountConstraint">
            <summary>
            ExactCoutConstraint applies another constraint to each
            item in a collection, succeeding only if a specified
            number of items succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountConstraint.#ctor(System.Int32,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct an ExactCountConstraint on top of an existing constraint
            </summary>
            <param name="expectedCount"></param>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountConstraint.Matches(System.Object)">
            <summary>
            Apply the item constraint to each item in the collection,
            succeeding only if the expected number of items pass.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropertyExistsConstraint">
            <summary>
            PropertyExistsConstraint tests that a named property
            exists on the object provided through Match.
            
            Originally, PropertyConstraint provided this feature
            in addition to making optional tests on the vaue
            of the property. The two constraints are now separate.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyExistConstraint"/> class.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.Matches(System.Object)">
            <summary>
            Test whether the property exists for a given object
            </summary>
            <param name="actual">The object to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropertyConstraint">
            <summary>
            PropertyConstraint extracts a named property and uses
            its value as the actual value for a chained constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.#ctor(System.String,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyConstraint"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseConstraint">The constraint to apply to the property.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.RangeConstraint`1">
            <summary>
            RangeConstraint tests whethe two values are within a 
            specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:RangeConstraint"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint`1.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint`1.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ResolvableConstraintExpression">
            <summary>
            ResolvableConstraintExpression is used to represent a compound
            constraint being constructed at a point where the last operator
            may either terminate the expression or may have additional 
            qualifying constraints added to it. 
            
            It is used, for example, for a Property element or for
            an Exception element, either of which may be optionally
            followed by constraints that apply to the property or 
            exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.#ctor">
            <summary>
            Create a new instance of ResolvableConstraintExpression
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Create a new instance of ResolvableConstraintExpression,
            passing in a pre-populated ConstraintBuilder.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.NUnit#Framework#Constraints#IResolveConstraint#Resolve">
            <summary>
            Resolve the current expression to a Constraint
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ResolvableConstraintExpression.And">
            <summary>
            Appends an And Operator to the expression
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ResolvableConstraintExpression.Or">
            <summary>
            Appends an Or operator to the expression.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ReusableConstraint">
            <summary>
            ReusableConstraint wraps a resolved constraint so that it
            may be saved and reused as needed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.#ctor(NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Construct a ReusableConstraint
            </summary>
            <param name="c">The constraint or expression to be reused</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.op_Implicit(NUnit.Framework.Constraints.Constraint)~NUnit.Framework.Constraints.ReusableConstraint">
            <summary>
            Conversion operator from a normal constraint to a ReusableConstraint.
            </summary>
            <param name="c">The original constraint to be wrapped as a ReusableConstraint</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.ToString">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns>A string representing the constraint</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.Resolve">
            <summary>
            Resolves the ReusableConstraint by returning the constraint
            that it originally wrapped.
            </summary>
            <returns>A resolved constraint</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.SameAsConstraint">
            <summary>
            SameAsConstraint tests whether an object is identical to
            the object passed to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SameAsConstraint"/> class.
            </summary>
            <param name="expected">The expected object.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinarySerializableConstraint">
            <summary>
            BinarySerializableConstraint tests whether 
            an object is serializable in binary format.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinarySerializableConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinarySerializableConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinarySerializableConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinarySerializableConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.XmlSerializableConstraint">
            <summary>
            BinarySerializableConstraint tests whether 
            an object is serializable in binary format.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.XmlSerializableConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.XmlSerializableConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.XmlSerializableConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.XmlSerializableConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.StringConstraint">
            <summary>
            StringConstraint is the abstract base for constraints
            that operate on strings. It supports the IgnoreCase
            modifier for string operations.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.StringConstraint.expected">
            <summary>
            The expected value
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.StringConstraint.caseInsensitive">
            <summary>
            Indicates whether tests should be case-insensitive
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.StringConstraint.#ctor(System.String)">
            <summary>
            Constructs a StringConstraint given an expected value
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.StringConstraint.IgnoreCase">
            <summary>
            Modify the constraint to ignore case in matching.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyStringConstraint">
            <summary>
            EmptyStringConstraint tests whether a string is empty.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyStringConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyStringConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.NullOrEmptyStringConstraint">
            <summary>
            NullEmptyStringConstraint tests whether a string is either null or empty.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullOrEmptyStringConstraint.#ctor">
            <summary>
            Constructs a new NullOrEmptyStringConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullOrEmptyStringConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullOrEmptyStringConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SubstringConstraint">
            <summary>
            SubstringConstraint can test whether a string contains
            the expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubstringConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.StartsWithConstraint">
            <summary>
            StartsWithConstraint can test whether a string starts
            with an expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StartsWithConstraint"/> class.
            </summary>
            <param name="expected">The expected string</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is matched by the actual value.
            This is a template method, which calls the IsMatch method
            of the derived class.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EndsWithConstraint">
            <summary>
            EndsWithConstraint can test whether a string ends
            with an expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EndsWithConstraint"/> class.
            </summary>
            <param name="expected">The expected string</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is matched by the actual value.
            This is a template method, which calls the IsMatch method
            of the derived class.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.RegexConstraint">
            <summary>
            RegexConstraint can test whether a string matches
            the pattern provided.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RegexConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RegexConstraint"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.RegexConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.RegexConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsConstraint">
            <summary>
            ThrowsConstraint is used to test the exception thrown by 
            a delegate by applying a constraint to it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Initializes a new instance of the <see cref="T:ThrowsConstraint"/> class,
            using a constraint to be applied to the exception.
            </summary>
            <param name="baseConstraint">A constraint to apply to the caught exception.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.Matches(System.Object)">
            <summary>
            Executes the code of the delegate and captures any exception.
            If a non-null base constraint was provided, it applies that
            constraint to the exception.
            </summary>
            <param name="actual">A delegate representing the code to be tested</param>
            <returns>True if an exception is thrown and the constraint succeeds, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.Matches(NUnit.Framework.Constraints.ActualValueDelegate)">
            <summary>
            Converts an ActualValueDelegate to a TestDelegate
            before calling the primary overload.
            </summary>
            <param name="del"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ThrowsConstraint.ActualException">
            <summary>
            Get the actual exception thrown - used by Assert.Throws.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsNothingConstraint">
            <summary>
            ThrowsNothingConstraint tests that a delegate does not
            throw an exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsNothingConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True if no exception is thrown, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsNothingConstraint.Matches(NUnit.Framework.Constraints.ActualValueDelegate)">
            <summary>
            Converts an ActualValueDelegate to a TestDelegate
            before calling the primary overload.
            </summary>
            <param name="del"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsNothingConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsNothingConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ToleranceMode">
            <summary>
            Modes in which the tolerance value for a comparison can
            be interpreted.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.None">
            <summary>
            The tolerance was created with a value, without specifying 
            how the value would be used. This is used to prevent setting
            the mode more than once and is generally changed to Linear
            upon execution of the test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Linear">
            <summary>
            The tolerance is used as a numeric range within which
            two compared values are considered to be equal.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Percent">
            <summary>
            Interprets the tolerance as the percentage by which
            the two compared values my deviate from each other.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Ulps">
            <summary>
            Compares two values based in their distance in
            representable numbers.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Tolerance">
            <summary>
            The Tolerance class generalizes the notion of a tolerance
            within which an equality test succeeds. Normally, it is
            used with numeric types, but it can be used with any
            type that supports taking a difference between two 
            objects and comparing that difference to a value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.#ctor(System.Object)">
            <summary>
            Constructs a linear tolerance of a specdified amount
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.#ctor(System.Object,NUnit.Framework.Constraints.ToleranceMode)">
            <summary>
            Constructs a tolerance given an amount and ToleranceMode
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.CheckLinearAndNumeric">
            <summary>
            Tests that the current Tolerance is linear with a 
            numeric value, throwing an exception if it is not.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Empty">
            <summary>
            Returns an empty Tolerance object, equivalent to
            specifying no tolerance. In most cases, it results
            in an exact match but for floats and doubles a
            default tolerance may be used.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Zero">
            <summary>
            Returns a zero Tolerance object, equivalent to 
            specifying an exact match.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Mode">
            <summary>
            Gets the ToleranceMode for the current Tolerance
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Value">
            <summary>
            Gets the value of the current Tolerance instance.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Percent">
            <summary>
            Returns a new tolerance, using the current amount as a percentage.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Ulps">
            <summary>
            Returns a new tolerance, using the current amount in Ulps.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Days">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of days.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Hours">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of hours.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Minutes">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of minutes.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Seconds">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of seconds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Milliseconds">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of milliseconds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Ticks">
            <summary>
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of clock ticks.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.IsEmpty">
            <summary>
            Returns true if the current tolerance is empty.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.TypeConstraint">
            <summary>
            TypeConstraint is the abstract base for constraints
            that take a Type as their expected value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.TypeConstraint.expectedType">
            <summary>
            The expected Type used by the constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.TypeConstraint.#ctor(System.Type)">
            <summary>
            Construct a TypeConstraint for a given Type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.TypeConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. TypeConstraints override this method to write
            the name of the type.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactTypeConstraint">
            <summary>
            ExactTypeConstraint is used to test that an object
            is of the exact type provided in the constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.#ctor(System.Type)">
            <summary>
            Construct an ExactTypeConstraint for a given Type
            </summary>
            <param name="type">The expected Type.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.Matches(System.Object)">
            <summary>
            Test that an object is of the exact type specified
            </summary>
            <param name="actual">The actual value.</param>
            <returns>True if the tested object is of the exact type provided, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the description of this constraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to use</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExceptionTypeConstraint">
            <summary>
            ExceptionTypeConstraint is a special version of ExactTypeConstraint
            used to provided detailed info about the exception thrown in
            an error message.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExceptionTypeConstraint.#ctor(System.Type)">
            <summary>
            Constructs an ExceptionTypeConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExceptionTypeConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. Overriden to write additional information 
            in the case of an Exception.
            </summary>
            <param name="writer">The MessageWriter to use</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.InstanceOfTypeConstraint">
            <summary>
            InstanceOfTypeConstraint is used to test that an object
            is of the same type provided or derived from it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.#ctor(System.Type)">
            <summary>
            Construct an InstanceOfTypeConstraint for the type provided
            </summary>
            <param name="type">The expected Type</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.Matches(System.Object)">
            <summary>
            Test whether an object is of the specified type or a derived type
            </summary>
            <param name="actual">The object to be tested</param>
            <returns>True if the object is of the provided type or derives from it, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to use</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AssignableFromConstraint">
            <summary>
            AssignableFromConstraint is used to test that an object
            can be assigned from a given Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.#ctor(System.Type)">
            <summary>
            Construct an AssignableFromConstraint for the type provided
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.Matches(System.Object)">
            <summary>
            Test whether an object can be assigned from the specified type
            </summary>
            <param name="actual">The object to be tested</param>
            <returns>True if the object can be assigned a value of the expected Type, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to use</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AssignableToConstraint">
            <summary>
            AssignableToConstraint is used to test that an object
            can be assigned to a given Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableToConstraint.#ctor(System.Type)">
            <summary>
            Construct an AssignableToConstraint for the type provided
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableToConstraint.Matches(System.Object)">
            <summary>
            Test whether an object can be assigned to the specified type
            </summary>
            <param name="actual">The object to be tested</param>
            <returns>True if the object can be assigned a value of the expected Type, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableToConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to use</param>
        </member>
        <member name="T:NUnit.Framework.AssertionException">
            <summary>
            Thrown when an assertion failed.
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.String)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.IgnoreException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.String)">
            <param name="message"></param>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.InconclusiveException">
            <summary>
            Thrown when a test executes inconclusively.
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.InconclusiveException.#ctor(System.String)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.InconclusiveException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.InconclusiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.SuccessException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SuccessException.#ctor(System.String)">
            <param name="message"></param>
        </member>
        <member name="M:NUnit.Framework.SuccessException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.SuccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.INUnitEqualityComparer`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NUnit.Framework.INUnitEqualityComparer`1.AreEqual(`0,`0,NUnit.Framework.Constraints.Tolerance@)">
            <summary>
            Compares two objects of a given Type for equality within a tolerance
            </summary>
            <param name="x">The first object to compare</param>
            <param name="y">The second object to compare</param>
            <param name="tolerance">The tolerance to use in the comparison</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.ActionTargets">
            <summary>
            The different targets a test action attribute can be applied to
            </summary>
        </member>
        <member name="F:NUnit.Framework.ActionTargets.Default">
            <summary>
            Default target, which is determined by where the action attribute is attached
            </summary>
        </member>
        <member name="F:NUnit.Framework.ActionTargets.Test">
            <summary>
            Target a individual test case
            </summary>
        </member>
        <member name="F:NUnit.Framework.ActionTargets.Suite">
            <summary>
            Target a suite of test cases
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestDelegate">
            <summary>
            Delegate used by tests that execute code and
            capture any thrown exception.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Assert">
            <summary>
            The Assert class contains a collection of static methods that
            implement the most common assertions used in NUnit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.#ctor">
            <summary>
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assert.AssertDoublesAreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Helper for Assert.AreEqual(double expected, double actual, ...)
            allowing code generation to work consistently.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass(System.String,System.Object[])">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass(System.String)">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/> with the message and arguments 
            that are passed in. This is used by the other Assert functions. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/> with the message that is 
            passed in. This is used by the other Assert functions. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/>. 
            This is used by the other Assert functions. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/> with the message and arguments 
            that are passed in.  This causes the test to be reported as ignored.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/> with the message that is 
            passed in. This causes the test to be reported as ignored. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/>. 
            This causes the test to be reported as ignored. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/> with the message and arguments 
            that are passed in.  This causes the test to be reported as inconclusive.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.InconclusiveException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/> with the message that is 
            passed in. This causes the test to be reported as inconclusive. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.InconclusiveException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/>. 
            This causes the test to be reported as Inconclusive. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A ThrowsConstraint used in the test</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ByVal(System.Object,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            Used as a synonym for That in rare cases where a private setter 
            causes a Visual Basic compilation error.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ByVal(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            Used as a synonym for That in rare cases where a private setter 
            causes a Visual Basic compilation error.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ByVal(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. 
            Used as a synonym for That in rare cases where a private setter 
            causes a Visual Basic compilation error.
            </summary>
            <remarks>
            This method is provided for use by VB developers needing to test
            the value of properties with private setters.
            </remarks>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">Type of the expected exception</typeparam>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">Type of the expected exception</typeparam>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="T">Type of the expected exception</typeparam>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception when called
            and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws an exception when called
            and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception when called
            and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <typeparam name="T">The expected Exception Type</typeparam>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <typeparam name="T">The expected Exception Type</typeparam>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <typeparam name="T">The expected Exception Type</typeparam>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate does not throw an exception
            </summary>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate,System.String)">
            <summary>
            Verifies that a delegate does not throw an exception.
            </summary>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate does not throw an exception.
            </summary>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Boolean)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Null(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Null(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Null(System.Object)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double,System.String)">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double)">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Nullable{System.Double},System.String,System.Object[])">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Nullable{System.Double},System.String)">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Nullable{System.Double})">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is empty - that is equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String,System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is not empty - that is not equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String,System.String)">
            <summary>
            Assert that a string is not empty - that is not equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String)">
            <summary>
            Assert that a string is not empty - that is not equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is not empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Assert that an array, list or other collection is not empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable)">
            <summary>
            Assert that an array, list or other collection is not empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNullOrEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is either null or equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNullOrEmpty(System.String,System.String)">
            <summary>
            Assert that a string is either null or equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNullOrEmpty(System.String)">
            <summary>
            Assert that a string is either null or equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNullOrEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is not null or empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNullOrEmpty(System.String,System.String)">
            <summary>
            Assert that a string is not null or empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNullOrEmpty(System.String)">
            <summary>
            Assert that a string is not null or empty
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <typeparam name="T">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom``1(System.Object,System.String)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <typeparam name="T">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom``1(System.Object)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <typeparam name="T">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <typeparam name="T">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom``1(System.Object,System.String)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <typeparam name="T">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom``1(System.Object)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <typeparam name="T">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf(System.Type,System.Object)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <typeparam name="T">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf``1(System.Object,System.String)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <typeparam name="T">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf``1(System.Object)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <typeparam name="T">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf(System.Type,System.Object)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <typeparam name="T">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf``1(System.Object,System.String)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <typeparam name="T">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf``1(System.Object)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <typeparam name="T">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that two values are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double,System.String)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double)">
            <summary>
            Verifies that two values are not equal. If they are equal, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String)">
            <summary>
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object)">
            <summary>
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Double,System.Double)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Single,System.Single)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Double,System.Double)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Single,System.Single)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that an object is contained in a list.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The list to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that an object is contained in a list.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The list to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.ICollection)">
            <summary>
            Asserts that an object is contained in a list.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The list to be examined</param>
        </member>
        <member name="P:NUnit.Framework.Assert.Counter">
            <summary>
            Gets the number of assertions executed so far and 
            resets the counter to zero.
            </summary>
        </member>
        <member name="T:NUnit.Framework.AssertionHelper">
            <summary>
            AssertionHelper is an optional base class for user tests,
            allowing the use of shorter names for constraints and
            asserts and avoiding conflict with the definition of 
            <see cref="T:NUnit.Framework.Is"/>, from which it inherits much of its
            behavior, in certain mock object frameworks.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Object,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to Assert.That
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to Assert.That.
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to Assert.That
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0@,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to Assert.That.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to Assert.That.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically Assert.That.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A ThrowsConstraint used in the test</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Map(System.Collections.ICollection)">
            <summary>
            Returns a ListMapper based on a collection.
            </summary>
            <param name="original">The original collection</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Assume">
            <summary>
            Provides static methods to express the assumptions
            that must be met for a test to give a meaningful
            result. If an assumption is not met, the test
            should produce an inconclusive result.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assume.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assume.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(NUnit.Framework.Constraints.ActualValueDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String)">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the 
            method throws an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A ThrowsConstraint used in the test</param>
        </member>
        <member name="T:NUnit.Framework.CollectionAssert">
            <summary>
            A set of Assert methods operationg on one or more collections
            </summary>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.IEnumerable,System.Type)">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.IEnumerable,System.Type,System.String)">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.IEnumerable,System.Type,System.String,System.Object[])">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.IEnumerable)">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.IEnumerable)">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.IEnumerable,System.String)">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,System.String)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,System.String)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Contains(System.Collections.IEnumerable,System.Object)">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Contains(System.Collections.IEnumerable,System.Object,System.String)">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Contains(System.Collections.IEnumerable,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.IEnumerable,System.Object)">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.IEnumerable,System.Object,System.String)">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.IEnumerable,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that superset is not a subject of subset.
            </summary>
            <param name="subset">The IEnumerable superset to be considered</param>
            <param name="superset">The IEnumerable subset to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that superset is not a subject of subset.
            </summary>
            <param name="subset">The IEnumerable superset to be considered</param>
            <param name="superset">The IEnumerable subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that superset is not a subject of subset.
            </summary>
            <param name="subset">The IEnumerable superset to be considered</param>
            <param name="superset">The IEnumerable subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that superset is a subset of subset.
            </summary>
            <param name="subset">The IEnumerable superset to be considered</param>
            <param name="superset">The IEnumerable subset to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that superset is a subset of subset.
            </summary>
            <param name="subset">The IEnumerable superset to be considered</param>
            <param name="superset">The IEnumerable subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that superset is a subset of subset.
            </summary>
            <param name="subset">The IEnumerable superset to be considered</param>
            <param name="superset">The IEnumerable subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.IEnumerable)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.String)">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable)">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="comparer">A custom comparer to perform the comparisons</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.Collections.IComparer,System.String)">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="comparer">A custom comparer to perform the comparisons</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="comparer">A custom comparer to perform the comparisons</param>
        </member>
        <member name="T:NUnit.Framework.Contains">
            <summary>
            Static helper class used in the constraint-based syntax
            </summary>
        </member>
        <member name="M:NUnit.Framework.Contains.Substring(System.String)">
            <summary>
            Creates a new SubstringConstraint
            </summary>
            <param name="substring">The value of the substring</param>
            <returns>A SubstringConstraint</returns>
        </member>
        <member name="M:NUnit.Framework.Contains.Item(System.Object)">
            <summary>
            Creates a new CollectionContainsConstraint.
            </summary>
            <param name="item">The item that should be found.</param>
            <returns>A new CollectionContainsConstraint</returns>
        </member>
        <member name="T:NUnit.Framework.DirectoryAssert">
            <summary>
            Summary description for DirectoryAssert
            </summary>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.#ctor">
            <summary>
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String)">
            <summary>
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreEqual(System.String,System.String,System.String,System.Object[])">
            <summary>
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory path string containing the value that is expected</param>
            <param name="actual">A directory path string containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreEqual(System.String,System.String,System.String)">
            <summary>
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory path string containing the value that is expected</param>
            <param name="actual">A directory path string containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreEqual(System.String,System.String)">
            <summary>
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory path string containing the value that is expected</param>
            <param name="actual">A directory path string containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreNotEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Asserts that two directories are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreNotEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String)">
            <summary>
            Asserts that two directories are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreNotEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Asserts that two directories are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreNotEqual(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two directories are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory path string containing the value that is expected</param>
            <param name="actual">A directory path string containing the actual value</param>
            <param name="message">The message to display if directories are equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreNotEqual(System.String,System.String,System.String)">
            <summary>
            Asserts that two directories are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory path string containing the value that is expected</param>
            <param name="actual">A directory path string containing the actual value</param>
            <param name="message">The message to display if directories are equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreNotEqual(System.String,System.String)">
            <summary>
            Asserts that two directories are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory path string containing the value that is expected</param>
            <param name="actual">A directory path string containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsEmpty(System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Asserts that the directory is empty. If it is not empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsEmpty(System.IO.DirectoryInfo,System.String)">
            <summary>
            Asserts that the directory is empty. If it is not empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsEmpty(System.IO.DirectoryInfo)">
            <summary>
            Asserts that the directory is empty. If it is not empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsEmpty(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the directory is empty. If it is not empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsEmpty(System.String,System.String)">
            <summary>
            Asserts that the directory is empty. If it is not empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsEmpty(System.String)">
            <summary>
            Asserts that the directory is empty. If it is not empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotEmpty(System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Asserts that the directory is not empty. If it is empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotEmpty(System.IO.DirectoryInfo,System.String)">
            <summary>
            Asserts that the directory is not empty. If it is empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotEmpty(System.IO.DirectoryInfo)">
            <summary>
            Asserts that the directory is not empty. If it is empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotEmpty(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the directory is not empty. If it is empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotEmpty(System.String,System.String)">
            <summary>
            Asserts that the directory is not empty. If it is empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="message">The message to display if directories are not equal</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotEmpty(System.String)">
            <summary>
            Asserts that the directory is not empty. If it is empty
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsWithin(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Asserts that path contains actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsWithin(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String)">
            <summary>
            Asserts that path contains actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsWithin(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Asserts that path contains actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsWithin(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that path contains actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsWithin(System.String,System.String,System.String)">
            <summary>
            Asserts that path contains actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsWithin(System.String,System.String)">
            <summary>
            Asserts that path contains actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotWithin(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Asserts that path does not contain actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotWithin(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String)">
            <summary>
            Asserts that path does not contain actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotWithin(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Asserts that path does not contain actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotWithin(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that path does not contain actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotWithin(System.String,System.String,System.String)">
            <summary>
            Asserts that path does not contain actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
            <param name="message">The message to display if directory is not within the path</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.IsNotWithin(System.String,System.String)">
            <summary>
            Asserts that path does not contain actual as a subdirectory or
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="directory">A directory to search</param>
            <param name="actual">sub-directory asserted to exist under directory</param>
        </member>
        <member name="T:NUnit.Framework.FileAssert">
            <summary>
            Summary description for FileAssert.
            </summary>
        </member>
        <member name="M:NUnit.Framework.FileAssert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.#ctor">
            <summary>
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.Stream,System.IO.Stream,System.String,System.Object[])">
            <summary>
            Verifies that two Streams are equal.  Two Streams are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Verifies that two Streams are equal.  Two Streams are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.Stream,System.IO.Stream)">
            <summary>
            Verifies that two Streams are equal.  Two Streams are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Object[])">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.String,System.String,System.String,System.Object[])">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.String,System.String,System.String)">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.String,System.String)">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.Stream,System.IO.Stream,System.String,System.Object[])">
            <summary>
            Asserts that two Streams are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
            <param name="message">The message to be displayed when the two Stream are the same.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Asserts that two Streams are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
            <param name="message">The message to be displayed when the Streams are the same.</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.Stream,System.IO.Stream)">
            <summary>
            Asserts that two Streams are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Object[])">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.String,System.String,System.String)">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.String,System.String)">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
        </member>
        <member name="T:NUnit.Framework.GlobalSettings">
            <summary>
            GlobalSettings is a place for setting default values used
            by the framework in performing asserts.
            </summary>
        </member>
        <member name="F:NUnit.Framework.GlobalSettings.DefaultFloatingPointTolerance">
            <summary>
            Default tolerance for floating point equality
            </summary>
        </member>
        <member name="T:NUnit.Framework.Has">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Exactly(System.Int32)">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Member(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="T:NUnit.Framework.IExpectException">
            <summary>
            Interface implemented by a user fixture in order to
            validate any expected exceptions. It is only called
            for test methods marked with the ExpectedException
            attribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IExpectException.HandleException(System.Exception)">
            <summary>
            Method to handle an expected exception
            </summary>
            <param name="ex">The exception to be handled</param>
        </member>
        <member name="T:NUnit.Framework.Is">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InstanceOfType(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InstanceOfType``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringMatching(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the Regex pattern supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SamePath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same as an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SubPath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SamePathOrUnder(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InRange``1(``0,``0)">
            <summary>
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Positive">
            <summary>
            Returns a constraint that tests for a positive value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Negative">
            <summary>
            Returns a constraint that tests for a negative value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Unique">
            <summary>
            Returns a constraint that tests whether a collection 
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.BinarySerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in binary format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.XmlSerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in xml format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="T:NUnit.Framework.Iz">
            <summary>
            The Iz class is a synonym for Is intended for use in VB,
            which regards Is as a keyword.
            </summary>
        </member>
        <member name="T:NUnit.Framework.List">
            <summary>
            The List class is a helper class with properties and methods
            that supply a number of constraints used with lists and collections.
            </summary>
        </member>
        <member name="M:NUnit.Framework.List.Map(System.Collections.ICollection)">
            <summary>
            List.Map returns a ListMapper, which can be used to map
            the original collection to another collection.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.ListMapper">
            <summary>
            ListMapper is used to transform a collection used as an actual argument
            producing another collection to be used in the assertion.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ListMapper.#ctor(System.Collections.ICollection)">
            <summary>
            Construct a ListMapper based on a collection
            </summary>
            <param name="original">The collection to be transformed</param>
        </member>
        <member name="M:NUnit.Framework.ListMapper.Property(System.String)">
            <summary>
            Produces a collection containing all the values of a property
            </summary>
            <param name="name">The collection of property values</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Randomizer">
            <summary>
            Randomizer returns a set of random values in a repeatable
            way, to allow re-running of tests if necessary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Randomizer.GetRandomizer(System.Reflection.MemberInfo)">
            <summary>
            Get a randomizer for a particular member, returning
            one that has already been created if it exists.
            This ensures that the same values are generated
            each time the tests are reloaded.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Randomizer.GetRandomizer(System.Reflection.ParameterInfo)">
            <summary>
            Get a randomizer for a particular parameter, returning
            one that has already been created if it exists.
            This ensures that the same values are generated
            each time the tests are reloaded.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Randomizer.#ctor">
            <summary>
            Construct a randomizer using a random seed
            </summary>
        </member>
        <member name="M:NUnit.Framework.Randomizer.#ctor(System.Int32)">
            <summary>
            Construct a randomizer using a specified seed
            </summary>
        </member>
        <member name="M:NUnit.Framework.Randomizer.GetDoubles(System.Int32)">
            <summary>
            Return an array of random doubles between 0.0 and 1.0.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Randomizer.GetDoubles(System.Double,System.Double,System.Int32)">
            <summary>
            Return an array of random doubles with values in a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Randomizer.GetInts(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return an array of random ints with values in a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Randomizer.RandomSeed">
            <summary>
            Get a random seed for use in creating a randomizer.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SpecialValue">
            <summary>
            The SpecialValue enum is used to represent TestCase arguments
            that cannot be used as arguments to an Attribute.
            </summary>
        </member>
        <member name="F:NUnit.Framework.SpecialValue.Null">
            <summary>
            Null represents a null value, which cannot be used as an 
            argument to an attriute under .NET 1.x
            </summary>
        </member>
        <member name="T:NUnit.Framework.StringAssert">
            <summary>
            Basic Asserts on strings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotContain(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string is not found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotContain(System.String,System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotContain(System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String,System.String)">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String)">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotStartWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not start with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotStartWith(System.String,System.String,System.String)">
            <summary>
            Asserts that a string does not start with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotStartWith(System.String,System.String)">
            <summary>
            Asserts that a string does not start with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String,System.String)">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String)">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotEndWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not end with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotEndWith(System.String,System.String,System.String)">
            <summary>
            Asserts that a string does not end with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotEndWith(System.String,System.String)">
            <summary>
            Asserts that a string does not end with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String,System.String)">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String)">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreNotEqualIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two strings are not equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreNotEqualIgnoringCase(System.String,System.String,System.String)">
            <summary>
            Asserts that two strings are Notequal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreNotEqualIgnoringCase(System.String,System.String)">
            <summary>
            Asserts that two strings are not equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.IsMatch(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string matches an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be matched</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.IsMatch(System.String,System.String,System.String)">
            <summary>
            Asserts that a string matches an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be matched</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.IsMatch(System.String,System.String)">
            <summary>
            Asserts that a string matches an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be matched</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotMatch(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not match an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be used</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotMatch(System.String,System.String,System.String)">
            <summary>
            Asserts that a string does not match an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be used</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotMatch(System.String,System.String)">
            <summary>
            Asserts that a string does not match an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be used</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="T:NUnit.Framework.TestCaseData">
            <summary>
            The TestCaseData class represents a set of arguments
            and other parameter info to be used for a parameterized
            test case. It provides a number of instance modifiers
            for use in initializing the test case.
            
            Note: Instance modifiers are getters that return
            the same instance after modifying it's state.
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.arguments">
            <summary>
            The argument list to be provided to the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.expectedResult">
            <summary>
            The expected result to be returned
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.hasExpectedResult">
            <summary>
            Set to true if this has an expected result
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.expectedExceptionType">
            <summary>
             The expected exception Type
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.expectedExceptionName">
            <summary>
            The FullName of the expected exception
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.testName">
            <summary>
            The name to be used for the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.description">
            <summary>
            The description of the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.properties">
            <summary>
            A dictionary of properties, used to add information
            to tests without requiring the class to change.
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.isIgnored">
            <summary>
            If true, indicates that the test case is to be ignored
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.isExplicit">
            <summary>
            If true, indicates that the test case is marked explicit
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestCaseData.ignoreReason">
            <summary>
            The reason for ignoring a test case
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:TestCaseData"/> class.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TestCaseData"/> class.
            </summary>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TestCaseData"/> class.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TestCaseData"/> class.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Returns(System.Object)">
            <summary>
            Sets the expected result for the test
            </summary>
            <param name="result">The expected result</param>
            <returns>A modified TestCaseData</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Throws(System.Type)">
            <summary>
            Sets the expected exception type for the test
            </summary>
            <param name="exceptionType">Type of the expected exception.</param>
            <returns>The modified TestCaseData instance</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Throws(System.String)">
            <summary>
            Sets the expected exception type for the test
            </summary>
            <param name="exceptionName">FullName of the expected exception.</param>
            <returns>The modified TestCaseData instance</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetName(System.String)">
            <summary>
            Sets the name of the test case
            </summary>
            <returns>The modified TestCaseData instance</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetDescription(System.String)">
            <summary>
            Sets the description for the test case
            being constructed.
            </summary>
            <param name="description">The description.</param>
            <returns>The modified TestCaseData instance.</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetCategory(System.String)">
            <summary>
            Applies a category to the test
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.String)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.Int32)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.Double)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Ignore">
            <summary>
            Ignores this TestCase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Ignore(System.String)">
            <summary>
            Ignores this TestCase, specifying the reason.
            </summary>
            <param name="reason">The reason.</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.MakeExplicit">
            <summary>
            Marks this TestCase as Explicit
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.MakeExplicit(System.String)">
            <summary>
            Marks this TestCase as Explicit, specifying the reason.
            </summary>
            <param name="reason">The reason.</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Arguments">
            <summary>
            Gets the argument list to be provided to the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Result">
            <summary>
            Gets the expected result
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.HasExpectedResult">
            <summary>
            Returns true if the result has been set
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.ExpectedException">
            <summary>
             Gets the expected exception Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.ExpectedExceptionName">
            <summary>
            Gets the FullName of the expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.TestName">
            <summary>
            Gets the name to be used for the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Description">
            <summary>
            Gets the description of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Ignored">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Framework.ITestCaseData"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Explicit">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Framework.ITestCaseData"/> is explicit.
            </summary>
            <value><c>true</c> if explicit; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.IgnoreReason">
            <summary>
            Gets the ignore reason.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Categories">
            <summary>
            Gets a list of categories associated with this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseData.Properties">
            <summary>
            Gets the property dictionary for this test
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestContext">
            <summary>
            Provide the context information of the current test
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.#ctor(System.Collections.IDictionary)">
            <summary>
            Constructs a TestContext using the provided context dictionary
            </summary>
            <param name="context">A context dictionary</param>
        </member>
        <member name="P:NUnit.Framework.TestContext.CurrentContext">
            <summary>
            Get the current test context. This is created
            as needed. The user may save the context for
            use within a test, but it should not be used
            outside the test for which it is created.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.Test">
            <summary>
            Gets a TestAdapter representing the currently executing test in this context.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.Result">
            <summary>
            Gets a ResultAdapter representing the current result for the test 
            executing in this context.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestDirectory">
            <summary>
            Gets the directory containing the current test assembly.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.WorkDirectory">
            <summary>
            Gets the directory to be used for outputing files created
            by this test run.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestContext.TestAdapter">
            <summary>
            TestAdapter adapts a Test for consumption by
            the user test code.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.TestAdapter.#ctor(System.Collections.IDictionary)">
            <summary>
            Constructs a TestAdapter for this context
            </summary>
            <param name="context">The context dictionary</param>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.Name">
            <summary>
            The name of the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.FullName">
            <summary>
            The FullName of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.Properties">
            <summary>
            The properties of the test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestContext.ResultAdapter">
            <summary>
            ResultAdapter adapts a TestResult for consumption by
            the user test code.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.ResultAdapter.#ctor(System.Collections.IDictionary)">
            <summary>
            Construct a ResultAdapter for a context
            </summary>
            <param name="context">The context holding the result</param>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.State">
            <summary>
            The TestState of current test. This maps to the ResultState
            used in nunit.core and is subject to change in the future.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.Status">
            <summary>
            The TestStatus of current test. This enum will be used
            in future versions of NUnit and so is to be preferred
            to the TestState value.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestDetails">
            <summary>
            Provides details about a test
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestDetails.#ctor(System.Object,System.Reflection.MethodInfo,System.String,System.String,System.Boolean)">
            <summary>
             Creates an instance of TestDetails
            </summary>
            <param name="fixture">The fixture that the test is a member of, if available.</param>
            <param name="method">The method that implements the test, if available.</param>
            <param name="fullName">The full name of the test.</param>
            <param name="type">A string representing the type of test, e.g. "Test Case".</param>
            <param name="isSuite">Indicates if the test represents a suite of tests.</param>
        </member>
        <member name="P:NUnit.Framework.TestDetails.Fixture">
            <summary>
             The fixture that the test is a member of, if available.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestDetails.Method">
            <summary>
            The method that implements the test, if available.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestDetails.FullName">
            <summary>
            The full name of the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestDetails.Type">
            <summary>
            A string representing the type of test, e.g. "Test Case".
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestDetails.IsSuite">
            <summary>
            Indicates if the test represents a suite of tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestState">
            <summary>
            The ResultState enum indicates the result of running a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestState.Inconclusive">
            <summary>
            The result is inconclusive
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestState.NotRunnable">
            <summary>
            The test was not runnable.
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestState.Skipped">
            <summary>
            The test has been skipped. 
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestState.Ignored">
            <summary>
            The test has been ignored.
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestState.Success">
            <summary>
            The test succeeded
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestState.Failure">
            <summary>
            The test failed
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestState.Error">
            <summary>
            The test encountered an unexpected exception
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestState.Cancelled">
            <summary>
            The test was cancelled by the user
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestStatus">
            <summary>
            The TestStatus enum indicates the result of running a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestStatus.Inconclusive">
            <summary>
            The test was inconclusive
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestStatus.Skipped">
            <summary>
            The test has skipped 
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestStatus.Passed">
            <summary>
            The test succeeded
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestStatus.Failed">
            <summary>
            The test failed
            </summary>
        </member>
        <member name="T:NUnit.Framework.Text">
            <summary>
            Helper class with static methods used to supply constraints
            that operate on strings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.Contains(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.DoesNotContain(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.StartsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.DoesNotStartWith(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.EndsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.DoesNotEndWith(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.Matches(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the Regex pattern supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Text.DoesNotMatch(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value matches the pattern supplied as an argument.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Text.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TextMessageWriter">
            <summary>
            TextMessageWriter writes constraint descriptions and messages
            in displayable form as a text stream. It tailors the display
            of individual message components to form the standard message
            format of NUnit assertion failure messages.
            </summary>
        </member>
        <member name="F:NUnit.Framework.TextMessageWriter.Pfx_Expected">
            <summary>
            Prefix used for the expected value line of a message
            </summary>
        </member>
        <member name="F:NUnit.Framework.TextMessageWriter.Pfx_Actual">
            <summary>
            Prefix used for the actual value line of a message
            </summary>
        </member>
        <member name="F:NUnit.Framework.TextMessageWriter.PrefixLength">
            <summary>
            Length of a message prefix
            </summary>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.#ctor">
            <summary>
            Construct a TextMessageWriter
            </summary>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.#ctor(System.String,System.Object[])">
            <summary>
            Construct a TextMessageWriter, specifying a user message
            and optional formatting arguments.
            </summary>
            <param name="userMessage"></param>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteMessageLine(System.Int32,System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message, at a givel 
            indentation level.
            </summary>
            <param name="level">The indentation level of the message</param>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.DisplayDifferences(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Display Expected and Actual lines for a constraint. This
            is called by MessageWriter's default implementation of 
            WriteMessageTo and provides the generic two-line display. 
            </summary>
            <param name="constraint">The constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.DisplayDifferences(System.Object,System.Object)">
            <summary>
            Display Expected and Actual lines for given values. This
            method may be called by constraints that need more control over
            the display of actual and expected values than is provided
            by the default implementation.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.DisplayDifferences(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Display Expected and Actual lines for given values, including
            a tolerance value on the expected line.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.DisplayStringDifferences(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Display the expected and actual string values on separate lines.
            If the mismatch parameter is >=0, an additional line is displayed
            line containing a caret that points to the mismatch point.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual string value</param>
            <param name="mismatch">The point at which the strings don't match or -1</param>
            <param name="ignoreCase">If true, case is ignored in string comparisons</param>
            <param name="clipping">If true, clip the strings to fit the max line length</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteConnector(System.String)">
            <summary>
            Writes the text for a connector.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WritePredicate(System.String)">
            <summary>
            Writes the text for a predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteModifier(System.String)">
            <summary>
            Write the text for a modifier.
            </summary>
            <param name="modifier">The modifier.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteExpectedValue(System.Object)">
            <summary>
            Writes the text for an expected value.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteActualValue(System.Object)">
            <summary>
            Writes the text for an actual value.
            </summary>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteValue(System.Object)">
            <summary>
            Writes the text for a generalized value.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteCollectionElements(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            Writes the text for a collection value,
            starting at a particular point, to a max length
            </summary>
            <param name="collection">The collection containing elements to write.</param>
            <param name="start">The starting point of the elements to write</param>
            <param name="max">The maximum number of elements to write</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteExpectedLine(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Write the generic 'Expected' line for a constraint
            </summary>
            <param name="constraint">The constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteExpectedLine(System.Object)">
            <summary>
            Write the generic 'Expected' line for a given value
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteExpectedLine(System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Write the generic 'Expected' line for a given value
            and tolerance.
            </summary>
            <param name="expected">The expected value</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteActualLine(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Write the generic 'Actual' line for a constraint
            </summary>
            <param name="constraint">The constraint for which the actual value is to be written</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteActualLine(System.Object)">
            <summary>
            Write the generic 'Actual' line for a given value
            </summary>
            <param name="actual">The actual value causing a failure</param>
        </member>
        <member name="P:NUnit.Framework.TextMessageWriter.MaxLineLength">
            <summary>
            Gets or sets the maximum line length for this writer
            </summary>
        </member>
        <member name="T:NUnit.Framework.Throws">
            <summary>
            Helper class with properties and methods that supply
            constraints that operate on exceptions.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.TypeOf(System.Type)">
            <summary>
            Creates a constraint specifying the exact type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.TypeOf``1">
            <summary>
            Creates a constraint specifying the exact type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.InstanceOf(System.Type)">
            <summary>
            Creates a constraint specifying the type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.InstanceOf``1">
            <summary>
            Creates a constraint specifying the type of exception expected
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.Exception">
            <summary>
            Creates a constraint specifying an expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.InnerException">
            <summary>
            Creates a constraint specifying an exception with a given InnerException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.TargetInvocationException">
            <summary>
            Creates a constraint specifying an expected TargetInvocationException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.ArgumentException">
            <summary>
            Creates a constraint specifying an expected TargetInvocationException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.InvalidOperationException">
            <summary>
            Creates a constraint specifying an expected TargetInvocationException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.Nothing">
            <summary>
            Creates a constraint specifying that no exception is thrown
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter">
            <summary>
            Abstract adapter for the <see cref="T:System.Collections.IDictionary"/> support
            needed by the <see cref="T:Castle.Components.DictionaryAdapter.DictionaryAdapterFactory"/>
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only. </exception>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapter.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.AbstractDictionaryAdapterVisitor">
            <summary>
            Abstract implementation of <see cref="T:Castle.Components.DictionaryAdapter.IDictionaryAdapterVisitor"/>.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryAdapterVisitor">
            <summary>
            Conract for traversing a <see cref="T:Castle.Components.DictionaryAdapter.IDictionaryAdapter"/>.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.ComponentAttribute">
            <summary>
            Identifies a property should be represented as a nested component.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.DictionaryBehaviorAttribute">
            <summary>
            Assigns a specific dictionary key.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryBehavior">
            <summary>
            Defines the contract for customizing dictionary access.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryBehavior.Copy">
            <summary>
            Copies the dictionary behavior.
            </summary>
            <returns>null if should not be copied.  Otherwise copy.</returns>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.IDictionaryBehavior.ExecutionOrder">
            <summary>
            Determines relative order to apply related behaviors.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryKeyBuilder">
            <summary>
            Defines the contract for building typed dictionary keys.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryKeyBuilder.GetKey(Castle.Components.DictionaryAdapter.IDictionaryAdapter,System.String,Castle.Components.DictionaryAdapter.PropertyDescriptor)">
            <summary>
            Builds the specified key.
            </summary>
            <param name="dictionaryAdapter">The dictionary adapter.</param>
            <param name="key">The current key.</param>
            <param name="property">The property.</param>
            <returns>The updated key</returns>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryPropertyGetter">
            <summary>
            Defines the contract for retrieving dictionary values.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryPropertyGetter.GetPropertyValue(Castle.Components.DictionaryAdapter.IDictionaryAdapter,System.String,System.Object,Castle.Components.DictionaryAdapter.PropertyDescriptor,System.Boolean)">
            <summary>
            Gets the effective dictionary value.
            </summary>
            <param name="dictionaryAdapter">The dictionary adapter.</param>
            <param name="key">The key.</param>
            <param name="storedValue">The stored value.</param>
            <param name="property">The property.</param>
            <param name="ifExists">true if return only existing.</param>
            <returns>The effective property value.</returns>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryPropertySetter">
            <summary>
            Defines the contract for updating dictionary values.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryPropertySetter.SetPropertyValue(Castle.Components.DictionaryAdapter.IDictionaryAdapter,System.String,System.Object@,Castle.Components.DictionaryAdapter.PropertyDescriptor)">
            <summary>
            Sets the stored dictionary value.
            </summary>
            <param name="dictionaryAdapter">The dictionary adapter.</param>
            <param name="key">The key.</param>
            <param name="value">The stored value.</param>
            <param name="property">The property.</param>
            <returns>true if the property should be stored.</returns>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.ComponentAttribute.NoPrefix">
            <summary>
            Applies no prefix.
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.ComponentAttribute.Prefix">
            <summary>
            Gets or sets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.DictionaryAdapterAttribute">
            <summary>
            Identifies the dictionary adapter types.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.FetchAttribute">
            <summary>
            Identifies an interface or property to be pre-fetched.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.FetchAttribute.#ctor">
            <summary>
            Instructs fetching to occur.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.FetchAttribute.#ctor(System.Boolean)">
            <summary>
            Instructs fetching according to <paramref name="fetch"/>
            </summary>
            <param name="fetch"></param>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.FetchAttribute.Fetch">
            <summary>
            Gets whether or not fetching should occur.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.GroupAttribute">
            <summary>
            Assigns a property to a group.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.GroupAttribute.#ctor(System.Object)">
            <summary>
            Constructs a group assignment.
            </summary>
            <param name="group">The group name.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.GroupAttribute.#ctor(System.Object[])">
            <summary>
            Constructs a group assignment.
            </summary>
            <param name="group">The group name.</param>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.GroupAttribute.Group">
            <summary>
            Gets the group the property is assigned to.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IfExistsAttribute">
            <summary>
            Suppresses any on-demand behaviors.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.KeyAttribute">
            <summary>
            Assigns a specific dictionary key.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.KeyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.DictionaryAdapter.KeyAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.KeyAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.DictionaryAdapter.KeyAttribute"/> class.
            </summary>
            <param name="keys">The compound key.</param>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.KeyPrefixAttribute">
            <summary>
            Assigns a prefix to the keyed properties of an interface.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.KeyPrefixAttribute.#ctor">
            <summary>
            Initializes a default instance of the <see cref="T:Castle.Components.DictionaryAdapter.KeyPrefixAttribute"/> class.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.KeyPrefixAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.DictionaryAdapter.KeyPrefixAttribute"/> class.
            </summary>
            <param name="keyPrefix">The prefix for the keyed properties of the interface.</param>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.KeyPrefixAttribute.KeyPrefix">
            <summary>
            Gets the prefix key added to the properties of the interface.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.KeySubstitutionAttribute">
            <summary>
            Substitutes part of key with another string.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.KeySubstitutionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.DictionaryAdapter.KeySubstitutionAttribute"/> class.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.MultiLevelEditAttribute">
            <summary>
            Requests support for multi-level editing.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryInitializer">
            <summary>
             Contract for dictionary initialization.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryInitializer.Initialize(Castle.Components.DictionaryAdapter.IDictionaryAdapter,System.Object[])">
            <summary>
            Performs any initialization of the <see cref="T:Castle.Components.DictionaryAdapter.IDictionaryAdapter"/>
            </summary>
            <param name="dictionaryAdapter">The dictionary adapter.</param>
            <param name="behaviors">The dictionary behaviors.</param>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.NewGuidAttribute">
            <summary>
            Generates a new GUID on demand.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.OnDemandAttribute">
            <summary>
            Support for on-demand value resolution.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.PropagateNotificationsAttribute">
            <summary>
            Suppress property change notifications.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.ReferenceAttribute">
            <summary>
            Specifies assignment by reference rather than by copying.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.RemoveIfAttribute">
            <summary>
            Removes a property if matches value.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.ICondition">
            <summary>
            Contract for value matching.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.RemoveIfEmptyAttribute">
            <summary>
            Removes a property if null or empty string, guid or collection.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.StringFormatAttribute">
            <summary>
            Provides simple string formatting from existing properties.
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.StringFormatAttribute.Format">
            <summary>
            Gets the string format.
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.StringFormatAttribute.Properties">
            <summary>
            Gets the format properties.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.StringListAttribute">
            <summary>
            Identifies a property should be represented as a delimited string value.
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.StringListAttribute.Separator">
            <summary>
            Gets the separator.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.StringValuesAttribute">
            <summary>
            Converts all properties to strings.
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.StringValuesAttribute.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.SuppressNotificationsAttribute">
            <summary>
            Suppress property change notifications.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IPropertyDescriptorInitializer">
            <summary>
             Contract for property descriptor initialization.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IPropertyDescriptorInitializer.Initialize(Castle.Components.DictionaryAdapter.PropertyDescriptor,System.Object[])">
            <summary>
            Performs any initialization of the <see cref="T:Castle.Components.DictionaryAdapter.PropertyDescriptor"/>
            </summary>
            <param name="propertyDescriptor">The property descriptor.</param>
            <param name="behaviors">The property behaviors.</param>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.TypeKeyPrefixAttribute">
            <summary>
            Assigns a prefix to the keyed properties using the interface name.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.VolatileAttribute">
            <summary>
            Indicates that underlying values are changeable and should not be cached.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.DefaultPropertyGetter">
            <summary>
            Manages conversion between property values.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DefaultPropertyGetter.#ctor(System.ComponentModel.TypeConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.DictionaryAdapter.DefaultPropertyGetter"/> class.
            </summary>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DefaultPropertyGetter.GetPropertyValue(Castle.Components.DictionaryAdapter.IDictionaryAdapter,System.String,System.Object,Castle.Components.DictionaryAdapter.PropertyDescriptor,System.Boolean)">
            <summary>
            Gets the effective dictionary value.
            </summary>
            <param name="dictionaryAdapter">The dictionary adapter.</param>
            <param name="key">The key.</param>
            <param name="storedValue">The stored value.</param>
            <param name="property">The property.</param>
            <param name="ifExists">true if return only existing.</param>
            <returns>The effective property value.</returns>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.DefaultPropertyGetter.ExecutionOrder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryCreate">
            <summary>
            Contract for creating additional Dictionary adapters.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryAdapter">
            <summary>
            Contract for manipulating the Dictionary adapter.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryEdit">
            <summary>
            Contract for editing the Dictionary adapter.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryNotify">
            <summary>
            Contract for managing Dictionary adapter notifications.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryValidate">
            <summary>
            Contract for validating Dictionary adapter.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.DictionaryAdapterFactory">
            <summary>
            Uses Reflection.Emit to expose the properties of a dictionary
            through a dynamic implementation of a typed interface.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryAdapterFactory">
            <summary>
            Defines the contract for building typed dictionary adapters.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryAdapterFactory.GetAdapter``1(System.Collections.IDictionary)">
            <summary>
            Gets a typed adapter bound to the <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <typeparam name="T">The typed interface.</typeparam>
            <param name="dictionary">The underlying source of properties.</param>
            <returns>An implementation of the typed interface bound to the dictionary.</returns>
            <remarks>
            The type represented by T must be an interface with properties.
            </remarks>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryAdapterFactory.GetAdapter(System.Type,System.Collections.IDictionary)">
            <summary>
            Gets a typed adapter bound to the <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="type">The typed interface.</param>
            <param name="dictionary">The underlying source of properties.</param>
            <returns>An implementation of the typed interface bound to the dictionary.</returns>
            <remarks>
            The type represented by T must be an interface with properties.
            </remarks>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryAdapterFactory.GetAdapter(System.Type,System.Collections.IDictionary,Castle.Components.DictionaryAdapter.PropertyDescriptor)">
            <summary>
            Gets a typed adapter bound to the <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="type">The typed interface.</param>
            <param name="dictionary">The underlying source of properties.</param>
            <param name="descriptor">The property descriptor.</param>
            <returns>An implementation of the typed interface bound to the dictionary.</returns>
            <remarks>
            The type represented by T must be an interface with properties.
            </remarks>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryAdapterFactory.GetAdapter``1(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets a typed adapter bound to the <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <typeparam name="T">The typed interface.</typeparam>
            <param name="nameValues">The underlying source of properties.</param>
            <returns>An implementation of the typed interface bound to the namedValues.</returns>
            <remarks>
            The type represented by T must be an interface with properties.
            </remarks>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryAdapterFactory.GetAdapter(System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets a typed adapter bound to the <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="type">The typed interface.</param>
            <param name="nameValues">The underlying source of properties.</param>
            <returns>An implementation of the typed interface bound to the namedValues.</returns>
            <remarks>
            The type represented by T must be an interface with properties.
            </remarks>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryAdapterFactory.GetAdapter``1(System.Xml.XmlNode)">
            <summary>
            Gets a typed adapter bound to the <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <typeparam name="T">The typed interface.</typeparam>
            <param name="xmlNode">The underlying source of properties.</param>
            <returns>An implementation of the typed interface bound to the <see cref="T:System.Xml.XmlNode"/>.</returns>
            <remarks>
            The type represented by T must be an interface with properties.
            </remarks>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryAdapterFactory.GetAdapter(System.Type,System.Xml.XmlNode)">
            <summary>
            Gets a typed adapter bound to the <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="type">The typed interface.</param>
            <param name="xmlNode">The underlying source of properties.</param>
            <returns>An implementation of the typed interface bound to the <see cref="T:System.Xml.XmlNode"/>.</returns>
            <remarks>
            The type represented by T must be an interface with properties.
            </remarks>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryAdapterFactory.GetAdapterMeta(System.Type)">
            <summary>
            Gets the <see cref="T:Castle.Components.DictionaryAdapter.DictionaryAdapterMeta"/> associated with the type.
            </summary>
            <param name="type">The typed interface.</param>
            <returns>The adapter meta-data.</returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryAdapterFactory.GetAdapterMeta(System.Type,Castle.Components.DictionaryAdapter.PropertyDescriptor)">
            <summary>
            Gets the <see cref="T:Castle.Components.DictionaryAdapter.DictionaryAdapterMeta"/> associated with the type.
            </summary>
            <param name="type">The typed interface.</param>
            <param name="descriptor">The property descriptor.</param>
            <returns>The adapter meta-data.</returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryAdapterFactory.GetAdapter``1(System.Collections.IDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryAdapterFactory.GetAdapter(System.Type,System.Collections.IDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryAdapterFactory.GetAdapter(System.Type,System.Collections.IDictionary,Castle.Components.DictionaryAdapter.PropertyDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryAdapterFactory.GetAdapter``2(System.Collections.Generic.IDictionary{System.String,``1})">
            <inheritdoc />
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryAdapterFactory.GetAdapter``1(System.Type,System.Collections.Generic.IDictionary{System.String,``0})">
            <inheritdoc />
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryAdapterFactory.GetAdapter``1(System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryAdapterFactory.GetAdapter(System.Type,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryAdapterFactory.GetAdapter``1(System.Xml.XmlNode)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryAdapterFactory.GetAdapter(System.Type,System.Xml.XmlNode)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryAdapterFactory.GetAdapterMeta(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryAdapterFactory.GetAdapterMeta(System.Type,Castle.Components.DictionaryAdapter.PropertyDescriptor)">
            <inheritdoc />
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.PropertyDescriptor">
            <summary>
            Describes a dictionary property.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.#ctor">
            <summary>
            Initializes an empty <see cref="T:Castle.Components.DictionaryAdapter.PropertyDescriptor"/> class.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.#ctor(System.Reflection.PropertyInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.DictionaryAdapter.PropertyDescriptor"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="behaviors">The property behaviors.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.#ctor(System.Object[])">
            <summary>
            Initializes a new instance <see cref="T:Castle.Components.DictionaryAdapter.PropertyDescriptor"/> class.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.#ctor(Castle.Components.DictionaryAdapter.PropertyDescriptor,System.Boolean)">
            <summary>
             Copies an existinginstance of the <see cref="T:Castle.Components.DictionaryAdapter.PropertyDescriptor"/> class.
            </summary>
            <param name="source"></param>
            <param name="copyBehaviors"></param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.GetKey(Castle.Components.DictionaryAdapter.IDictionaryAdapter,System.String,Castle.Components.DictionaryAdapter.PropertyDescriptor)">
            <summary>
            Gets the key.
            </summary>
            <param name="dictionaryAdapter">The dictionary adapter.</param>
            <param name="key">The key.</param>
            <param name="descriptor">The descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.AddKeyBuilder(Castle.Components.DictionaryAdapter.IDictionaryKeyBuilder[])">
            <summary>
            Adds the key builder.
            </summary>
            <param name="builders">The builder.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.AddKeyBuilders(System.Collections.Generic.IEnumerable{Castle.Components.DictionaryAdapter.IDictionaryKeyBuilder})">
            <summary>
            Adds the key builders.
            </summary>
            <param name="builders">The builders.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.CopyKeyBuilders(Castle.Components.DictionaryAdapter.PropertyDescriptor)">
            <summary>
            Copies the key builders to the other <see cref="T:Castle.Components.DictionaryAdapter.PropertyDescriptor"/>
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.GetPropertyValue(Castle.Components.DictionaryAdapter.IDictionaryAdapter,System.String,System.Object,Castle.Components.DictionaryAdapter.PropertyDescriptor,System.Boolean)">
            <summary>
            Gets the property value.
            </summary>
            <param name="dictionaryAdapter">The dictionary adapter.</param>
            <param name="key">The key.</param>
            <param name="storedValue">The stored value.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="ifExists">true if return only existing.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.AddGetter(Castle.Components.DictionaryAdapter.IDictionaryPropertyGetter[])">
            <summary>
            Adds the dictionary getter.
            </summary>
            <param name="getters">The getter.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.AddGetters(System.Collections.Generic.IEnumerable{Castle.Components.DictionaryAdapter.IDictionaryPropertyGetter})">
            <summary>
            Adds the dictionary getters.
            </summary>
            <param name="gets">The getters.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.CopyGetters(Castle.Components.DictionaryAdapter.PropertyDescriptor)">
            <summary>
            Copies the property getters to the other <see cref="T:Castle.Components.DictionaryAdapter.PropertyDescriptor"/>
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.SetPropertyValue(Castle.Components.DictionaryAdapter.IDictionaryAdapter,System.String,System.Object@,Castle.Components.DictionaryAdapter.PropertyDescriptor)">
            <summary>
            Sets the property value.
            </summary>
            <param name="dictionaryAdapter">The dictionary adapter.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="descriptor">The descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.AddSetter(Castle.Components.DictionaryAdapter.IDictionaryPropertySetter[])">
            <summary>
            Adds the dictionary setter.
            </summary>
            <param name="setters">The setter.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.AddSetters(System.Collections.Generic.IEnumerable{Castle.Components.DictionaryAdapter.IDictionaryPropertySetter})">
            <summary>
            Adds the dictionary setters.
            </summary>
            <param name="sets">The setters.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.CopySetters(Castle.Components.DictionaryAdapter.PropertyDescriptor)">
            <summary>
            Copies the property setters to the other <see cref="T:Castle.Components.DictionaryAdapter.PropertyDescriptor"/>
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.AddBehavior(Castle.Components.DictionaryAdapter.IDictionaryBehavior[])">
            <summary>
            Adds the behaviors.
            </summary>
            <param name="behaviors"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.AddBehaviors(System.Collections.Generic.IEnumerable{Castle.Components.DictionaryAdapter.IDictionaryBehavior})">
            <summary>
            Adds the behaviors.
            </summary>
            <param name="behaviors"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.AddBehaviors(Castle.Components.DictionaryAdapter.IDictionaryBehaviorBuilder[])">
            <summary>
            Adds the behaviors from the builders.
            </summary>
            <param name="builders"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.CopyBehaviors(Castle.Components.DictionaryAdapter.PropertyDescriptor)">
            <summary>
            Copies the behaviors to the other <see cref="T:Castle.Components.DictionaryAdapter.PropertyDescriptor"/>
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.PropertyDescriptor.Copy">
            <summary>
            Copies the <see cref="T:Castle.Components.DictionaryAdapter.PropertyDescriptor"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.ExecutionOrder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.PropertyName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.PropertyType">
            <summary>
            Gets the property type.
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.Property">
            <summary>
            Gets the property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.IsDynamicProperty">
            <summary>
            Returns true if the property is dynamic.
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.State">
            <summary>
            Gets additional state.
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.Fetch">
            <summary>
            Determines if property should be fetched.
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.IfExists">
            <summary>
            Determines if property must exist first.
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.SuppressNotifications">
            <summary>
            Determines if notifications should occur.
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.Behaviors">
            <summary>
            Gets the property behaviors.
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.TypeConverter">
            <summary>
            Gets the type converter.
            </summary>
            <value>The type converter.</value>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.ExtendedProperties">
            <summary>
            Gets the extended properties.
            </summary>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.KeyBuilders">
            <summary>
            Gets the key builders.
            </summary>
            <value>The key builders.</value>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.Setters">
            <summary>
            Gets the setter.
            </summary>
            <value>The setter.</value>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.PropertyDescriptor.Getters">
            <summary>
            Gets the getter.
            </summary>
            <value>The getter.</value>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryDescriptor.AddInitializer(Castle.Components.DictionaryAdapter.IDictionaryInitializer[])">
            <summary>
            Adds the dictionary initializers.
            </summary>
            <param name="inits">The initializers.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryDescriptor.AddInitializers(System.Collections.Generic.IEnumerable{Castle.Components.DictionaryAdapter.IDictionaryInitializer})">
            <summary>
            Adds the dictionary initializers.
            </summary>
            <param name="inits">The initializers.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryDescriptor.CopyInitializers(Castle.Components.DictionaryAdapter.DictionaryDescriptor)">
            <summary>
            Copies the initializers to the other <see cref="T:Castle.Components.DictionaryAdapter.PropertyDescriptor"/>
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryDescriptor.AddMetaInitializer(Castle.Components.DictionaryAdapter.IDictionaryMetaInitializer[])">
            <summary>
            Adds the dictionary meta-data initializers.
            </summary>
            <param name="inits">The meta-data initializers.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryDescriptor.AddMetaInitializers(System.Collections.Generic.IEnumerable{Castle.Components.DictionaryAdapter.IDictionaryMetaInitializer})">
            <summary>
            Adds the dictionary meta-data initializers.
            </summary>
            <param name="inits">The meta-data initializers.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.DictionaryDescriptor.CopyMetaInitializers(Castle.Components.DictionaryAdapter.DictionaryDescriptor)">
            <summary>
            Copies the meta-initializers to the other <see cref="T:Castle.Components.DictionaryAdapter.PropertyDescriptor"/>
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.DictionaryDescriptor.Initializers">
            <summary>
            Gets the initializers.
            </summary>
            <value>The initializers.</value>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.DictionaryDescriptor.MetaInitializers">
            <summary>
            Gets the meta-data initializers.
            </summary>
            <value>The meta-data initializers.</value>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.DynamicDictionary">
            <summary>
            Wraps a <see cref="T:System.Collections.IDictionary"/> with a dynamic object to expose a bit better looking API.
            The implementation is trivial and assumes keys are <see cref="T:System.String"/>s.
            </summary>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryBehaviorBuilder">
            <summary>
            Defines the contract for building <see cref="T:Castle.Components.DictionaryAdapter.IDictionaryBehavior"/>s.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryBehaviorBuilder.BuildBehaviors">
            <summary>
            Builds the dictionary behaviors.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryMetaInitializer">
            <summary>
             Contract for dictionary meta-data initialization.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryMetaInitializer.Initialize(Castle.Components.DictionaryAdapter.IDictionaryAdapterFactory,Castle.Components.DictionaryAdapter.DictionaryAdapterMeta)">
            <summary>
            Performs any initialization of the dictionary adapter meta-data.
            </summary>
            <param name="factory">The dictionary adapter factory.</param>
            <param name="dictionaryMeta">The dictionary adapter meta.</param>
            
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDictionaryValidator">
            <summary>
            Contract for dictionary validation.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryValidator.IsValid(Castle.Components.DictionaryAdapter.IDictionaryAdapter)">
            <summary>
            Determines if <see cref="T:Castle.Components.DictionaryAdapter.IDictionaryAdapter"/> is valid.
            </summary>
            <param name="dictionaryAdapter">The dictionary adapter.</param>
            <returns>true if valid.</returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryValidator.Validate(Castle.Components.DictionaryAdapter.IDictionaryAdapter)">
            <summary>
            Validates the <see cref="T:Castle.Components.DictionaryAdapter.IDictionaryAdapter"/>.
            </summary>
            <param name="dictionaryAdapter">The dictionary adapter.</param>
            <returns>The error summary information.</returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryValidator.Validate(Castle.Components.DictionaryAdapter.IDictionaryAdapter,Castle.Components.DictionaryAdapter.PropertyDescriptor)">
            <summary>
            Validates the <see cref="T:Castle.Components.DictionaryAdapter.IDictionaryAdapter"/> for a property.
            </summary>
            <param name="dictionaryAdapter">The dictionary adapter.</param>
            <param name="property">The property to validate.</param>
            <returns>The property summary information.</returns>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.IDictionaryValidator.Invalidate(Castle.Components.DictionaryAdapter.IDictionaryAdapter)">
            <summary>
            Invalidates any results cached by the validator.
            </summary>
            <param name="dictionaryAdapter">The dictionary adapter.</param>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.NameValueCollectionAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.NameValueCollectionAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.DictionaryAdapter.NameValueCollectionAdapter"/> class.
            </summary>
            <param name="nameValues">The name values.</param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.NameValueCollectionAdapter.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.NameValueCollectionAdapter.Adapt(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adapts the specified name values.
            </summary>
            <param name="nameValues">The name values.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.NameValueCollectionAdapter.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Castle.Components.DictionaryAdapter.NameValueCollectionAdapter.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.BindingList`1">
            <summary>
              Provides a generic collection that supports data binding.
            </summary>
            <remarks>
              This class wraps the CLR <see cref="T:System.ComponentModel.BindingList`1"/>
              in order to implement the Castle-specific <see cref="T:Castle.Components.DictionaryAdapter.IBindingList`1"/>.
            </remarks>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.BindingList`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.Components.DictionaryAdapter.BindingList`1"/> class
              using default values.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.Components.DictionaryAdapter.BindingList`1"/> class
              with the specified list.
            </summary>
            <param name="list">
              An <see cref="T:System.Collections.Generic.IList`1"/> of items
              to be contained in the <see cref="T:Castle.Components.DictionaryAdapter.BindingList`1"/>.
            </param>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.BindingList`1.#ctor(System.ComponentModel.BindingList{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.Components.DictionaryAdapter.BindingList`1"/> class
              wrapping the specified <see cref="T:System.ComponentModel.BindingList`1"/> instance.
            </summary>
            <param name="list">
              A <see cref="T:System.ComponentModel.BindingList`1"/>
              to be wrapped by the <see cref="T:Castle.Components.DictionaryAdapter.BindingList`1"/>.
            </param>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDynamicValue`1">
            <summary>
            Contract for typed dynamic value resolution.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Castle.Components.DictionaryAdapter.IDynamicValue">
            <summary>
            Contract for dynamic value resolution.
            </summary>
        </member>
        <member name="M:Castle.Components.DictionaryAdapter.Xml.XmlAdapter.#ctor(Castle.Components.DictionaryAdapter.Xml.IXmlNode,Castle.Components.DictionaryAdapter.Xml.XmlReferenceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.DictionaryAdapter.Xml.XmlAdapter"/> class
            that represents a child object in a larger object graph.
            </summary>
            <param name="node"></param>
            <param name="references"></param>
        </member>
        <member name="T:Castle.Core.Configuration.AbstractConfiguration">
            <summary>
              This is an abstract <see cref="T:Castle.Core.Configuration.IConfiguration"/> implementation
              that deals with methods that can be abstracted away
              from underlying implementations.
            </summary>
            <remarks>
              <para><b>AbstractConfiguration</b> makes easier to implementers 
                to create a new version of <see cref="T:Castle.Core.Configuration.IConfiguration"/></para>
            </remarks>
        </member>
        <member name="T:Castle.Core.Configuration.IConfiguration">
            <summary>
            <see cref="T:Castle.Core.Configuration.IConfiguration"/> is a interface encapsulating a configuration node
            used to retrieve configuration values.
            </summary>
        </member>
        <member name="M:Castle.Core.Configuration.IConfiguration.GetValue(System.Type,System.Object)">
            <summary>
            Gets the value of the node and converts it 
            into specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/></param>
            <param name="defaultValue">
            The Default value returned if the conversion fails.
            </param>
            <returns>The Value converted into the specified type.</returns>
        </member>
        <member name="P:Castle.Core.Configuration.IConfiguration.Name">
            <summary>
            Gets the name of the node.
            </summary>
            <value>
            The Name of the node.
            </value> 
        </member>
        <member name="P:Castle.Core.Configuration.IConfiguration.Value">
            <summary>
            Gets the value of the node.
            </summary>
            <value>
            The Value of the node.
            </value> 
        </member>
        <member name="P:Castle.Core.Configuration.IConfiguration.Children">
            <summary>
            Gets an <see cref="T:Castle.Core.Configuration.ConfigurationCollection"/> of <see cref="T:Castle.Core.Configuration.IConfiguration"/>
            elements containing all node children.
            </summary>
            <value>The Collection of child nodes.</value>
        </member>
        <member name="P:Castle.Core.Configuration.IConfiguration.Attributes">
            <summary>
            Gets an <see cref="T:System.Collections.IDictionary"/> of the configuration attributes.
            </summary>
        </member>
        <member name="M:Castle.Core.Configuration.AbstractConfiguration.GetValue(System.Type,System.Object)">
            <summary>
              Gets the value of the node and converts it
              into specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/></param>
            <param name="defaultValue">
              The Default value returned if the conversion fails.
            </param>
            <returns>The Value converted into the specified type.</returns>
        </member>
        <member name="P:Castle.Core.Configuration.AbstractConfiguration.Attributes">
            <summary>
              Gets node attributes.
            </summary>
            <value>
              All attributes of the node.
            </value>
        </member>
        <member name="P:Castle.Core.Configuration.AbstractConfiguration.Children">
            <summary>
              Gets all child nodes.
            </summary>
            <value>The <see cref="T:Castle.Core.Configuration.ConfigurationCollection"/> of child nodes.</value>
        </member>
        <member name="P:Castle.Core.Configuration.AbstractConfiguration.Name">
            <summary>
              Gets the name of the <see cref="T:Castle.Core.Configuration.IConfiguration"/>.
            </summary>
            <value>
              The Name of the <see cref="T:Castle.Core.Configuration.IConfiguration"/>.
            </value>
        </member>
        <member name="P:Castle.Core.Configuration.AbstractConfiguration.Value">
            <summary>
              Gets the value of <see cref="T:Castle.Core.Configuration.IConfiguration"/>.
            </summary>
            <value>
              The Value of the <see cref="T:Castle.Core.Configuration.IConfiguration"/>.
            </value>
        </member>
        <member name="T:Castle.Core.Configuration.ConfigurationCollection">
            <summary>
            A collection of <see cref="T:Castle.Core.Configuration.IConfiguration"/> objects.
            </summary>
        </member>
        <member name="M:Castle.Core.Configuration.ConfigurationCollection.#ctor">
            <summary>
            Creates a new instance of <c>ConfigurationCollection</c>.
            </summary>
        </member>
        <member name="M:Castle.Core.Configuration.ConfigurationCollection.#ctor(System.Collections.Generic.IEnumerable{Castle.Core.Configuration.IConfiguration})">
            <summary>
            Creates a new instance of <c>ConfigurationCollection</c>.
            </summary>
        </member>
        <member name="T:Castle.Core.Configuration.MutableConfiguration">
            <summary>
            Summary description for MutableConfiguration.
            </summary>
        </member>
        <member name="M:Castle.Core.Configuration.MutableConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Core.Configuration.MutableConfiguration"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Castle.Core.Configuration.MutableConfiguration.Value">
            <summary>
            Gets the value of <see cref="T:Castle.Core.Configuration.IConfiguration"/>.
            </summary>
            <value>
            The Value of the <see cref="T:Castle.Core.Configuration.IConfiguration"/>.
            </value>
        </member>
        <member name="M:Castle.Core.Configuration.Xml.XmlConfigurationDeserializer.Deserialize(System.Xml.XmlNode)">
            <summary>
              Deserializes the specified node into an abstract representation of configuration.
            </summary>
            <param name = "node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Core.Configuration.Xml.XmlConfigurationDeserializer.GetConfigValue(System.String)">
            <summary>
              If a config value is an empty string we return null, this is to keep
              backward compatibility with old code
            </summary>
        </member>
        <member name="T:Castle.Core.Internal.AttributesUtil">
            <summary>
              Helper class for retrieving attributes.
            </summary>
        </member>
        <member name="M:Castle.Core.Internal.AttributesUtil.GetAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
              Gets the attribute.
            </summary>
            <param name = "member">The member.</param>
            <returns>The member attribute.</returns>
        </member>
        <member name="M:Castle.Core.Internal.AttributesUtil.GetAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
              Gets the attributes. Does not consider inherited attributes!
            </summary>
            <param name = "member">The member.</param>
            <returns>The member attributes.</returns>
        </member>
        <member name="M:Castle.Core.Internal.AttributesUtil.GetTypeAttribute``1(System.Type)">
            <summary>
              Gets the type attribute.
            </summary>
            <param name = "type">The type.</param>
            <returns>The type attribute.</returns>
        </member>
        <member name="M:Castle.Core.Internal.AttributesUtil.GetTypeAttributes``1(System.Type)">
            <summary>
              Gets the type attributes.
            </summary>
            <param name = "type">The type.</param>
            <returns>The type attributes.</returns>
        </member>
        <member name="M:Castle.Core.Internal.AttributesUtil.GetTypeConverter(System.Reflection.MemberInfo)">
            <summary>
              Gets the type converter.
            </summary>
            <param name = "member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Core.Internal.AttributesUtil.HasAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
              Gets the attribute.
            </summary>
            <param name = "member">The member.</param>
            <returns>The member attribute.</returns>
        </member>
        <member name="M:Castle.Core.Internal.CollectionExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
              Checks whether or not collection is null or empty. Assumes colleciton can be safely enumerated multiple times.
            </summary>
            <param name = "this"></param>
            <returns></returns>
        </member>
        <member name="F:Castle.Core.Internal.InternalsVisible.ToCastleCore">
            <summary>
              Constant to use when making assembly internals visible to Castle.Core 
              <c>[assembly: InternalsVisibleTo(CoreInternalsVisible.ToCastleCore)]</c>
            </summary>
        </member>
        <member name="F:Castle.Core.Internal.InternalsVisible.ToDynamicProxyGenAssembly2">
            <summary>
              Constant to use when making assembly internals visible to proxy types generated by DynamicProxy. Required when proxying internal types.
              <c>[assembly: InternalsVisibleTo(CoreInternalsVisible.ToDynamicProxyGenAssembly2)]</c>
            </summary>
        </member>
        <member name="M:Castle.Core.Internal.Lock.Create">
            <summary>
            Creates a new lock.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.Core.IServiceEnabledComponent">
            <summary>
            Defines that the implementation wants a 
            <see cref="T:System.IServiceProvider"/> in order to 
            access other components. The creator must be aware
            that the component might (or might not) implement 
            the interface.
            </summary>
            <remarks>
            Used by Castle Project components to, for example, 
            gather logging factories
            </remarks>
        </member>
        <member name="T:Castle.Core.IServiceProviderEx">
            <summary>
            Increments <c>IServiceProvider</c> with a generic service resolution operation.
            </summary>
        </member>
        <member name="T:Castle.Core.IServiceProviderExAccessor">
            <summary>
            This interface should be implemented by classes
            that are available in a bigger context, exposing
            the container to different areas in the same application.
            <para>
            For example, in Web application, the (global) HttpApplication
            subclasses should implement this interface to expose 
            the configured container
            </para>
            </summary>
        </member>
        <member name="T:Castle.Core.Logging.IExtendedLoggerFactory">
            <summary>
              Provides a factory that can produce either <see cref="T:Castle.Core.Logging.ILogger"/> or
              <see cref="T:Castle.Core.Logging.IExtendedLogger"/> classes.
            </summary>
        </member>
        <member name="T:Castle.Core.Logging.ILoggerFactory">
            <summary>
              Manages the instantiation of <see cref="T:Castle.Core.Logging.ILogger"/>s.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.ILoggerFactory.Create(System.Type)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.ILoggerFactory.Create(System.String)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.ILoggerFactory.Create(System.Type,Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.ILoggerFactory.Create(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.IExtendedLoggerFactory.Create(System.Type)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.IExtendedLoggerFactory.Create(System.String)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.IExtendedLoggerFactory.Create(System.Type,Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.IExtendedLoggerFactory.Create(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.AbstractExtendedLoggerFactory.Create(System.Type)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.AbstractExtendedLoggerFactory.Create(System.String)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.AbstractExtendedLoggerFactory.Create(System.Type,Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.AbstractExtendedLoggerFactory.Create(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new extended logger.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.AbstractExtendedLoggerFactory.Castle#Core#Logging#ILoggerFactory#Create(System.Type)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.AbstractExtendedLoggerFactory.Castle#Core#Logging#ILoggerFactory#Create(System.String)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.AbstractExtendedLoggerFactory.Castle#Core#Logging#ILoggerFactory#Create(System.Type,Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new logger, getting the logger name from the specified type.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.AbstractExtendedLoggerFactory.Castle#Core#Logging#ILoggerFactory#Create(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new logger.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.AbstractExtendedLoggerFactory.GetConfigFile(System.String)">
            <summary>
              Gets the configuration file.
            </summary>
            <param name = "fileName">i.e. log4net.config</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Core.Logging.AbstractLoggerFactory.GetConfigFile(System.String)">
            <summary>
              Gets the configuration file.
            </summary>
            <param name = "fileName">i.e. log4net.config</param>
            <returns></returns>
        </member>
        <member name="T:Castle.Core.Logging.ConsoleLogger">
            <summary>
            The Logger sending everything to the standard output streams.
            This is mainly for the cases when you have a utility that
            does not have a logger to supply.
            </summary>
        </member>
        <member name="T:Castle.Core.Logging.LevelFilteredLogger">
            <summary>
            The Level Filtered Logger class.  This is a base clase which
            provides a LogLevel attribute and reroutes all functions into
            one Log method.
            </summary>
        </member>
        <member name="T:Castle.Core.Logging.ILogger">
            <summary>
              Manages logging.
            </summary>
            <remarks>
              This is a facade for the different logging subsystems.
              It offers a simplified interface that follows IOC patterns
              and a simplified priority/level/severity abstraction.
            </remarks>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.CreateChildLogger(System.String)">
            <summary>
              Create a new child logger.
              The name of the child logger is [current-loggers-name].[passed-in-name]
            </summary>
            <param name="loggerName">The Subname of this logger.</param>
            <returns>The New ILogger instance.</returns>
            <exception cref="T:System.ArgumentException">If the name has an empty element name.</exception>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Debug(System.String)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Debug(System.Func{System.String})">
            <summary>
              Logs a debug message with lazily constructed message. The message will be constructed only if the <see cref="P:Castle.Core.Logging.ILogger.IsDebugEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Debug(System.String,System.Exception)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.DebugFormat(System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.DebugFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.DebugFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Error(System.String)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Error(System.Func{System.String})">
            <summary>
              Logs an error message with lazily constructed message. The message will be constructed only if the <see cref="P:Castle.Core.Logging.ILogger.IsErrorEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Error(System.String,System.Exception)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.ErrorFormat(System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.ErrorFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.ErrorFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Fatal(System.String)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Fatal(System.Func{System.String})">
            <summary>
              Logs a fatal message with lazily constructed message. The message will be constructed only if the <see cref="P:Castle.Core.Logging.ILogger.IsFatalEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Fatal(System.String,System.Exception)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.FatalFormat(System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.FatalFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.FatalFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Info(System.String)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Info(System.Func{System.String})">
            <summary>
              Logs a info message with lazily constructed message. The message will be constructed only if the <see cref="P:Castle.Core.Logging.ILogger.IsInfoEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Info(System.String,System.Exception)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.InfoFormat(System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.InfoFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.InfoFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Warn(System.String)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Warn(System.Func{System.String})">
            <summary>
              Logs a warn message with lazily constructed message. The message will be constructed only if the <see cref="P:Castle.Core.Logging.ILogger.IsWarnEnabled"/> is true.
            </summary>
            <param name="messageFactory"></param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.Warn(System.String,System.Exception)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.WarnFormat(System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.WarnFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.ILogger.WarnFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="P:Castle.Core.Logging.ILogger.IsDebugEnabled">
            <summary>
              Determines if messages of priority "debug" will be logged.
            </summary>
            <value>True if "debug" messages will be logged.</value>
        </member>
        <member name="P:Castle.Core.Logging.ILogger.IsErrorEnabled">
            <summary>
              Determines if messages of priority "error" will be logged.
            </summary>
            <value>True if "error" messages will be logged.</value>
        </member>
        <member name="P:Castle.Core.Logging.ILogger.IsFatalEnabled">
            <summary>
              Determines if messages of priority "fatal" will be logged.
            </summary>
            <value>True if "fatal" messages will be logged.</value>
        </member>
        <member name="P:Castle.Core.Logging.ILogger.IsInfoEnabled">
            <summary>
              Determines if messages of priority "info" will be logged.
            </summary>
            <value>True if "info" messages will be logged.</value>
        </member>
        <member name="P:Castle.Core.Logging.ILogger.IsWarnEnabled">
            <summary>
              Determines if messages of priority "warn" will be logged.
            </summary>
            <value>True if "warn" messages will be logged.</value>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.#ctor">
            <summary>
              Creates a new <c>LevelFilteredLogger</c>.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.InitializeLifetimeService">
            <summary>
            Keep the instance alive in a remoting scenario
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.Debug(System.String)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.Debug(System.String,System.Exception)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.DebugFormat(System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.DebugFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.DebugFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.Info(System.String)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.Info(System.String,System.Exception)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.InfoFormat(System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.InfoFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.InfoFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an info message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.Warn(System.String)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.Warn(System.String,System.Exception)">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.WarnFormat(System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.WarnFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.WarnFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a warn message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.Error(System.String)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.Error(System.String,System.Exception)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.ErrorFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.ErrorFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs an error message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.Fatal(System.String)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.Fatal(System.String,System.Exception)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "message">The message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.FatalFormat(System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.FatalFormat(System.Exception,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.FatalFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "exception">The exception to log</param>
            <param name = "formatProvider">The format provider to use</param>
            <param name = "format">Format string for the message to log</param>
            <param name = "args">Format arguments for the message to log</param>
        </member>
        <member name="M:Castle.Core.Logging.LevelFilteredLogger.Log(Castle.Core.Logging.LoggerLevel,System.String,System.String,System.Exception)">
            <summary>
              Implementors output the log content by implementing this method only.
              Note that exception can be null
            </summary>
            <param name = "loggerLevel"></param>
            <param name = "loggerName"></param>
            <param name = "message"></param>
            <param name = "exception"></param>
        </member>
        <member name="P:Castle.Core.Logging.LevelFilteredLogger.Level">
            <value>
              The <c>LoggerLevel</c> that this logger
              will be using. Defaults to <c>LoggerLevel.Off</c>
            </value>
        </member>
        <member name="P:Castle.Core.Logging.LevelFilteredLogger.Name">
            <value>
              The name that this logger will be using. 
              Defaults to <c>String.Empty</c>
            </value>
        </member>
        <member name="P:Castle.Core.Logging.LevelFilteredLogger.IsDebugEnabled">
            <summary>
              Determines if messages of priority "debug" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Castle.Core.Logging.LoggerLevel.Debug"/> bit</value>
        </member>
        <member name="P:Castle.Core.Logging.LevelFilteredLogger.IsInfoEnabled">
            <summary>
              Determines if messages of priority "info" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Castle.Core.Logging.LoggerLevel.Info"/> bit</value>
        </member>
        <member name="P:Castle.Core.Logging.LevelFilteredLogger.IsWarnEnabled">
            <summary>
              Determines if messages of priority "warn" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Castle.Core.Logging.LoggerLevel.Warn"/> bit</value>
        </member>
        <member name="P:Castle.Core.Logging.LevelFilteredLogger.IsErrorEnabled">
            <summary>
              Determines if messages of priority "error" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Castle.Core.Logging.LoggerLevel.Error"/> bit</value>
        </member>
        <member name="P:Castle.Core.Logging.LevelFilteredLogger.IsFatalEnabled">
            <summary>
              Determines if messages of priority "fatal" will be logged.
            </summary>
            <value><c>true</c> if log level flags include the <see cref="F:Castle.Core.Logging.LoggerLevel.Fatal"/> bit</value>
        </member>
        <member name="M:Castle.Core.Logging.ConsoleLogger.#ctor">
            <summary>
              Creates a new ConsoleLogger with the <c>Level</c>
              set to <c>LoggerLevel.Debug</c> and the <c>Name</c>
              set to <c>String.Empty</c>.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.ConsoleLogger.#ctor(Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new ConsoleLogger with the <c>Name</c>
              set to <c>String.Empty</c>.
            </summary>
            <param name = "logLevel">The logs Level.</param>
        </member>
        <member name="M:Castle.Core.Logging.ConsoleLogger.#ctor(System.String)">
            <summary>
              Creates a new ConsoleLogger with the <c>Level</c>
              set to <c>LoggerLevel.Debug</c>.
            </summary>
            <param name = "name">The logs Name.</param>
        </member>
        <member name="M:Castle.Core.Logging.ConsoleLogger.#ctor(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates a new ConsoleLogger.
            </summary>
            <param name = "name">The logs Name.</param>
            <param name = "logLevel">The logs Level.</param>
        </member>
        <member name="M:Castle.Core.Logging.ConsoleLogger.Log(Castle.Core.Logging.LoggerLevel,System.String,System.String,System.Exception)">
            <summary>
              A Common method to log.
            </summary>
            <param name = "loggerLevel">The level of logging</param>
            <param name = "loggerName">The name of the logger</param>
            <param name = "message">The Message</param>
            <param name = "exception">The Exception</param>
        </member>
        <member name="M:Castle.Core.Logging.ConsoleLogger.CreateChildLogger(System.String)">
            <summary>
              Returns a new <c>ConsoleLogger</c> with the name
              added after this loggers name, with a dot in between.
            </summary>
            <param name = "loggerName">The added hierarchical name.</param>
            <returns>A new <c>ConsoleLogger</c>.</returns>
        </member>
        <member name="T:Castle.Core.Logging.DiagnosticsLogger">
            <summary>
              The Logger using standart Diagnostics namespace.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.DiagnosticsLogger.#ctor(System.String)">
            <summary>
              Creates a logger based on <see cref="T:System.Diagnostics.EventLog"/>.
            </summary>
            <param name="logName"><see cref="P:System.Diagnostics.EventLog.Log"/></param>
        </member>
        <member name="M:Castle.Core.Logging.DiagnosticsLogger.#ctor(System.String,System.String)">
            <summary>
              Creates a logger based on <see cref="T:System.Diagnostics.EventLog"/>.
            </summary>
            <param name="logName"><see cref="P:System.Diagnostics.EventLog.Log"/></param>
            <param name="source"><see cref="P:System.Diagnostics.EventLog.Source"/></param>
        </member>
        <member name="M:Castle.Core.Logging.DiagnosticsLogger.#ctor(System.String,System.String,System.String)">
            <summary>
              Creates a logger based on <see cref="T:System.Diagnostics.EventLog"/>.
            </summary>
            <param name="logName"><see cref="P:System.Diagnostics.EventLog.Log"/></param>
            <param name="machineName"><see cref="P:System.Diagnostics.EventLog.MachineName"/></param>
            <param name="source"><see cref="P:System.Diagnostics.EventLog.Source"/></param>
        </member>
        <member name="T:Castle.Core.Logging.IContextProperties">
            <summary>
              Interface for Context Properties implementations
            </summary>
            <remarks>
              <para>
                This interface defines a basic property get set accessor.
              </para>
              <para>
                Based on the ContextPropertiesBase of log4net, by Nicko Cadell.
              </para>
            </remarks>
        </member>
        <member name="P:Castle.Core.Logging.IContextProperties.Item(System.String)">
            <summary>
              Gets or sets the value of a property
            </summary>
            <value>
              The value for the property with the specified key
            </value>
            <remarks>
              <para>
                Gets or sets the value of a property
              </para>
            </remarks>
        </member>
        <member name="T:Castle.Core.Logging.IExtendedLogger">
            <summary>
              Provides an interface that supports <see cref="T:Castle.Core.Logging.ILogger"/> and
              allows the storage and retrieval of Contexts. These are supported in
              both log4net and NLog.
            </summary>
        </member>
        <member name="P:Castle.Core.Logging.IExtendedLogger.GlobalProperties">
            <summary>
              Exposes the Global Context of the extended logger.
            </summary>
        </member>
        <member name="P:Castle.Core.Logging.IExtendedLogger.ThreadProperties">
            <summary>
              Exposes the Thread Context of the extended logger.
            </summary>
        </member>
        <member name="P:Castle.Core.Logging.IExtendedLogger.ThreadStacks">
            <summary>
              Exposes the Thread Stack of the extended logger.
            </summary>
        </member>
        <member name="T:Castle.Core.Logging.LoggerLevel">
            <summary>
              Supporting Logger levels.
            </summary>
        </member>
        <member name="F:Castle.Core.Logging.LoggerLevel.Off">
            <summary>
              Logging will be off
            </summary>
        </member>
        <member name="F:Castle.Core.Logging.LoggerLevel.Fatal">
            <summary>
              Fatal logging level
            </summary>
        </member>
        <member name="F:Castle.Core.Logging.LoggerLevel.Error">
            <summary>
              Error logging level
            </summary>
        </member>
        <member name="F:Castle.Core.Logging.LoggerLevel.Warn">
            <summary>
              Warn logging level
            </summary>
        </member>
        <member name="F:Castle.Core.Logging.LoggerLevel.Info">
            <summary>
              Info logging level
            </summary>
        </member>
        <member name="F:Castle.Core.Logging.LoggerLevel.Debug">
            <summary>
              Debug logging level
            </summary>
        </member>
        <member name="T:Castle.Core.Logging.NullLogFactory">
            <summary>
            NullLogFactory used when logging is turned off.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.NullLogFactory.Create(System.String)">
            <summary>
              Creates an instance of ILogger with the specified name.
            </summary>
            <param name = "name">Name.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Core.Logging.NullLogFactory.Create(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>
              Creates an instance of ILogger with the specified name and LoggerLevel.
            </summary>
            <param name = "name">Name.</param>
            <param name = "level">Level.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.Core.Logging.NullLogger">
            <summary>
              The Null Logger class.  This is useful for implementations where you need
              to provide a logger to a utility class, but do not want any output from it.
              It also helps when you have a utility that does not have a logger to supply.
            </summary>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.CreateChildLogger(System.String)">
            <summary>
              Returns this <c>NullLogger</c>.
            </summary>
            <param name = "loggerName">Ignored</param>
            <returns>This ILogger instance.</returns>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.Debug(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.Debug(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.DebugFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.DebugFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.DebugFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.Error(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.Error(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.ErrorFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.ErrorFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.Fatal(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.Fatal(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.FatalFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.FatalFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.FatalFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.Info(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.Info(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.InfoFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.InfoFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.InfoFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.Warn(System.String)">
            <summary>
              No-op.
            </summary>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.Warn(System.String,System.Exception)">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "message">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.WarnFormat(System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.WarnFormat(System.Exception,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="M:Castle.Core.Logging.NullLogger.WarnFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
              No-op.
            </summary>
            <param name = "exception">Ignored</param>
            <param name = "formatProvider">Ignored</param>
            <param name = "format">Ignored</param>
            <param name = "args">Ignored</param>
        </member>
        <member name="P:Castle.Core.Logging.NullLogger.GlobalProperties">
            <summary>
              Returns empty context properties.
            </summary>
        </member>
        <member name="P:Castle.Core.Logging.NullLogger.ThreadProperties">
            <summary>
              Returns empty context properties.
            </summary>
        </member>
        <member name="P:Castle.Core.Logging.NullLogger.ThreadStacks">
            <summary>
              Returns empty context stacks.
            </summary>
        </member>
        <member name="P:Castle.Core.Logging.NullLogger.IsDebugEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:Castle.Core.Logging.NullLogger.IsErrorEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:Castle.Core.Logging.NullLogger.IsFatalEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:Castle.Core.Logging.NullLogger.IsInfoEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="P:Castle.Core.Logging.NullLogger.IsWarnEnabled">
            <summary>
              No-op.
            </summary>
            <value>false</value>
        </member>
        <member name="T:Castle.Core.Logging.StreamLogger">
            <summary>
            The Stream Logger class.  This class can stream log information
            to any stream, it is suitable for storing a log file to disk,
            or to a <c>MemoryStream</c> for testing your components.
            </summary>
            <remarks>
            This logger is not thread safe.
            </remarks>
        </member>
        <member name="M:Castle.Core.Logging.StreamLogger.#ctor(System.String,System.IO.Stream)">
            <summary>
              Creates a new <c>StreamLogger</c> with default encoding 
              and buffer size. Initial Level is set to Debug.
            </summary>
            <param name = "name">
              The name of the log.
            </param>
            <param name = "stream">
              The stream that will be used for logging,
              seeking while the logger is alive 
            </param>
        </member>
        <member name="M:Castle.Core.Logging.StreamLogger.#ctor(System.String,System.IO.Stream,System.Text.Encoding)">
            <summary>
              Creates a new <c>StreamLogger</c> with default buffer size.
              Initial Level is set to Debug.
            </summary>
            <param name="name">
              The name of the log.
            </param>
            <param name="stream">
              The stream that will be used for logging,
              seeking while the logger is alive 
            </param>
            <param name="encoding">
              The encoding that will be used for this stream.
              <see cref="T:System.IO.StreamWriter"/>
            </param>
        </member>
        <member name="M:Castle.Core.Logging.StreamLogger.#ctor(System.String,System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
              Creates a new <c>StreamLogger</c>. 
              Initial Level is set to Debug.
            </summary>
            <param name="name">
              The name of the log.
            </param>
            <param name="stream">
              The stream that will be used for logging,
              seeking while the logger is alive 
            </param>
            <param name="encoding">
              The encoding that will be used for this stream.
              <see cref="T:System.IO.StreamWriter"/>
            </param>
            <param name="bufferSize">
              The buffer size that will be used for this stream.
              <see cref="T:System.IO.StreamWriter"/>
            </param>
        </member>
        <member name="M:Castle.Core.Logging.StreamLogger.#ctor(System.String,System.IO.StreamWriter)">
            <summary>
              Creates a new <c>StreamLogger</c> with 
              Debug as default Level.
            </summary>
            <param name = "name">The name of the log.</param>
            <param name = "writer">The <c>StreamWriter</c> the log will write to.</param>
        </member>
        <member name="T:Castle.Core.Logging.StreamLoggerFactory">
            <summary>
              Creates <see cref="T:Castle.Core.Logging.StreamLogger"/> outputing 
              to files. The name of the file is derived from the log name
              plus the 'log' extension.
            </summary>
        </member>
        <member name="T:Castle.Core.Logging.TraceLogger">
            <summary>
              The TraceLogger sends all logging to the System.Diagnostics.TraceSource
              built into the .net framework.
            </summary>
            <remarks>
              Logging can be configured in the system.diagnostics configuration 
              section. 
            
              If logger doesn't find a source name with a full match it will
              use source names which match the namespace partially. For example you can
              configure from all castle components by adding a source name with the
              name "Castle". 
            
              If no portion of the namespace matches the source named "Default" will
              be used.
            </remarks>
        </member>
        <member name="M:Castle.Core.Logging.TraceLogger.#ctor(System.String)">
            <summary>
            Build a new trace logger based on the named TraceSource
            </summary>
            <param name="name">The name used to locate the best TraceSource. In most cases comes from the using type's fullname.</param>
        </member>
        <member name="M:Castle.Core.Logging.TraceLogger.#ctor(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>
            Build a new trace logger based on the named TraceSource
            </summary>
            <param name="name">The name used to locate the best TraceSource. In most cases comes from the using type's fullname.</param>
            <param name="level">The default logging level at which this source should write messages. In almost all cases this
            default value will be overridden in the config file. </param>
        </member>
        <member name="M:Castle.Core.Logging.TraceLogger.CreateChildLogger(System.String)">
            <summary>
            Create a new child logger.
            The name of the child logger is [current-loggers-name].[passed-in-name]
            </summary>
            <param name="loggerName">The Subname of this logger.</param>
            <returns>The New ILogger instance.</returns> 
        </member>
        <member name="T:Castle.Core.Logging.TraceLoggerFactory">
            <summary>
              Used to create the TraceLogger implementation of ILogger interface. See <see cref="T:Castle.Core.Logging.TraceLogger"/>.
            </summary>
        </member>
        <member name="T:Castle.Core.Pair`2">
            <summary>
            General purpose class to represent a standard pair of values. 
            </summary>
            <typeparam name="TFirst">Type of the first value</typeparam>
            <typeparam name="TSecond">Type of the second value</typeparam>
        </member>
        <member name="M:Castle.Core.Pair`2.#ctor(`0,`1)">
            <summary>
            Constructs a pair with its values
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="T:Castle.Core.ProxyServices">
            <summary>
            List of utility methods related to dynamic proxy operations
            </summary>
        </member>
        <member name="M:Castle.Core.ProxyServices.IsDynamicProxy(System.Type)">
            <summary>
            Determines whether the specified type is a proxy generated by
            DynamicProxy (1 or 2).
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if it is a proxy; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Castle.Core.ReflectionBasedDictionaryAdapter">
            <summary>
            Readonly implementation of <see cref="T:System.Collections.IDictionary"/> which uses an anonymous object as its source. Uses names of properties as keys, and property values as... well - values. Keys are not case sensitive.
            </summary>
        </member>
        <member name="M:Castle.Core.ReflectionBasedDictionaryAdapter.#ctor(System.Object)">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.Core.ReflectionBasedDictionaryAdapter"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Castle.Core.ReflectionBasedDictionaryAdapter.Add(System.Object,System.Object)">
            <summary>
              Adds an element with the provided key and value to the <see cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <param name = "key">The <see cref = "T:System.Object" /> to use as the key of the element to add.</param>
            <param name = "value">The <see cref = "T:System.Object" /> to use as the value of the element to add.</param>
            <exception cref = "T:System.ArgumentNullException">
              <paramref name = "key" /> is null. </exception>
            <exception cref = "T:System.ArgumentException">An element with the same key already exists in the <see
               cref = "T:System.Collections.IDictionary" /> object. </exception>
            <exception cref = "T:System.NotSupportedException">The <see cref = "T:System.Collections.IDictionary" /> is read-only.-or- The <see
               cref = "T:System.Collections.IDictionary" /> has a fixed size. </exception>
        </member>
        <member name="M:Castle.Core.ReflectionBasedDictionaryAdapter.Clear">
            <summary>
              Removes all elements from the <see cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <exception cref = "T:System.NotSupportedException">The <see cref = "T:System.Collections.IDictionary" /> object is read-only. </exception>
        </member>
        <member name="M:Castle.Core.ReflectionBasedDictionaryAdapter.Contains(System.Object)">
            <summary>
              Determines whether the <see cref = "T:System.Collections.IDictionary" /> object contains an element with the specified key.
            </summary>
            <param name = "key">The key to locate in the <see cref = "T:System.Collections.IDictionary" /> object.</param>
            <returns>
              true if the <see cref = "T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.
            </returns>
            <exception cref = "T:System.ArgumentNullException">
              <paramref name = "key" /> is null. </exception>
        </member>
        <member name="M:Castle.Core.ReflectionBasedDictionaryAdapter.Remove(System.Object)">
            <summary>
              Removes the element with the specified key from the <see cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <param name = "key">The key of the element to remove.</param>
            <exception cref = "T:System.ArgumentNullException">
              <paramref name = "key" /> is null. </exception>
            <exception cref = "T:System.NotSupportedException">The <see cref = "T:System.Collections.IDictionary" /> object is read-only.-or- The <see
               cref = "T:System.Collections.IDictionary" /> has a fixed size. </exception>
        </member>
        <member name="M:Castle.Core.ReflectionBasedDictionaryAdapter.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref = "T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Castle.Core.ReflectionBasedDictionaryAdapter.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
              Copies the elements of the <see cref = "T:System.Collections.ICollection" /> to an <see cref = "T:System.Array" />, starting at a particular <see
               cref = "T:System.Array" /> index.
            </summary>
            <param name = "array">The one-dimensional <see cref = "T:System.Array" /> that is the destination of the elements copied from <see
               cref = "T:System.Collections.ICollection" />. The <see cref = "T:System.Array" /> must have zero-based indexing.</param>
            <param name = "index">The zero-based index in <paramref name = "array" /> at which copying begins.</param>
            <exception cref = "T:System.ArgumentNullException">
              <paramref name = "array" /> is null. </exception>
            <exception cref = "T:System.ArgumentOutOfRangeException">
              <paramref name = "index" /> is less than zero. </exception>
            <exception cref = "T:System.ArgumentException">
              <paramref name = "array" /> is multidimensional.-or- <paramref name = "index" /> is equal to or greater than the length of <paramref
               name = "array" />.-or- The number of elements in the source <see cref = "T:System.Collections.ICollection" /> is greater than the available space from <paramref
               name = "index" /> to the end of the destination <paramref name = "array" />. </exception>
            <exception cref = "T:System.ArgumentException">The type of the source <see cref = "T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref
               name = "array" />. </exception>
        </member>
        <member name="M:Castle.Core.ReflectionBasedDictionaryAdapter.System#Collections#IDictionary#GetEnumerator">
            <summary>
              Returns an <see cref = "T:System.Collections.IDictionaryEnumerator" /> object for the <see
               cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <returns>
              An <see cref = "T:System.Collections.IDictionaryEnumerator" /> object for the <see
               cref = "T:System.Collections.IDictionary" /> object.
            </returns>
        </member>
        <member name="M:Castle.Core.ReflectionBasedDictionaryAdapter.Read(System.Collections.IDictionary,System.Object)">
            <summary>
              Reads values of properties from <paramref name = "valuesAsAnonymousObject" /> and inserts them into <paramref
               name = "targetDictionary" /> using property names as keys.
            </summary>
            <param name = "targetDictionary"></param>
            <param name = "valuesAsAnonymousObject"></param>
        </member>
        <member name="P:Castle.Core.ReflectionBasedDictionaryAdapter.Count">
            <summary>
              Gets the number of elements contained in the <see cref = "T:System.Collections.ICollection" />.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref = "T:System.Collections.ICollection" />.</returns>
        </member>
        <member name="P:Castle.Core.ReflectionBasedDictionaryAdapter.IsSynchronized">
            <summary>
              Gets a value indicating whether access to the <see cref = "T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref = "T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Castle.Core.ReflectionBasedDictionaryAdapter.SyncRoot">
            <summary>
              Gets an object that can be used to synchronize access to the <see cref = "T:System.Collections.ICollection" />.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref = "T:System.Collections.ICollection" />.</returns>
        </member>
        <member name="P:Castle.Core.ReflectionBasedDictionaryAdapter.IsReadOnly">
            <summary>
              Gets a value indicating whether the <see cref = "T:System.Collections.IDictionary" /> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Collections.IDictionary" /> object is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Castle.Core.ReflectionBasedDictionaryAdapter.Item(System.Object)">
            <summary>
              Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.Core.ReflectionBasedDictionaryAdapter.Keys">
            <summary>
              Gets an <see cref = "T:System.Collections.ICollection" /> object containing the keys of the <see
               cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <value></value>
            <returns>An <see cref = "T:System.Collections.ICollection" /> object containing the keys of the <see
               cref = "T:System.Collections.IDictionary" /> object.</returns>
        </member>
        <member name="P:Castle.Core.ReflectionBasedDictionaryAdapter.Values">
            <summary>
              Gets an <see cref = "T:System.Collections.ICollection" /> object containing the values in the <see
               cref = "T:System.Collections.IDictionary" /> object.
            </summary>
            <value></value>
            <returns>An <see cref = "T:System.Collections.ICollection" /> object containing the values in the <see
               cref = "T:System.Collections.IDictionary" /> object.</returns>
        </member>
        <member name="P:Castle.Core.ReflectionBasedDictionaryAdapter.System#Collections#IDictionary#IsFixedSize">
            <summary>
              Gets a value indicating whether the <see cref = "T:System.Collections.IDictionary" /> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="T:Castle.Core.Resource.IResource">
            <summary>
            Represents a 'streamable' resource. Can
            be a file, a resource in an assembly.
            </summary>
        </member>
        <member name="M:Castle.Core.Resource.IResource.GetStreamReader">
            <summary>
            Returns a reader for the stream
            </summary>
            <remarks>
            It's up to the caller to dispose the reader.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Castle.Core.Resource.IResource.GetStreamReader(System.Text.Encoding)">
            <summary>
            Returns a reader for the stream
            </summary>
            <remarks>
            It's up to the caller to dispose the reader.
            </remarks>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Core.Resource.IResource.CreateRelative(System.String)">
            <summary>
            Returns an instance of <see cref="T:Castle.Core.Resource.IResource"/>
            created according to the <c>relativePath</c>
            using itself as the root.
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="P:Castle.Core.Resource.IResource.FileBasePath">
            <summary>
            
            </summary>
            <remarks>
            Only valid for resources that
            can be obtained through relative paths
            </remarks>
        </member>
        <member name="T:Castle.Core.Resource.AbstractStreamResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Castle.Core.Resource.AbstractStreamResource.createStream">
            <summary>
            This returns a new stream instance each time it is called.
            It is the responsibility of the caller to dispose of this stream
            </summary>
        </member>
        <member name="T:Castle.Core.Resource.IResourceFactory">
            <summary>
            Depicts the contract for resource factories.
            </summary>
        </member>
        <member name="M:Castle.Core.Resource.IResourceFactory.Accept(Castle.Core.Resource.CustomUri)">
            <summary>
            Used to check whether the resource factory
            is able to deal with the given resource
            identifier.
            </summary>
            <remarks>
            Implementors should return <c>true</c>
            only if the given identifier is supported
            by the resource factory
            </remarks>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Core.Resource.IResourceFactory.Create(Castle.Core.Resource.CustomUri)">
            <summary>
            Creates an <see cref="T:Castle.Core.Resource.IResource"/> instance
            for the given resource identifier
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Core.Resource.IResourceFactory.Create(Castle.Core.Resource.CustomUri,System.String)">
            <summary>
            Creates an <see cref="T:Castle.Core.Resource.IResource"/> instance
            for the given resource identifier
            </summary>
            <param name="uri"></param>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.Core.Resource.FileResource">
            <summary>
            
            </summary>
        </member>
        <member name="T:Castle.Core.Resource.FileResourceFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:Castle.Core.Resource.StaticContentResource">
            <summary>
            Adapts a static string content as an <see cref="T:Castle.Core.Resource.IResource"/>
            </summary>
        </member>
        <member name="T:Castle.Core.Resource.UncResource">
            <summary>
            Enable access to files on network shares
            </summary>
        </member>
        <member name="T:Castle.Core.Smtp.DefaultSmtpSender">
            <summary>
            Default <see cref="T:Castle.Core.Smtp.IEmailSender"/> implementation.
            </summary>
        </member>
        <member name="T:Castle.Core.Smtp.IEmailSender">
            <summary>
            Email sender abstraction.
            </summary>
        </member>
        <member name="M:Castle.Core.Smtp.IEmailSender.Send(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a mail message.
            </summary>
            <param name="from">From field</param>
            <param name="to">To field</param>
            <param name="subject">E-mail's subject</param>
            <param name="messageText">message's body</param>
        </member>
        <member name="M:Castle.Core.Smtp.IEmailSender.Send(System.Net.Mail.MailMessage)">
            <summary>
            Sends a <see cref="T:System.Net.Mail.MailMessage">message</see>. 
            </summary>
            <param name="message"><see cref="T:System.Net.Mail.MailMessage">Message</see> instance</param>
        </member>
        <member name="M:Castle.Core.Smtp.IEmailSender.Send(System.Collections.Generic.IEnumerable{System.Net.Mail.MailMessage})">
            <summary>
            Sends multiple <see cref="T:System.Net.Mail.MailMessage">messages</see>. 
            </summary>
            <param name="messages">List of <see cref="T:System.Net.Mail.MailMessage">messages</see></param>
        </member>
        <member name="M:Castle.Core.Smtp.DefaultSmtpSender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Core.Smtp.DefaultSmtpSender"/> class based on the <see cref="T:System.Net.Mail.SmtpClient"/> configuration provided in the application configuration file.
            </summary>
            <remarks>
            This constructor is based on the default <see cref="T:System.Net.Mail.SmtpClient"/> configuration in the application configuration file.
            </remarks> 
        </member>
        <member name="M:Castle.Core.Smtp.DefaultSmtpSender.#ctor(System.String)">
            <summary>
            This service implementation
            requires a host name in order to work
            </summary>
            <param name="hostname">The smtp server name</param>
        </member>
        <member name="M:Castle.Core.Smtp.DefaultSmtpSender.Send(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a message. 
            </summary>
            <exception cref="T:System.ArgumentNullException">If any of the parameters is null</exception>
            <param name="from">From field</param>
            <param name="to">To field</param>
            <param name="subject">e-mail's subject</param>
            <param name="messageText">message's body</param>
        </member>
        <member name="M:Castle.Core.Smtp.DefaultSmtpSender.Send(System.Net.Mail.MailMessage)">
            <summary>
            Sends a message. 
            </summary>
            <exception cref="T:System.ArgumentNullException">If the message is null</exception>
            <param name="message">Message instance</param>
        </member>
        <member name="M:Castle.Core.Smtp.DefaultSmtpSender.Configure(System.Net.Mail.SmtpClient)">
            <summary>
            Configures the sender
            with port information and eventual credential
            informed
            </summary>
            <param name="smtpClient">Message instance</param>
        </member>
        <member name="P:Castle.Core.Smtp.DefaultSmtpSender.Port">
            <summary>
            Gets or sets the port used to 
            access the SMTP server
            </summary>
        </member>
        <member name="P:Castle.Core.Smtp.DefaultSmtpSender.Hostname">
            <summary>
            Gets the hostname.
            </summary>
            <value>The hostname.</value>
        </member>
        <member name="P:Castle.Core.Smtp.DefaultSmtpSender.AsyncSend">
            <summary>
            Gets or sets a value which is used to 
            configure if emails are going to be sent asynchronously or not.
            </summary>
        </member>
        <member name="P:Castle.Core.Smtp.DefaultSmtpSender.Timeout">
            <summary>
            Gets or sets a value that specifies 
            the amount of time after which a synchronous Send call times out.
            </summary>
        </member>
        <member name="P:Castle.Core.Smtp.DefaultSmtpSender.UseSsl">
            <summary>
            Gets or sets a value indicating whether the email should be sent using 
            a secure communication channel.
            </summary>
            <value><c>true</c> if should use SSL; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.Core.Smtp.DefaultSmtpSender.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:Castle.Core.Smtp.DefaultSmtpSender.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>The name of the user.</value>
        </member>
        <member name="P:Castle.Core.Smtp.DefaultSmtpSender.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Castle.Core.Smtp.DefaultSmtpSender.HasCredentials">
            <summary>
            Gets a value indicating whether credentials were informed.
            </summary>
            <value>
            <see langword="true"/> if this instance has credentials; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Castle.DynamicProxy.IInvocation">
            <summary>
              Encapsulates an invocation of a proxied method.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.IInvocation.GetArgumentValue(System.Int32)">
            <summary>
              Gets the value of the argument at the specified <paramref name = "index" />.
            </summary>
            <param name = "index">The index.</param>
            <returns>The value of the argument at the specified <paramref name = "index" />.</returns>
        </member>
        <member name="M:Castle.DynamicProxy.IInvocation.GetConcreteMethod">
            <summary>
              Returns the concrete instantiation of the <see cref="P:Castle.DynamicProxy.IInvocation.Method"/> on the proxy, with any generic
              parameters bound to real types.
            </summary>
            <returns>
              The concrete instantiation of the <see cref="P:Castle.DynamicProxy.IInvocation.Method"/> on the proxy, or the <see cref="P:Castle.DynamicProxy.IInvocation.Method"/> if
              not a generic method.
            </returns>
            <remarks>
              Can be slower than calling <see cref="P:Castle.DynamicProxy.IInvocation.Method"/>.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.IInvocation.GetConcreteMethodInvocationTarget">
            <summary>
              Returns the concrete instantiation of <see cref="P:Castle.DynamicProxy.IInvocation.MethodInvocationTarget"/>, with any
              generic parameters bound to real types.
              For interface proxies, this will point to the <see cref="T:System.Reflection.MethodInfo"/> on the target class.
            </summary>
            <returns>The concrete instantiation of <see cref="P:Castle.DynamicProxy.IInvocation.MethodInvocationTarget"/>, or
              <see cref="P:Castle.DynamicProxy.IInvocation.MethodInvocationTarget"/> if not a generic method.</returns>
            <remarks>
              In debug builds this can be slower than calling <see cref="P:Castle.DynamicProxy.IInvocation.MethodInvocationTarget"/>.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.IInvocation.Proceed">
            <summary>
              Proceeds the call to the next interceptor in line, and ultimately to the target method.
            </summary>
            <remarks>
              Since interface proxies without a target don't have the target implementation to proceed to,
              it is important, that the last interceptor does not call this method, otherwise a
              <see cref="T:System.NotImplementedException"/> will be thrown.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.IInvocation.SetArgumentValue(System.Int32,System.Object)">
            <summary>
              Overrides the value of an argument at the given <paramref name="index"/> with the
              new <paramref name="value"/> provided.
            </summary>
            <remarks>
              This method accepts an <see cref="T:System.Object"/>, however the value provided must be compatible
              with the type of the argument defined on the method, otherwise an exception will be thrown.
            </remarks>
            <param name="index">The index of the argument to override.</param>
            <param name="value">The new value for the argument.</param>
        </member>
        <member name="P:Castle.DynamicProxy.IInvocation.Arguments">
            <summary>
              Gets the arguments that the <see cref="P:Castle.DynamicProxy.IInvocation.Method"/> has been invoked with.
            </summary>
            <value>The arguments the method was invoked with.</value>
        </member>
        <member name="P:Castle.DynamicProxy.IInvocation.GenericArguments">
            <summary>
              Gets the generic arguments of the method.
            </summary>
            <value>The generic arguments, or null if not a generic method.</value>
        </member>
        <member name="P:Castle.DynamicProxy.IInvocation.InvocationTarget">
            <summary>
              Gets the object on which the invocation is performed. This is different from proxy object
              because most of the time this will be the proxy target object.
            </summary>
            <seealso cref="T:Castle.DynamicProxy.IChangeProxyTarget"/>
            <value>The invocation target.</value>
        </member>
        <member name="P:Castle.DynamicProxy.IInvocation.Method">
            <summary>
              Gets the <see cref="T:System.Reflection.MethodInfo"/> representing the method being invoked on the proxy.
            </summary>
            <value>The <see cref="T:System.Reflection.MethodInfo"/> representing the method being invoked.</value>
        </member>
        <member name="P:Castle.DynamicProxy.IInvocation.MethodInvocationTarget">
            <summary>
              For interface proxies, this will point to the <see cref="T:System.Reflection.MethodInfo"/> on the target class.
            </summary>
            <value>The method invocation target.</value>
        </member>
        <member name="P:Castle.DynamicProxy.IInvocation.Proxy">
            <summary>
              Gets the proxy object on which the intercepted method is invoked.
            </summary>
            <value>Proxy object on which the intercepted method is invoked.</value>
        </member>
        <member name="P:Castle.DynamicProxy.IInvocation.ReturnValue">
            <summary>
              Gets or sets the return value of the method.
            </summary>
            <value>The return value of the method.</value>
        </member>
        <member name="P:Castle.DynamicProxy.IInvocation.TargetType">
            <summary>
              Gets the type of the target object for the intercepted method.
            </summary>
            <value>The type of the target object.</value>
        </member>
        <member name="T:Castle.DynamicProxy.IProxyGenerationHook">
            <summary>
              Used during the target type inspection process. Implementors have a chance to customize the
              proxy generation process.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.IProxyGenerationHook.MethodsInspected">
            <summary>
              Invoked by the generation process to notify that the whole process has completed.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.IProxyGenerationHook.NonProxyableMemberNotification(System.Type,System.Reflection.MemberInfo)">
            <summary>
              Invoked by the generation process to notify that a member was not marked as virtual.
            </summary>
            <param name = "type">The type which declares the non-virtual member.</param>
            <param name = "memberInfo">The non-virtual member.</param>
            <remarks>
              This method gives an opportunity to inspect any non-proxyable member of a type that has 
              been requested to be proxied, and if appropriate - throw an exception to notify the caller.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.IProxyGenerationHook.ShouldInterceptMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
              Invoked by the generation process to determine if the specified method should be proxied.
            </summary>
            <param name = "type">The type which declares the given method.</param>
            <param name = "methodInfo">The method to inspect.</param>
            <returns>True if the given method should be proxied; false otherwise.</returns>
        </member>
        <member name="M:Castle.DynamicProxy.Contributors.MembersCollector.AcceptMethod(System.Reflection.MethodInfo,System.Boolean,Castle.DynamicProxy.IProxyGenerationHook)">
            <summary>
              Performs some basic screening and invokes the <see cref="T:Castle.DynamicProxy.IProxyGenerationHook"/>
              to select methods.
            </summary>
            <param name="method"></param>
            <param name="onlyVirtuals"></param>
            <param name="hook"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.DynamicProxy.Contributors.ITypeContributor">
            <summary>
              Interface describing elements composing generated type
            </summary>
        </member>
        <member name="T:Castle.DynamicProxy.DefaultProxyBuilder">
            <summary>
              Default implementation of <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> interface producing in-memory proxy assemblies.
            </summary>
        </member>
        <member name="T:Castle.DynamicProxy.IProxyBuilder">
            <summary>
              Abstracts the implementation of proxy type construction.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.IProxyBuilder.CreateClassProxyType(System.Type,System.Type[],Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates a proxy type for given <paramref name="classToProxy"/>, implementing <paramref name="additionalInterfacesToProxy"/>, using <paramref name="options"/> provided.
            </summary>
            <param name="classToProxy">The class type to proxy.</param>
            <param name="additionalInterfacesToProxy">Additional interface types to proxy.</param>
            <param name="options">The proxy generation options.</param>
            <returns>The generated proxy type.</returns>
            <remarks>
              Implementers should return a proxy type for the specified class and interfaces.
              Additional interfaces should be only 'mark' interfaces, that is, they should work like interface proxy without target. (See <see cref="M:Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(System.Type,System.Type[],Castle.DynamicProxy.ProxyGenerationOptions)"/> method.)
            </remarks>
            <exception cref="T:Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is not public.
              Note that to avoid this exception, you can mark offending type internal, and define <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.</exception>
            <seealso cref="T:Castle.DynamicProxy.Generators.ClassProxyGenerator"/>
        </member>
        <member name="M:Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithTarget(System.Type,System.Type[],System.Type,Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates a proxy type that proxies calls to <paramref name="interfaceToProxy"/> members on <paramref name="targetType"/>, implementing <paramref name="additionalInterfacesToProxy"/>, using <paramref name="options"/> provided.
            </summary>
            <param name="interfaceToProxy">The interface type to proxy.</param>
            <param name="additionalInterfacesToProxy">Additional interface types to proxy.</param>
            <param name="targetType">Type implementing <paramref name="interfaceToProxy"/> on which calls to the interface members should be intercepted.</param>
            <param name="options">The proxy generation options.</param>
            <returns>The generated proxy type.</returns>
            <remarks>
              Implementers should return a proxy type for the specified interface that 'proceeds' executions to the specified target.
              Additional interfaces should be only 'mark' interfaces, that is, they should work like interface proxy without target. (See <see cref="M:Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(System.Type,System.Type[],Castle.DynamicProxy.ProxyGenerationOptions)"/> method.)
            </remarks>
            <exception cref="T:Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is not public.
              Note that to avoid this exception, you can mark offending type internal, and define <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.</exception>
            <seealso cref="T:Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator"/>
        </member>
        <member name="M:Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithTargetInterface(System.Type,System.Type[],Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates a proxy type for given <paramref name="interfaceToProxy"/> and <parmaref name="additionalInterfacesToProxy"/> that delegates all calls to the provided interceptors and allows interceptors to switch the actual target of invocation.
            </summary>
            <param name="interfaceToProxy">The interface type to proxy.</param>
            <param name="additionalInterfacesToProxy">Additional interface types to proxy.</param>
            <param name="options">The proxy generation options.</param>
            <returns>The generated proxy type.</returns>
            <remarks>
              Implementers should return a proxy type for the specified interface(s) that delegate all executions to the specified interceptors
              and uses an instance of the interface as their targets (i.e. <see cref="P:Castle.DynamicProxy.IInvocation.InvocationTarget"/>), rather than a class. All <see cref="T:Castle.DynamicProxy.IInvocation"/> classes should then implement <see cref="T:Castle.DynamicProxy.IChangeProxyTarget"/> interface,
              to allow interceptors to switch invocation target with instance of another type implementing called interface.
            </remarks>
            <exception cref="T:Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is not public.
              Note that to avoid this exception, you can mark offending type internal, and define <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.</exception>
            <seealso cref="T:Castle.DynamicProxy.Generators.InterfaceProxyWithTargetInterfaceGenerator"/>
        </member>
        <member name="M:Castle.DynamicProxy.IProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(System.Type,System.Type[],Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates a proxy type for given <paramref name="interfaceToProxy"/> that delegates all calls to the provided interceptors.
            </summary>
            <param name="interfaceToProxy">The interface type to proxy.</param>
            <param name="additionalInterfacesToProxy">Additional interface types to proxy.</param>
            <param name="options">The proxy generation options.</param>
            <returns>The generated proxy type.</returns>
            <remarks>
              Implementers should return a proxy type for the specified interface and additional interfaces that delegate all executions to the specified interceptors.
            </remarks>
            <exception cref="T:Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:Castle.DynamicProxy.Generators.GeneratorException">Thrown when <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is not public.
              Note that to avoid this exception, you can mark offending type internal, and define <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.</exception>
            <seealso cref="T:Castle.DynamicProxy.Generators.InterfaceProxyWithoutTargetGenerator"/>
        </member>
        <member name="P:Castle.DynamicProxy.IProxyBuilder.Logger">
            <summary>
              Gets or sets the <see cref="T:Castle.Core.Logging.ILogger"/> that this <see cref="T:Castle.DynamicProxy.ProxyGenerator"/> logs to.
            </summary>
        </member>
        <member name="P:Castle.DynamicProxy.IProxyBuilder.ModuleScope">
            <summary>
              Gets the <see cref="P:Castle.DynamicProxy.IProxyBuilder.ModuleScope"/> associated with this builder.
            </summary>
            <value>The module scope associated with this builder.</value>
        </member>
        <member name="M:Castle.DynamicProxy.DefaultProxyBuilder.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.DefaultProxyBuilder"/> class with new <see cref="P:Castle.DynamicProxy.DefaultProxyBuilder.ModuleScope"/>.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.DefaultProxyBuilder.#ctor(Castle.DynamicProxy.ModuleScope)">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.DefaultProxyBuilder"/> class.
            </summary>
            <param name="scope">The module scope for generated proxy types.</param>
        </member>
        <member name="T:Castle.DynamicProxy.IAttributeDisassembler">
            <summary>
              Provides functionality for disassembling instances of attributes to CustomAttributeBuilder form, during the process of emiting new types by Dynamic Proxy.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.IAttributeDisassembler.Disassemble(System.Attribute)">
            <summary>
              Disassembles given attribute instance back to corresponding CustomAttributeBuilder.
            </summary>
            <param name="attribute">An instance of attribute to disassemble</param>
            <returns><see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> corresponding 1 to 1 to given attribute instance, or null reference.</returns>
            <remarks>
              Implementers should return <see cref="T:System.Reflection.Emit.CustomAttributeBuilder"/> that corresponds to given attribute instance 1 to 1,
              that is after calling specified constructor with specified arguments, and setting specified properties and fields with values specified
              we should be able to get an attribute instance identical to the one passed in <paramref name="attribute"/>. Implementer can return null
              if it wishes to opt out of replicating the attribute. Notice however, that for some cases, like attributes passed explicitly by the user
              it is illegal to return null, and doing so will result in exception.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.AttributeDisassembler.HandleError(System.Type,System.Exception)">
            <summary>
              Handles error during disassembly process
            </summary>
            <param name = "attributeType">Type of the attribute being disassembled</param>
            <param name = "exception">Exception thrown during the process</param>
            <returns>usually null, or (re)throws the exception</returns>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.AttributeDisassembler.InitializeConstructorArgs(System.Type,System.Attribute,System.Reflection.ParameterInfo[])">
            <summary>
              Here we try to match a constructor argument to its value.
              Since we can't get the values from the assembly, we use some heuristics to get it.
              a/ we first try to match all the properties on the attributes by name (case insensitive) to the argument
              b/ if we fail we try to match them by property type, with some smarts about convertions (i,e: can use Guid for string).
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.AttributeDisassembler.ReplaceIfBetterMatch(System.Reflection.ParameterInfo,System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
              We have the following rules here.
              Try to find a matching type, failing that, if the parameter is string, get the first property (under the assumption that
              we can convert it.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.AttributeDisassembler.ConvertValue(System.Object,System.Type)">
            <summary>
              Attributes can only accept simple types, so we return null for null,
              if the value is passed as string we call to string (should help with converting), 
              otherwise, we use the value as is (enums, integer, etc).
            </summary>
        </member>
        <member name="T:Castle.DynamicProxy.Generators.BaseProxyGenerator">
            <summary>
              Base class that exposes the common functionalities
              to proxy generation.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.BaseProxyGenerator.AddMappingNoCheck(System.Type,Castle.DynamicProxy.Contributors.ITypeContributor,System.Collections.Generic.IDictionary{System.Type,Castle.DynamicProxy.Contributors.ITypeContributor})">
            <summary>
              It is safe to add mapping (no mapping for the interface exists)
            </summary>
            <param name = "implementer"></param>
            <param name = "interface"></param>
            <param name = "mapping"></param>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.BaseProxyGenerator.GenerateParameterlessConstructor(Castle.DynamicProxy.Generators.Emitters.ClassEmitter,System.Type,Castle.DynamicProxy.Generators.Emitters.SimpleAST.FieldReference)">
            <summary>
              Generates a parameters constructor that initializes the proxy
              state with <see cref="T:Castle.DynamicProxy.StandardInterceptor"/> just to make it non-null.
              <para>
                This constructor is important to allow proxies to be XML serializable
              </para>
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.CacheKey.#ctor(System.Reflection.MemberInfo,System.Type,System.Type[],Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.Generators.CacheKey"/> class.
            </summary>
            <param name="target">Target element. This is either target type or target method for invocation types.</param>
            <param name="type">The type of the proxy. This is base type for invocation types.</param>
            <param name="interfaces">The interfaces.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.CacheKey.#ctor(System.Type,System.Type[],Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.Generators.CacheKey"/> class.
            </summary>
            <param name="target">Type of the target.</param>
            <param name="interfaces">The interfaces.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.InvocationTypeGenerator.GetBaseCtorArguments(System.Type,Castle.DynamicProxy.ProxyGenerationOptions,System.Reflection.ConstructorInfo@)">
            <summary>
              Generates the constructor for the class that extends
              <see cref="T:Castle.DynamicProxy.AbstractInvocation"/>
            </summary>
            <param name="targetFieldType"></param>
            <param name="proxyGenerationOptions"></param>
            <param name="baseConstructor"></param>
        </member>
        <member name="T:Castle.DynamicProxy.Generators.Emitters.LdcOpCodesDictionary">
            <summary>
              s
              Provides appropriate Ldc.X opcode for the type of primitive value to be loaded.
            </summary>
        </member>
        <member name="T:Castle.DynamicProxy.Generators.Emitters.LdindOpCodesDictionary">
            <summary>
              Provides appropriate Ldind.X opcode for 
              the type of primitive value to be loaded indirectly.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.Emitters.OpCodeUtil.EmitLoadIndirectOpCodeForType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
              Emits a load indirect opcode of the appropriate type for a value or object reference.
              Pops a pointer off the evaluation stack, dereferences it and loads
              a value of the specified type.
            </summary>
            <param name = "gen"></param>
            <param name = "type"></param>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.Emitters.OpCodeUtil.EmitLoadOpCodeForConstantValue(System.Reflection.Emit.ILGenerator,System.Object)">
            <summary>
              Emits a load opcode of the appropriate kind for a constant string or
              primitive value.
            </summary>
            <param name = "gen"></param>
            <param name = "value"></param>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.Emitters.OpCodeUtil.EmitLoadOpCodeForDefaultValueOfType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
              Emits a load opcode of the appropriate kind for the constant default value of a
              type, such as 0 for value types and null for reference types.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.Emitters.OpCodeUtil.EmitStoreIndirectOpCodeForType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
              Emits a store indirectopcode of the appropriate type for a value or object reference.
              Pops a value of the specified type and a pointer off the evaluation stack, and
              stores the value.
            </summary>
            <param name = "gen"></param>
            <param name = "type"></param>
        </member>
        <member name="T:Castle.DynamicProxy.Generators.Emitters.PropertiesCollection">
            <summary>
              Summary description for PropertiesCollection.
            </summary>
        </member>
        <member name="T:Castle.DynamicProxy.Generators.Emitters.SimpleAST.IndirectReference">
            <summary>
              Wraps a reference that is passed 
              ByRef and provides indirect load/store support.
            </summary>
        </member>
        <member name="T:Castle.DynamicProxy.Generators.Emitters.SimpleAST.NewArrayExpression">
            <summary>
              Summary description for NewArrayExpression.
            </summary>
        </member>
        <member name="T:Castle.DynamicProxy.Generators.Emitters.SimpleAST.ReferencesToObjectArrayExpression">
            <summary>
            </summary>
        </member>
        <member name="T:Castle.DynamicProxy.Generators.Emitters.StindOpCodesDictionary">
            <summary>
              Provides appropriate Stind.X opcode 
              for the type of primitive value to be stored indirectly.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.Emitters.TypeUtil.GetAllInterfaces(System.Type[])">
            <summary>
              Returns list of all unique interfaces implemented given types, including their base interfaces.
            </summary>
            <param name = "types"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.DynamicProxy.Generators.INamingScope">
            <summary>
              Represents the scope of uniquenes of names for types and their members
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.INamingScope.GetUniqueName(System.String)">
            <summary>
              Gets a unique name based on <paramref name="suggestedName"/>
            </summary>
            <param name="suggestedName">Name suggested by the caller</param>
            <returns>Unique name based on <paramref name="suggestedName"/>.</returns>
            <remarks>
              Implementers should provide name as closely resembling <paramref name="suggestedName"/> as possible.
              Generally if no collision occurs it is suggested to return suggested name, otherwise append sequential suffix.
              Implementers must return deterministic names, that is when <see cref="M:Castle.DynamicProxy.Generators.INamingScope.GetUniqueName(System.String)"/> is called twice 
              with the same suggested name, the same returned name should be provided each time. Non-deterministic return
              values, like appending random suffices will break serialization of proxies.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.INamingScope.SafeSubScope">
            <summary>
              Returns new, disposable naming scope. It is responsibilty of the caller to make sure that no naming collision
              with enclosing scope, or other subscopes is possible.
            </summary>
            <returns>New naming scope.</returns>
        </member>
        <member name="M:Castle.DynamicProxy.Generators.MetaEvent.#ctor(System.String,System.Type,System.Type,Castle.DynamicProxy.Generators.MetaMethod,Castle.DynamicProxy.Generators.MetaMethod,System.Reflection.EventAttributes)">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.Generators.MetaEvent"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="declaringType">Type declaring the original event being overriten, or null.</param>
            <param name="eventDelegateType"></param>
            <param name="adder">The add method.</param>
            <param name="remover">The remove method.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:Castle.DynamicProxy.Generators.MethodFinder">
            <summary>
              Returns the methods implemented by a type. Use this instead of Type.GetMethods() to work around a CLR issue
              where duplicate MethodInfos are returned by Type.GetMethods() after a token of a generic type's method was loaded.
            </summary>
        </member>
        <member name="T:Castle.DynamicProxy.IChangeProxyTarget">
            <summary>
              Exposes means to change target objects of proxies and invocations
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.IChangeProxyTarget.ChangeInvocationTarget(System.Object)">
            <summary>
              Changes the target object (<see cref="P:Castle.DynamicProxy.IInvocation.InvocationTarget"/>) of current <see cref="T:Castle.DynamicProxy.IInvocation"/>.
            </summary>
            <param name="target">The new value of target of invocation.</param>
            <remarks>
              Although the method takes <see cref="T:System.Object"/> the actual instance must be of type assignable to <see cref="P:Castle.DynamicProxy.IInvocation.TargetType"/>, otherwise an <see cref="T:System.InvalidCastException"/> will be thrown.
              Also while it's technically legal to pass null reference (Nothing in Visual Basic) as <paramref name="target"/>, for obvious reasons Dynamic Proxy will not be able to call the intercepted method on such target.
              In this case last interceptor in the pipeline mustn't call <see cref="M:Castle.DynamicProxy.IInvocation.Proceed"/> or a <see cref="T:System.NotImplementedException"/> will be throws.
              Also while it's technically legal to pass proxy itself as <paramref name="target"/>, this would create stack overflow.
              In this case last interceptor in the pipeline mustn't call <see cref="M:Castle.DynamicProxy.IInvocation.Proceed"/> or a <see cref="T:System.InvalidOperationException"/> will be throws.
            </remarks>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="target"/> is not assignable to the proxied type.</exception>
        </member>
        <member name="M:Castle.DynamicProxy.IChangeProxyTarget.ChangeProxyTarget(System.Object)">
            <summary>
              Permanently changes the target object of the proxy. This does not affect target of the current invocation.
            </summary>
            <param name="target">The new value of target of the proxy.</param>
            <remarks>
              Although the method takes <see cref="T:System.Object"/> the actual instance must be of type assignable to proxy's target type, otherwise an <see cref="T:System.InvalidCastException"/> will be thrown.
              Also while it's technically legal to pass null reference (Nothing in Visual Basic) as <paramref name="target"/>, for obvious reasons Dynamic Proxy will not be able to call the intercepted method on such target.
              In this case last interceptor in the pipeline mustn't call <see cref="M:Castle.DynamicProxy.IInvocation.Proceed"/> or a <see cref="T:System.NotImplementedException"/> will be throws.
              Also while it's technically legal to pass proxy itself as <paramref name="target"/>, this would create stack overflow.
              In this case last interceptor in the pipeline mustn't call <see cref="M:Castle.DynamicProxy.IInvocation.Proceed"/> or a <see cref="T:System.InvalidOperationException"/> will be throws.
            </remarks>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="target"/> is not assignable to the proxied type.</exception>
        </member>
        <member name="T:Castle.DynamicProxy.IInterceptorSelector">
            <summary>
              Provides an extension point that allows proxies to choose specific interceptors on
              a per method basis.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.IInterceptorSelector.SelectInterceptors(System.Type,System.Reflection.MethodInfo,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Selects the interceptors that should intercept calls to the given <paramref name="method"/>.
            </summary>
            <param name="type">The type declaring the method to intercept.</param>
            <param name="method">The method that will be intercepted.</param>
            <param name="interceptors">All interceptors registered with the proxy.</param>
            <returns>An array of interceptors to invoke upon calling the <paramref name="method"/>.</returns>
            <remarks>
              This method is called only once per proxy instance, upon the first call to the
              <paramref name="method"/>. Either an empty array or null are valid return values to indicate
              that no interceptor should intercept calls to the method. Although it is not advised, it is
              legal to return other <see cref="T:Castle.DynamicProxy.IInterceptor"/> implementations than these provided in
              <paramref name="interceptors"/>.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.Internal.AttributeUtil.AddDisassembler``1(Castle.DynamicProxy.IAttributeDisassembler)">
            <summary>
              Registers custom disassembler to handle disassembly of specified type of attributes.
            </summary>
            <typeparam name="TAttribute">Type of attributes to handle</typeparam>
            <param name="disassembler">Disassembler converting existing instances of Attributes to CustomAttributeBuilders</param>
            <remarks>
              When disassembling an attribute Dynamic Proxy will first check if an custom disassembler has been registered to handle attributes of that type, 
              and if none is found, it'll use the <see cref="P:Castle.DynamicProxy.Internal.AttributeUtil.FallbackDisassembler"/>.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.Internal.AttributeUtil.ShouldSkipAttributeReplication(System.Type)">
            <summary>
              Attributes should be replicated if they are non-inheritable,
              but there are some special cases where the attributes means
              something to the CLR, where they should be skipped.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.Internal.InternalsUtil.IsInternal(System.Reflection.MethodBase)">
            <summary>
              Determines whether the specified method is internal.
            </summary>
            <param name = "method">The method.</param>
            <returns>
              <c>true</c> if the specified method is internal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.DynamicProxy.Internal.InternalsUtil.IsInternalToDynamicProxy(System.Reflection.Assembly)">
            <summary>
              Determines whether this assembly has internals visible to dynamic proxy.
            </summary>
            <param name = "asm">The assembly to inspect.</param>
        </member>
        <member name="M:Castle.DynamicProxy.Internal.InternalsUtil.IsAccessible(System.Reflection.MethodBase)">
            <summary>
              Checks if the method is public or protected.
            </summary>
            <param name = "method"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.DynamicProxy.IProxyTargetAccessor.DynProxyGetTarget">
            <summary>
              Get the proxy target (note that null is a valid target!)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.DynamicProxy.IProxyTargetAccessor.GetInterceptors">
            <summary>
              Gets the interceptors for the proxy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.DynamicProxy.MixinData.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Because we need to cache the types based on the mixed in mixins, we do the following here:
              - Get all the mixin interfaces
              - Sort them by full name
              - Return them by position
            
            The idea is to have reproducible behavior for the case that mixins are registered in different orders.
            This method is here because it is required 
            </summary>
        </member>
        <member name="T:Castle.DynamicProxy.ModuleScope">
            <summary>
              Summary description for ModuleScope.
            </summary>
        </member>
        <member name="F:Castle.DynamicProxy.ModuleScope.DEFAULT_FILE_NAME">
            <summary>
              The default file name used when the assembly is saved using <see cref="F:Castle.DynamicProxy.ModuleScope.DEFAULT_FILE_NAME"/>.
            </summary>
        </member>
        <member name="F:Castle.DynamicProxy.ModuleScope.DEFAULT_ASSEMBLY_NAME">
            <summary>
              The default assembly (simple) name used for the assemblies generated by a <see cref="T:Castle.DynamicProxy.ModuleScope"/> instance.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.ModuleScope.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.ModuleScope"/> class; assemblies created by this instance will not be saved.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.ModuleScope.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.ModuleScope"/> class, allowing to specify whether the assemblies generated by this instance
              should be saved.
            </summary>
            <param name="savePhysicalAssembly">If set to <c>true</c> saves the generated module.</param>
        </member>
        <member name="M:Castle.DynamicProxy.ModuleScope.#ctor(System.Boolean,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.ModuleScope"/> class, allowing to specify whether the assemblies generated by this instance
              should be saved.
            </summary>
            <param name="savePhysicalAssembly">If set to <c>true</c> saves the generated module.</param>
            <param name="disableSignedModule">If set to <c>true</c> disables ability to generate signed module. This should be used in cases where ran under constrained permissions.</param>
        </member>
        <member name="M:Castle.DynamicProxy.ModuleScope.#ctor(System.Boolean,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.ModuleScope"/> class, allowing to specify whether the assemblies generated by this instance
              should be saved and what simple names are to be assigned to them.
            </summary>
            <param name="savePhysicalAssembly">If set to <c>true</c> saves the generated module.</param>
            <param name="disableSignedModule">If set to <c>true</c> disables ability to generate signed module. This should be used in cases where ran under constrained permissions.</param>
            <param name="strongAssemblyName">The simple name of the strong-named assembly generated by this <see cref="T:Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="strongModulePath">The path and file name of the manifest module of the strong-named assembly generated by this <see cref="T:Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="weakAssemblyName">The simple name of the weak-named assembly generated by this <see cref="T:Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="weakModulePath">The path and file name of the manifest module of the weak-named assembly generated by this <see cref="T:Castle.DynamicProxy.ModuleScope"/>.</param>
        </member>
        <member name="M:Castle.DynamicProxy.ModuleScope.#ctor(System.Boolean,System.Boolean,Castle.DynamicProxy.Generators.INamingScope,System.String,System.String,System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.ModuleScope"/> class, allowing to specify whether the assemblies generated by this instance
              should be saved and what simple names are to be assigned to them.
            </summary>
            <param name="savePhysicalAssembly">If set to <c>true</c> saves the generated module.</param>
            <param name="disableSignedModule">If set to <c>true</c> disables ability to generate signed module. This should be used in cases where ran under constrained permissions.</param>
            <param name="namingScope">Naming scope used to provide unique names to generated types and their members (usually via sub-scopes).</param>
            <param name="strongAssemblyName">The simple name of the strong-named assembly generated by this <see cref="T:Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="strongModulePath">The path and file name of the manifest module of the strong-named assembly generated by this <see cref="T:Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="weakAssemblyName">The simple name of the weak-named assembly generated by this <see cref="T:Castle.DynamicProxy.ModuleScope"/>.</param>
            <param name="weakModulePath">The path and file name of the manifest module of the weak-named assembly generated by this <see cref="T:Castle.DynamicProxy.ModuleScope"/>.</param>
        </member>
        <member name="M:Castle.DynamicProxy.ModuleScope.GetFromCache(Castle.DynamicProxy.Generators.CacheKey)">
            <summary>
              Returns a type from this scope's type cache, or null if the key cannot be found.
            </summary>
            <param name = "key">The key to be looked up in the cache.</param>
            <returns>The type from this scope's type cache matching the key, or null if the key cannot be found</returns>
        </member>
        <member name="M:Castle.DynamicProxy.ModuleScope.RegisterInCache(Castle.DynamicProxy.Generators.CacheKey,System.Type)">
            <summary>
              Registers a type in this scope's type cache.
            </summary>
            <param name = "key">The key to be associated with the type.</param>
            <param name = "type">The type to be stored in the cache.</param>
        </member>
        <member name="M:Castle.DynamicProxy.ModuleScope.GetKeyPair">
            <summary>
              Gets the key pair used to sign the strong-named assembly generated by this <see cref="T:Castle.DynamicProxy.ModuleScope"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.DynamicProxy.ModuleScope.ObtainDynamicModule(System.Boolean)">
            <summary>
              Gets the specified module generated by this scope, creating a new one if none has yet been generated.
            </summary>
            <param name = "isStrongNamed">If set to true, a strong-named module is returned; otherwise, a weak-named module is returned.</param>
            <returns>A strong-named or weak-named module generated by this scope, as specified by the <paramref
               name = "isStrongNamed" /> parameter.</returns>
        </member>
        <member name="M:Castle.DynamicProxy.ModuleScope.ObtainDynamicModuleWithStrongName">
            <summary>
              Gets the strong-named module generated by this scope, creating a new one if none has yet been generated.
            </summary>
            <returns>A strong-named module generated by this scope.</returns>
        </member>
        <member name="M:Castle.DynamicProxy.ModuleScope.ObtainDynamicModuleWithWeakName">
            <summary>
              Gets the weak-named module generated by this scope, creating a new one if none has yet been generated.
            </summary>
            <returns>A weak-named module generated by this scope.</returns>
        </member>
        <member name="M:Castle.DynamicProxy.ModuleScope.SaveAssembly">
            <summary>
              Saves the generated assembly with the name and directory information given when this <see cref="T:Castle.DynamicProxy.ModuleScope"/> instance was created (or with
              the <see cref="F:Castle.DynamicProxy.ModuleScope.DEFAULT_FILE_NAME"/> and current directory if none was given).
            </summary>
            <remarks>
              <para>
                This method stores the generated assembly in the directory passed as part of the module information specified when this instance was
                constructed (if any, else the current directory is used). If both a strong-named and a weak-named assembly
                have been generated, it will throw an exception; in this case, use the <see cref="M:Castle.DynamicProxy.ModuleScope.SaveAssembly(System.Boolean)"/> overload.
              </para>
              <para>
                If this <see cref="T:Castle.DynamicProxy.ModuleScope"/> was created without indicating that the assembly should be saved, this method does nothing.
              </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Both a strong-named and a weak-named assembly have been generated.</exception>
            <returns>The path of the generated assembly file, or null if no file has been generated.</returns>
        </member>
        <member name="M:Castle.DynamicProxy.ModuleScope.SaveAssembly(System.Boolean)">
            <summary>
              Saves the specified generated assembly with the name and directory information given when this <see cref="T:Castle.DynamicProxy.ModuleScope"/> instance was created
              (or with the <see cref="F:Castle.DynamicProxy.ModuleScope.DEFAULT_FILE_NAME"/> and current directory if none was given).
            </summary>
            <param name="strongNamed">True if the generated assembly with a strong name should be saved (see <see cref="P:Castle.DynamicProxy.ModuleScope.StrongNamedModule"/>);
              false if the generated assembly without a strong name should be saved (see <see cref="P:Castle.DynamicProxy.ModuleScope.WeakNamedModule"/>.</param>
            <remarks>
              <para>
                This method stores the specified generated assembly in the directory passed as part of the module information specified when this instance was
                constructed (if any, else the current directory is used).
              </para>
              <para>
                If this <see cref="T:Castle.DynamicProxy.ModuleScope"/> was created without indicating that the assembly should be saved, this method does nothing.
              </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">No assembly has been generated that matches the <paramref name="strongNamed"/> parameter.
            </exception>
            <returns>The path of the generated assembly file, or null if no file has been generated.</returns>
        </member>
        <member name="M:Castle.DynamicProxy.ModuleScope.LoadAssemblyIntoCache(System.Reflection.Assembly)">
            <summary>
              Loads the generated types from the given assembly into this <see cref="T:Castle.DynamicProxy.ModuleScope"/>'s cache.
            </summary>
            <param name="assembly">The assembly to load types from. This assembly must have been saved via <see cref="M:Castle.DynamicProxy.ModuleScope.SaveAssembly(System.Boolean)"/> or
              <see cref="M:Castle.DynamicProxy.ModuleScope.SaveAssembly"/>, or it must have the <see cref="T:Castle.DynamicProxy.Serialization.CacheMappingsAttribute"/> manually applied.</param>
            <remarks>
              This method can be used to load previously generated and persisted proxy types from disk into this scope's type cache, eg. in order
              to avoid the performance hit associated with proxy generation.
            </remarks>
        </member>
        <member name="P:Castle.DynamicProxy.ModuleScope.Lock">
            <summary>
              Users of this <see cref="T:Castle.DynamicProxy.ModuleScope"/> should use this lock when accessing the cache.
            </summary>
        </member>
        <member name="P:Castle.DynamicProxy.ModuleScope.StrongNamedModule">
            <summary>
              Gets the strong-named module generated by this scope, or <see langword = "null" /> if none has yet been generated.
            </summary>
            <value>The strong-named module generated by this scope, or <see langword = "null" /> if none has yet been generated.</value>
        </member>
        <member name="P:Castle.DynamicProxy.ModuleScope.StrongNamedModuleName">
            <summary>
              Gets the file name of the strongly named module generated by this scope.
            </summary>
            <value>The file name of the strongly named module generated by this scope.</value>
        </member>
        <member name="P:Castle.DynamicProxy.ModuleScope.StrongNamedModuleDirectory">
            <summary>
              Gets the directory where the strongly named module generated by this scope will be saved, or <see langword="null"/> if the current directory
              is used.
            </summary>
            <value>The directory where the strongly named module generated by this scope will be saved when <see cref="M:Castle.DynamicProxy.ModuleScope.SaveAssembly"/> is called
              (if this scope was created to save modules).</value>
        </member>
        <member name="P:Castle.DynamicProxy.ModuleScope.WeakNamedModule">
            <summary>
              Gets the weak-named module generated by this scope, or <see langword = "null" /> if none has yet been generated.
            </summary>
            <value>The weak-named module generated by this scope, or <see langword = "null" /> if none has yet been generated.</value>
        </member>
        <member name="P:Castle.DynamicProxy.ModuleScope.WeakNamedModuleName">
            <summary>
              Gets the file name of the weakly named module generated by this scope.
            </summary>
            <value>The file name of the weakly named module generated by this scope.</value>
        </member>
        <member name="P:Castle.DynamicProxy.ModuleScope.WeakNamedModuleDirectory">
            <summary>
              Gets the directory where the weakly named module generated by this scope will be saved, or <see langword="null"/> if the current directory
              is used.
            </summary>
            <value>The directory where the weakly named module generated by this scope will be saved when <see cref="M:Castle.DynamicProxy.ModuleScope.SaveAssembly"/> is called
              (if this scope was created to save modules).</value>
        </member>
        <member name="T:Castle.DynamicProxy.PersistentProxyBuilder">
            <summary>
              ProxyBuilder that persists the generated type.
            </summary>
            <remarks>
              The saved assembly contains just the last generated type.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.PersistentProxyBuilder.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.PersistentProxyBuilder"/> class.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.PersistentProxyBuilder.SaveAssembly">
            <summary>
              Saves the generated assembly to a physical file. Note that this renders the <see cref="T:Castle.DynamicProxy.PersistentProxyBuilder"/> unusable.
            </summary>
            <returns>The path of the generated assembly file, or null if no assembly has been generated.</returns>
            <remarks>
              This method does not support saving multiple files. If both a signed and an unsigned module have been generated, use the 
              respective methods of the <see cref="T:Castle.DynamicProxy.ModuleScope"/>.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerationOptions.#ctor(Castle.DynamicProxy.IProxyGenerationHook)">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.ProxyGenerationOptions"/> class.
            </summary>
            <param name="hook">The hook.</param>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerationOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.ProxyGenerationOptions"/> class.
            </summary>
        </member>
        <member name="T:Castle.DynamicProxy.ProxyGenerator">
            <summary>
              Provides proxy objects for classes and interfaces.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.#ctor(Castle.DynamicProxy.IProxyBuilder)">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.ProxyGenerator"/> class.
            </summary>
            <param name="builder">Proxy types builder.</param>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Castle.DynamicProxy.ProxyGenerator"/> class.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget``1(``0,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface implemented by <paramref name="target"/> which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>Object proxying calls to members of <typeparamref name="TInterface"/> on <paramref name="target"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/>is not an interface type.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface``1(``0,Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget``1(``0,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface implemented by <paramref name="target"/> which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/>is not an interface type.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface``1(``0,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget(System.Type,System.Object,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Object,Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget(System.Type,System.Object,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Object,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget(System.Type,System.Type[],System.Object,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types  on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Type[],System.Object,Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTarget(System.Type,System.Type[],System.Object,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on <paramref name="target"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method generates new proxy type for each type of <paramref name="target"/>, which affects performance. If you don't want to proxy types differently depending on the type of the target
              use <see cref="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Type[],System.Object,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])"/> method.
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Object,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface``1(``0,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface implemented by <paramref name="target"/> which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> type on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface``1(``0,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface implemented by <paramref name="target"/> which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> type on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Type[],System.Object,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Object,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithTargetInterface(System.Type,System.Type[],System.Object,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on <paramref name="target"/> object with given <paramref name="interceptors"/>.
              Interceptors can use <see cref="T:Castle.DynamicProxy.IChangeProxyTarget"/> interface to provide other target for method invocation than default <paramref name="target"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface implemented by <paramref name="target"/> which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on <paramref name="target"/> object or alternative implementation swapped at runtime by an interceptor.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="target"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="target"/> does not implement <paramref name="interfaceToProxy"/> interface.</exception>
            <exception cref="T:System.MissingMethodException">Thrown when no default constructor exists on actual type of <paramref name="target"/> object.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of actual type of <paramref name="target"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget``1(Castle.DynamicProxy.IInterceptor)">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on target object generated at runtime with given <paramref name="interceptor"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface which will be proxied.</typeparam>
            <param name="interceptor">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptor"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              As a result of that also at least one <see cref="T:Castle.DynamicProxy.IInterceptor"/> implementation must be provided.
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget``1(Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface which will be proxied.</typeparam>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              As a result of that also at least one <see cref="T:Castle.DynamicProxy.IInterceptor"/> implementation must be provided.
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget``1(Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <typeparamref name="TInterface"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TInterface">Type of the interface which will be proxied.</typeparam>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <typeparamref name="TInterface"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TInterface"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              As a result of that also at least one <see cref="T:Castle.DynamicProxy.IInterceptor"/> implementation must be provided.
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,Castle.DynamicProxy.IInterceptor)">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptor"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="interceptor">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptor"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> type on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,System.Type[],Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/>  is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(System.Type,System.Type[],Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to members of interface <paramref name="interfaceToProxy"/> on target object generated at runtime with given <paramref name="interceptors"/>.
            </summary>
            <param name="interfaceToProxy">Type of the interface which will be proxied.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              Object proxying calls to members of <paramref name="interfaceToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types on generated target object.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interfaceToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="interceptors"/> array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="interfaceToProxy"/> is not an interface type.</exception>
            <remarks>
              Since this method uses an empty-shell implementation of <paramref name="additionalInterfacesToProxy"/> to proxy generated at runtime, the actual implementation of proxied methods must be provided by given <see cref="T:Castle.DynamicProxy.IInterceptor"/> implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call <see cref="M:Castle.DynamicProxy.IInvocation.Proceed"/>, since there's no actual implementation to proceed with.
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget``1(``0,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <typeparamref name="TClass"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TClass">Type of class which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <typeparamref name="TClass"/> proxying calls to virtual members of <typeparamref name="TClass"/> type.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TClass"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <typeparamref name="TClass"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <typeparamref name="TClass"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget``1(``0,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <typeparamref name="TClass"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TClass">Type of class which will be proxied.</typeparam>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <typeparamref name="TClass"/> proxying calls to virtual members of <typeparamref name="TClass"/> type.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TClass"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <typeparamref name="TClass"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <typeparamref name="TClass"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Type[],System.Object,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Object,Castle.DynamicProxy.ProxyGenerationOptions,System.Object[],Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Object,System.Object[],Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Object,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no parameterless constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Object,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Type[],System.Object,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxyWithTarget(System.Type,System.Type[],System.Object,Castle.DynamicProxy.ProxyGenerationOptions,System.Object[],Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="target">The target object, calls to which will be intercepted.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxy``1(Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <typeparamref name="TClass"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TClass">Type of class which will be proxied.</typeparam>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <typeparamref name="TClass"/> proxying calls to virtual members of <typeparamref name="TClass"/> type.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TClass"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <typeparamref name="TClass"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <typeparamref name="TClass"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxy``1(Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <typeparamref name="TClass"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <typeparam name="TClass">Type of class which will be proxied.</typeparam>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <typeparamref name="TClass"/> proxying calls to virtual members of <typeparamref name="TClass"/> type.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when given <typeparamref name="TClass"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <typeparamref name="TClass"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <typeparamref name="TClass"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,System.Type[],Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,Castle.DynamicProxy.ProxyGenerationOptions,System.Object[],Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,System.Object[],Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no parameterless constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> type.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,System.Type[],Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no default constructor exists on type <paramref name="classToProxy"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when default constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(System.Type,System.Type[],Castle.DynamicProxy.ProxyGenerationOptions,System.Object[],Castle.DynamicProxy.IInterceptor[])">
            <summary>
              Creates proxy object intercepting calls to virtual members of type <paramref name="classToProxy"/> on newly created instance of that type with given <paramref name="interceptors"/>.
            </summary>
            <param name="classToProxy">Type of class which will be proxied.</param>
            <param name="additionalInterfacesToProxy">Additional interface types. Calls to their members will be proxied as well.</param>
            <param name="options">The proxy generation options used to influence generated proxy type and object.</param>
            <param name="constructorArguments">Arguments of constructor of type <paramref name="classToProxy"/> which should be used to create a new instance of that type.</param>
            <param name="interceptors">The interceptors called during the invocation of proxied methods.</param>
            <returns>
              New object of type <paramref name="classToProxy"/> proxying calls to virtual members of <paramref name="classToProxy"/> and <paramref name="additionalInterfacesToProxy"/> types.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="classToProxy"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when given <paramref name="options"/> object is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> or any of <paramref name="additionalInterfacesToProxy"/> is a generic type definition.</exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="classToProxy"/> is not a class type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no constructor exists on type <paramref name="classToProxy"/> with parameters matching <paramref name="constructorArguments"/>.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown when constructor of type <paramref name="classToProxy"/> throws an exception.</exception>
            <remarks>
              This method uses <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation to generate a proxy type.
              As such caller should expect any type of exception that given <see cref="T:Castle.DynamicProxy.IProxyBuilder"/> implementation may throw.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateClassProxyType(System.Type,System.Type[],Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates the proxy type for class proxy with given <paramref name="classToProxy"/> class, implementing given <paramref name="additionalInterfacesToProxy"/> and using provided <paramref name="options"/>.
            </summary>
            <param name="classToProxy">The base class for proxy type.</param>
            <param name="additionalInterfacesToProxy">The interfaces that proxy type should implement.</param>
            <param name="options">The options for proxy generation process.</param>
            <returns><see cref="T:System.Type"/> of proxy.</returns>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithTarget(System.Type,System.Type[],System.Type,Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates the proxy type for interface proxy with target for given <paramref name="interfaceToProxy"/> interface, implementing given <paramref name="additionalInterfacesToProxy"/> on given <paramref name="targetType"/> and using provided <paramref name="options"/>.
            </summary>
            <param name="interfaceToProxy">The interface proxy type should implement.</param>
            <param name="additionalInterfacesToProxy">The additional interfaces proxy type should implement.</param>
            <param name="targetType">Actual type that the proxy type will encompass.</param>
            <param name="options">The options for proxy generation process.</param>
            <returns><see cref="T:System.Type"/> of proxy.</returns>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithTargetInterface(System.Type,System.Type[],Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates the proxy type for interface proxy with target interface for given <paramref name="interfaceToProxy"/> interface, implementing given <paramref name="additionalInterfacesToProxy"/> on given <paramref name="interfaceToProxy"/> and using provided <paramref name="options"/>.
            </summary>
            <param name="interfaceToProxy">The interface proxy type should implement.</param>
            <param name="additionalInterfacesToProxy">The additional interfaces proxy type should implement.</param>
            <param name="options">The options for proxy generation process.</param>
            <returns><see cref="T:System.Type"/> of proxy.</returns>
        </member>
        <member name="M:Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(System.Type,System.Type[],Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
              Creates the proxy type for interface proxy without target for given <paramref name="interfaceToProxy"/> interface, implementing given <paramref name="additionalInterfacesToProxy"/> and using provided <paramref name="options"/>.
            </summary>
            <param name="interfaceToProxy">The interface proxy type should implement.</param>
            <param name="additionalInterfacesToProxy">The additional interfaces proxy type should implement.</param>
            <param name="options">The options for proxy generation process.</param>
            <returns><see cref="T:System.Type"/> of proxy.</returns>
        </member>
        <member name="P:Castle.DynamicProxy.ProxyGenerator.Logger">
            <summary>
              Gets or sets the <see cref="T:Castle.Core.Logging.ILogger"/> that this <see cref="T:Castle.DynamicProxy.ProxyGenerator"/> log to.
            </summary>
        </member>
        <member name="P:Castle.DynamicProxy.ProxyGenerator.ProxyBuilder">
            <summary>
              Gets the proxy builder instance used to generate proxy types.
            </summary>
            <value>The proxy builder.</value>
        </member>
        <member name="T:Castle.DynamicProxy.Serialization.CacheMappingsAttribute">
            <summary>
              Applied to the assemblies saved by <see cref="T:Castle.DynamicProxy.ModuleScope"/> in order to persist the cache data included in the persisted assembly.
            </summary>
        </member>
        <member name="T:Castle.DynamicProxy.Serialization.ProxyObjectReference">
            <summary>
              Handles the deserialization of proxies.
            </summary>
        </member>
        <member name="M:Castle.DynamicProxy.Serialization.ProxyObjectReference.ResetScope">
            <summary>
              Resets the <see cref="P:Castle.DynamicProxy.Serialization.ProxyObjectReference.ModuleScope"/> used for deserialization to a new scope.
            </summary>
            <remarks>
              This is useful for test cases.
            </remarks>
        </member>
        <member name="M:Castle.DynamicProxy.Serialization.ProxyObjectReference.SetScope(Castle.DynamicProxy.ModuleScope)">
            <summary>
              Resets the <see cref="P:Castle.DynamicProxy.Serialization.ProxyObjectReference.ModuleScope"/> used for deserialization to a given <paramref name="scope"/>.
            </summary>
            <param name="scope">The scope to be used for deserialization.</param>
            <remarks>
              By default, the deserialization process uses a different scope than the rest of the application, which can lead to multiple proxies
              being generated for the same type. By explicitly setting the deserialization scope to the application's scope, this can be avoided.
            </remarks>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.ProxyObjectReference.ModuleScope">
            <summary>
              Gets the <see cref="P:Castle.DynamicProxy.Serialization.ProxyObjectReference.ModuleScope"/> used for deserialization.
            </summary>
            <value>As <see cref="T:Castle.DynamicProxy.Serialization.ProxyObjectReference"/> has no way of automatically determining the scope used by the application (and the application
              might use more than one scope at the same time), <see cref="T:Castle.DynamicProxy.Serialization.ProxyObjectReference"/> uses a dedicated scope instance for deserializing proxy
              types. This instance can be reset and set to a specific value via <see cref="M:Castle.DynamicProxy.Serialization.ProxyObjectReference.ResetScope"/> and <see cref="M:Castle.DynamicProxy.Serialization.ProxyObjectReference.SetScope(Castle.DynamicProxy.ModuleScope)"/>.</value>
        </member>
        <member name="M:Castle.DynamicProxy.Serialization.RemotableInvocation.Proceed">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.RemotableInvocation.Method">
            <summary>
            </summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.RemotableInvocation.MethodInvocationTarget">
            <summary>
              For interface proxies, this will point to the
              <see cref="T:System.Reflection.MethodInfo"/> on the target class
            </summary>
        </member>
        <member name="T:Castle.DynamicProxy.Tokens.InvocationMethods">
            <summary>
              Holds <see cref="T:System.Reflection.MethodInfo"/> objects representing methods of <see cref="T:Castle.DynamicProxy.AbstractInvocation"/> class.
            </summary>
        </member>
        <member name="T:Castle.DynamicProxy.Tokens.SerializationInfoMethods">
            <summary>
              Holds <see cref="T:System.Reflection.MethodInfo"/> objects representing methods of <see cref="T:System.Runtime.Serialization.SerializationInfo"/> class.
            </summary>
        </member>
        <member name="F:Castle.DynamicProxy.Tokens.SerializationInfoMethods.AddValue_Bool">
            <summary>
              <see cref="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="F:Castle.DynamicProxy.Tokens.SerializationInfoMethods.AddValue_Int32">
            <summary>
              <see cref="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int32)"/>
            </summary>
        </member>
        <member name="F:Castle.DynamicProxy.Tokens.SerializationInfoMethods.AddValue_Object">
            <summary>
              <see cref="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object)"/>
            </summary>
        </member>
        <member name="F:Castle.DynamicProxy.Tokens.SerializationInfoMethods.GetValue">
            <summary>
              <see cref="M:System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)"/>
            </summary>
        </member>
        <member name="F:Castle.DynamicProxy.Tokens.SerializationInfoMethods.SetType">
            <summary>
              <see cref="M:System.Runtime.Serialization.SerializationInfo.SetType(System.Type)"/>
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.ITestCaseProvider2">
            <summary>
            ITestCaseProvider2 extends ITestCaseProvider with methods
            that include the suite for which the test case is being
            built. TestCaseProviders not needing the suite can
            continue to implement ITestCaseBuilder.
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.ITestCaseProvider">
            <summary>
            The ITestCaseProvider interface is used by extensions
            that provide data for parameterized tests, along with
            certain flags and other indicators used in the test.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.ITestCaseProvider.HasTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.ITestCaseProvider.GetTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Return an IEnumerable providing test cases for use in
            running a paramterized test.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.ITestCaseProvider2.HasTestCasesFor(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <param name="suite">The suite for which the test case is being built</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.ITestCaseProvider2.GetTestCasesFor(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Return an IEnumerable providing test cases for use in
            running a paramterized test.
            </summary>
            <param name="method"></param>
            <param name="suite">The suite for which the test case is being built</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Core.Builders.DatapointProvider">
            <summary>
            Provides data from fields marked with the DatapointAttribute or the
            DatapointsAttribute.
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.IDataPointProvider">
            <summary>
            The IDataPointProvider interface is used by extensions
            that provide data for a single test parameter.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.IDataPointProvider.HasDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Determine whether any data is available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>True if any data is available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.IDataPointProvider.GetDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Return an IEnumerable providing data for use with the
            supplied parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>An IEnumerable providing the required data</returns>
        </member>
        <member name="T:NUnit.Core.Builders.LegacySuiteBuilder">
            <summary>
            Built-in SuiteBuilder for LegacySuite
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.ISuiteBuilder">
            <summary>
            The ISuiteBuilder interface is exposed by a class that knows how to
            build a suite from one or more Types. 
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.ISuiteBuilder.CanBuildFrom(System.Type)">
            <summary>
            Examine the type and determine if it is suitable for
            this builder to use in building a TestSuite.
            
            Note that returning false will cause the type to be ignored 
            in loading the tests. If it is desired to load the suite
            but label it as non-runnable, ignored, etc., then this
            method must return true.
            </summary>
            <param name="type">The type of the fixture to be used</param>
            <returns>True if the type can be used to build a TestSuite</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.ISuiteBuilder.BuildFrom(System.Type)">
            <summary>
            Build a TestSuite from type provided.
            </summary>
            <param name="type">The type of the fixture to be used</param>
            <returns>A TestSuite</returns>
        </member>
        <member name="M:NUnit.Core.Builders.LegacySuiteBuilder.CanBuildFrom(System.Type)">
            <summary>
            Checks to see if the fixture type has the a property
            with the SuiteAttribute.
            </summary>
            <param name="type">The fixture type to check</param>
            <returns>True if the fixture can be built, false if not</returns>
        </member>
        <member name="T:NUnit.Core.Builders.NUnitTestCaseBuilder">
            <summary>
            Class to build ether a parameterized or a normal NUnitTestMethod.
            There are four cases that the builder must deal with:
              1. The method needs no params and none are provided
              2. The method needs params and they are provided
              3. The method needs no params but they are provided in error
              4. The method needs params but they are not provided
            This could have been done using two different builders, but it
            turned out to be simpler to have just one. The BuildFrom method
            takes a different branch depending on whether any parameters are
            provided, but all four cases are dealt with in lower-level methods
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.ITestCaseBuilder2">
            <summary>
            ITestCaseBuilder2 extends ITestCaseBuilder with methods
            that include the suite for which the test case is being
            built. Test case builders not needing the suite can
            continue to implement ITestCaseBuilder.
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.ITestCaseBuilder">
            <summary>
            The ITestCaseBuilder interface is exposed by a class that knows how to
            build a test case from certain methods. 
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.ITestCaseBuilder.CanBuildFrom(System.Reflection.MethodInfo)">
            <summary>
            Examine the method and determine if it is suitable for
            this builder to use in building a TestCase.
            
            Note that returning false will cause the method to be ignored 
            in loading the tests. If it is desired to load the method
            but label it as non-runnable, ignored, etc., then this
            method must return true.
            </summary>
            <param name="method">The test method to examine</param>
            <returns>True is the builder can use this method</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.ITestCaseBuilder.BuildFrom(System.Reflection.MethodInfo)">
            <summary>
            Build a TestCase from the provided MethodInfo.
            </summary>
            <param name="method">The method to be used as a test case</param>
            <returns>A TestCase or null</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.ITestCaseBuilder2.CanBuildFrom(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Examine the method and determine if it is suitable for
            this builder to use in building a TestCase to be
            included in the suite being populated.
            
            Note that returning false will cause the method to be ignored 
            in loading the tests. If it is desired to load the method
            but label it as non-runnable, ignored, etc., then this
            method must return true.
            </summary>
            <param name="method">The test method to examine</param>
            <param name="suite">The suite being populated</param>
            <returns>True is the builder can use this method</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.ITestCaseBuilder2.BuildFrom(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Build a TestCase from the provided MethodInfo for
            inclusion in the suite being constructed.
            </summary>
            <param name="method">The method to be used as a test case</param>
            <param name="suite">The test suite being populated, or null</param>
            <returns>A TestCase or null</returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestCaseBuilder.CanBuildFrom(System.Reflection.MethodInfo)">
            <summary>
            Determines if the method can be used to build an NUnit test
            test method of some kind. The method must normally be marked
            with an identifying attriute for this to be true. If the test
            config file sets AllowOldStyleTests to true, then any method beginning 
            "test..." (case-insensitive) is treated as a test unless 
            it is also marked as a setup or teardown method.
            
            Note that this method does not check that the signature
            of the method for validity. If we did that here, any
            test methods with invalid signatures would be passed
            over in silence in the test run. Since we want such
            methods to be reported, the check for validity is made
            in BuildFrom rather than here.
            </summary>
            <param name="method">A MethodInfo for the method being used as a test method</param>
            <param name="suite">The test suite being built, to which the new test would be added</param>
            <returns>True if the builder can create a test case from this method</returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestCaseBuilder.BuildFrom(System.Reflection.MethodInfo)">
            <summary>
            Build a Test from the provided MethodInfo. Depending on
            whether the method takes arguments and on the availability
            of test case data, this method may return a single test
            or a group of tests contained in a ParameterizedMethodSuite.
            </summary>
            <param name="method">The MethodInfo for which a test is to be built</param>
            <param name="suite">The test fixture being populated, or null</param>
            <returns>A Test representing one or more method invocations</returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestCaseBuilder.BuildParameterizedMethodSuite(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Builds a ParameterizedMetodSuite containing individual
            test cases for each set of parameters provided for
            this method.
            </summary>
            <param name="method">The MethodInfo for which a test is to be built</param>
            <returns>A ParameterizedMethodSuite populated with test cases</returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestCaseBuilder.BuildSingleTestMethod(System.Reflection.MethodInfo,NUnit.Core.Test,NUnit.Core.Extensibility.ParameterSet)">
            <summary>
            Builds a single NUnitTestMethod, either as a child of the fixture 
            or as one of a set of test cases under a ParameterizedTestMethodSuite.
            </summary>
            <param name="method">The MethodInfo from which to construct the TestMethod</param>
            <param name="parms">The ParameterSet to be used, or null</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestCaseBuilder.CheckTestMethodSignature(NUnit.Core.TestMethod,NUnit.Core.Extensibility.ParameterSet)">
            <summary>
            Helper method that checks the signature of a TestMethod and
            any supplied parameters to determine if the test is valid.
            
            Currently, NUnitTestMethods are required to be public, 
            non-abstract methods, either static or instance,
            returning void. They may take arguments but the values must
            be provided or the TestMethod is not considered runnable.
            
            Methods not meeting these criteria will be marked as
            non-runnable and the method will return false in that case.
            </summary>
            <param name="testMethod">The TestMethod to be checked. If it
            is found to be non-runnable, it will be modified.</param>
            <param name="parms">Parameters to be used for this test, or null</param>
            <returns>True if the method signature is valid, false if not</returns>
        </member>
        <member name="T:NUnit.Core.Builders.NUnitTestFixtureBuilder">
            <summary>
            Built-in SuiteBuilder for NUnit TestFixture
            </summary>
        </member>
        <member name="F:NUnit.Core.Builders.NUnitTestFixtureBuilder.fixture">
            <summary>
            The NUnitTestFixture being constructed;
            </summary>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestFixtureBuilder.CanBuildFrom(System.Type)">
            <summary>
            Checks to see if the fixture type has the TestFixtureAttribute
            </summary>
            <param name="type">The fixture type to check</param>
            <returns>True if the fixture can be built, false if not</returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestFixtureBuilder.BuildFrom(System.Type)">
            <summary>
            Build a TestSuite from type provided.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestFixtureBuilder.AddTestCases(System.Type)">
            <summary>
            Method to add test cases to the newly constructed fixture.
            The default implementation looks at each candidate method
            and tries to build a test case from it. It will only need
            to be overridden if some other approach, such as reading a 
            datafile is used to generate test cases.
            </summary>
            <param name="fixtureType"></param>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestFixtureBuilder.BuildTestCase(System.Reflection.MethodInfo,NUnit.Core.TestSuite)">
            <summary>
            Method to create a test case from a MethodInfo and add
            it to the fixture being built. It first checks to see if
            any global TestCaseBuilder addin wants to build the
            test case. If not, it uses the internal builder
            collection maintained by this fixture builder. After
            building the test case, it applies any decorators
            that have been installed.
            
            The default implementation has no test case builders.
            Derived classes should add builders to the collection
            in their constructor.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestFixtureBuilder.IsValidFixtureType(System.Type,System.String@)">
            <summary>
            Check that the fixture type is valid. This method ensures that 
            the type is not abstract and that there is no more than one of 
            each setup or teardown method and that their signatures are correct.
            </summary>
            <param name="fixtureType">The type of the fixture to check</param>
            <param name="reason">A message indicating why the fixture is invalid</param>
            <returns>True if the fixture is valid, false if not</returns>
        </member>
        <member name="M:NUnit.Core.Builders.NUnitTestFixtureBuilder.GetTestFixtureAttributes(System.Type)">
            <summary>
            Get TestFixtureAttributes following a somewhat obscure
            set of rules to eliminate spurious duplication of fixtures.
            1. If there are any attributes with args, they are the only
               ones returned and those without args are ignored.
            2. No more than one attribute without args is ever returned.
            </summary>
        </member>
        <member name="T:NUnit.Core.Builders.SetUpFixtureBuilder">
            <summary>
            SetUpFixtureBuilder knows how to build a SetUpFixture.
            </summary>
        </member>
        <member name="T:NUnit.Core.Builders.TestAssemblyBuilder">
            <summary>
            Class that builds a TestSuite from an assembly
            </summary>
        </member>
        <member name="F:NUnit.Core.Builders.TestAssemblyBuilder.assembly">
            <summary>
            The loaded assembly
            </summary>
        </member>
        <member name="F:NUnit.Core.Builders.TestAssemblyBuilder.legacySuiteBuilder">
            <summary>
            Our LegacySuite builder, which is only used when a 
            fixture has been passed by name on the command line.
            </summary>
        </member>
        <member name="M:NUnit.Core.Builders.TestCaseParameterProvider.HasTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Builders.TestCaseParameterProvider.GetTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Return an IEnumerable providing test cases for use in
            running a parameterized test.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Builders.TestCaseParameterProvider.PerformSpecialConversions(System.Object[],System.Reflection.ParameterInfo[])">
            <summary>
            Performs several special conversions allowed by NUnit in order to
            permit arguments with types that cannot be used in the constructor
            of an Attribute such as TestCaseAttribute or to simplify their use.
            </summary>
            <param name="arglist">The arguments to be converted</param>
            <param name="parameters">The ParameterInfo array for the method</param>
        </member>
        <member name="T:NUnit.Core.Builders.TestCaseSourceProvider">
            <summary>
            TestCaseSourceProvider provides data for methods
            annotated with the TestCaseSourceAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Core.Builders.TestCaseSourceProvider.HasTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Builders.TestCaseSourceProvider.GetTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Return an IEnumerable providing test cases for use in
            running a parameterized test.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Builders.TestCaseSourceProvider.HasTestCasesFor(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Builders.TestCaseSourceProvider.GetTestCasesFor(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Return an IEnumerable providing test cases for use in
            running a parameterized test.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Core.Builders.ValueSourceProvider">
            <summary>
            ValueSourceProvider supplies data items for individual parameters
            from named data sources in the test class or a separate class.
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.IDataPointProvider2">
            <summary>
            The IDataPointProvider2 interface extends IDataPointProvider
            by making the test fixture for which the test is being built
            available for use.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.IDataPointProvider2.HasDataFor(System.Reflection.ParameterInfo,NUnit.Core.Test)">
            <summary>
            Determine whether any data is available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <param name="parentSuite">The test suite for which the test is being built</param>
            <returns>True if any data is available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.IDataPointProvider2.GetDataFor(System.Reflection.ParameterInfo,NUnit.Core.Test)">
            <summary>
            Return an IEnumerable providing data for use with the
            supplied parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <param name="parentSuite">The test suite for which the test is being built</param>
            <returns>An IEnumerable providing the required data</returns>
        </member>
        <member name="M:NUnit.Core.Builders.ValueSourceProvider.HasDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Determine whether any data sources are available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo test parameter</param>
            <returns>True if any data is available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Builders.ValueSourceProvider.GetDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Return an IEnumerable providing test data for use with
            one parameter of a parameterized test.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Builders.ValueSourceProvider.HasDataFor(System.Reflection.ParameterInfo,NUnit.Core.Test)">
            <summary>
            Determine whether any data sources are available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo test parameter</param>
            <param name="parentSuite">The test suite for which the test is being built</param>
            <returns>True if any data is available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Builders.ValueSourceProvider.GetDataFor(System.Reflection.ParameterInfo,NUnit.Core.Test)">
            <summary>
            Return an IEnumerable providing test data for use with
            one parameter of a parameterized test.
            </summary>
            <param name="parameter"></param>
            <param name="parentSuite">The test suite for which the test is being built</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Core.ExtensionPoint">
            <summary>
            ExtensionPoint is used as a base class for all 
            extension points.
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.IExtensionPoint">
            <summary>
            Represents a single point of extension for NUnit. Some extension
            points may accept only a single extension, while others may
            accept more than one at the same time.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.IExtensionPoint.Install(System.Object)">
            <summary>
            Install an extension at this extension point. If the
            extension object does not meet the requirements for
            this extension point, an exception is thrown.
            </summary>
            <param name="extension">The extension to install</param>
        </member>
        <member name="M:NUnit.Core.Extensibility.IExtensionPoint.Remove(System.Object)">
            <summary>
            Removes an extension from this extension point. If the
            extension object is not present, the method returns
            without error.
            </summary>
            <param name="extension"></param>
        </member>
        <member name="P:NUnit.Core.Extensibility.IExtensionPoint.Name">
            <summary>
            Get the name of this extension point
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.IExtensionPoint.Host">
            <summary>
            Get the host that provides this extension point
            </summary>
        </member>
        <member name="M:NUnit.Core.ExtensionPoint.Install(System.Object)">
            <summary>
            Install an extension at this extension point. If the
            extension object does not meet the requirements for
            this extension point, an exception is thrown.
            </summary>
            <param name="extension">The extension to install</param>
        </member>
        <member name="M:NUnit.Core.ExtensionPoint.Install(System.Object,System.Int32)">
            <summary>
            Install an extension at this extension point specifying
            an integer priority value for the extension.If the
            extension object does not meet the requirements for
            this extension point, or if the extension point does
            not support the requested priority level, an exception 
            is thrown.
            </summary>
            <param name="extension">The extension to install</param>
            <param name="priority">The priority level for this extension</param>
        </member>
        <member name="M:NUnit.Core.ExtensionPoint.Remove(System.Object)">
            <summary>
            Removes an extension from this extension point. If the
            extension object is not present, the method returns
            without error.
            </summary>
            <param name="extension"></param>
        </member>
        <member name="P:NUnit.Core.ExtensionPoint.Name">
            <summary>
            Get the name of this extension point
            </summary>
        </member>
        <member name="P:NUnit.Core.ExtensionPoint.Host">
            <summary>
            Get the host that provides this extension point
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.DataPointProviders.HasDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Determine whether any data is available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>True if any data is available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.DataPointProviders.GetDataFor(System.Reflection.ParameterInfo)">
            <summary>
            Return an IEnumerable providing data for use with the
            supplied parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>An IEnumerable providing the required data</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.DataPointProviders.HasDataFor(System.Reflection.ParameterInfo,NUnit.Core.Test)">
            <summary>
            Determine whether any data is available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>True if any data is available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.DataPointProviders.GetDataFor(System.Reflection.ParameterInfo,NUnit.Core.Test)">
            <summary>
            Return an IEnumerable providing data for use with the
            supplied parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>An IEnumerable providing the required data</returns>
        </member>
        <member name="T:NUnit.Core.Extensibility.EventListenerCollection">
            <summary>
            EventListenerCollection holds multiple event listeners
            and relays all event calls to each of them.
            </summary>
        </member>
        <member name="T:NUnit.Core.EventListener">
            <summary>
            The EventListener interface is used within the NUnit core to receive 
            notifications of significant events while a test is being run. These
            events are propogated to any client, which may choose to convert them
            to .NET events or to use them directly.
            </summary>
        </member>
        <member name="M:NUnit.Core.EventListener.RunStarted(System.String,System.Int32)">
            <summary>
            Called when a test run is starting
            </summary>
            <param name="name">The name of the test being started</param>
            <param name="testCount">The number of test cases under this test</param>
        </member>
        <member name="M:NUnit.Core.EventListener.RunFinished(NUnit.Core.TestResult)">
            <summary>
            Called when a run finishes normally
            </summary>
            <param name="result">The result of the test</param>
        </member>
        <member name="M:NUnit.Core.EventListener.RunFinished(System.Exception)">
            <summary>
            Called when a run is terminated due to an exception
            </summary>
            <param name="exception">Exception that was thrown</param>
        </member>
        <member name="M:NUnit.Core.EventListener.TestStarted(NUnit.Core.TestName)">
            <summary>
            Called when a test case is starting
            </summary>
            <param name="testName">The name of the test case</param>
        </member>
        <member name="M:NUnit.Core.EventListener.TestFinished(NUnit.Core.TestResult)">
            <summary>
            Called when a test case has finished
            </summary>
            <param name="result">The result of the test</param>
        </member>
        <member name="M:NUnit.Core.EventListener.SuiteStarted(NUnit.Core.TestName)">
            <summary>
            Called when a suite is starting
            </summary>
            <param name="testName">The name of the suite</param>
        </member>
        <member name="M:NUnit.Core.EventListener.SuiteFinished(NUnit.Core.TestResult)">
            <summary>
            Called when a suite has finished
            </summary>
            <param name="result">The result of the suite</param>
        </member>
        <member name="M:NUnit.Core.EventListener.UnhandledException(System.Exception)">
            <summary>
            Called when an unhandled exception is detected during
            the execution of a test run.
            </summary>
            <param name="exception">The exception thta was detected</param>
        </member>
        <member name="M:NUnit.Core.EventListener.TestOutput(NUnit.Core.TestOutput)">
            <summary>
            Called when the test direts output to the console.
            </summary>
            <param name="testOutput">A console message</param>
        </member>
        <member name="T:NUnit.Core.Extensibility.IFrameworkRegistry">
            <summary>
            The IFrameworkRegistry allows extensions to register new
            frameworks or emulations of other frameworks.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.IFrameworkRegistry.Register(System.String,System.String)">
            <summary>
            Register a framework
            </summary>
            <param name="frameworkName">The name of the framework</param>
            <param name="assemblyName">The name of the assembly that the tests reference</param>
        </member>
        <member name="F:NUnit.Core.Extensibility.FrameworkRegistry.testFrameworks">
            <summary>
            List of FrameworkInfo structs for supported frameworks
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.FrameworkRegistry.Register(System.String,System.String)">
            <summary>
            Register a framework. NUnit registers itself using this method. Add-ins that
            work with or emulate a different framework may register themselves as well.
            </summary>
            <param name="frameworkName">The name of the framework</param>
            <param name="assemblyName">The name of the assembly that framework users reference</param>
        </member>
        <member name="M:NUnit.Core.Extensibility.FrameworkRegistry.GetReferencedFrameworks(System.Reflection.Assembly)">
            <summary>
            Get a list of known frameworks referenced by an assembly
            </summary>
            <param name="assembly">The assembly to be examined</param>
            <returns>A list of AssemblyNames</returns>
        </member>
        <member name="T:NUnit.Core.Extensibility.SuiteBuilderCollection">
            <summary>
            SuiteBuilderCollection is an ExtensionPoint for SuiteBuilders and
            implements the ISuiteBuilder interface itself, passing calls 
            on to the individual builders.
            
            The builders are added to the collection by inserting them at
            the start, as to take precedence over those added earlier. 
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.SuiteBuilderCollection.#ctor(NUnit.Core.Extensibility.IExtensionHost)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.SuiteBuilderCollection.CanBuildFrom(System.Type)">
            <summary>
            Examine the type and determine if it is suitable for
            any SuiteBuilder to use in building a TestSuite
            </summary>
            <param name="type">The type of the fixture to be used</param>
            <returns>True if the type can be used to build a TestSuite</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.SuiteBuilderCollection.BuildFrom(System.Type)">
            <summary>
            Build a TestSuite from type provided.
            </summary>
            <param name="type">The type of the fixture to be used</param>
            <returns>A TestSuite or null</returns>
        </member>
        <member name="T:NUnit.Core.Extensibility.TestCaseBuilderCollection">
            <summary>
            TestCaseBuilderCollection is an ExtensionPoint for TestCaseBuilders 
            and implements the ITestCaseBuilder interface itself, passing calls 
            on to the individual builders.
            
            The builders are added to the collection by inserting them at
            the start, as to take precedence over those added earlier. 
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseBuilderCollection.CanBuildFrom(System.Reflection.MethodInfo)">
            <summary>
            Examine the method and determine if it is suitable for
            any TestCaseBuilder to use in building a Test
            </summary>
            <param name="method">The method to be used as a test case</param>
            <returns>True if the method can be used to build a Test</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseBuilderCollection.BuildFrom(System.Reflection.MethodInfo)">
            <summary>
            Build a Test from the method provided.
            </summary>
            <param name="method">The method to be used</param>
            <returns>A Test or null</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseBuilderCollection.CanBuildFrom(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Examine the method and determine if it is suitable for
            any TestCaseBuilder to use in building a Test
            </summary>
            <param name="method">The method to be used as a test case</param>
            <returns>True if the method can be used to build a Test</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseBuilderCollection.BuildFrom(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Build a Test from the method provided.
            </summary>
            <param name="method">The method to be used</param>
            <returns>A Test or null</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseProviders.HasTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseProviders.GetTestCasesFor(System.Reflection.MethodInfo)">
            <summary>
            Return an enumeration providing test cases for use in
            running a paramterized test.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseProviders.HasTestCasesFor(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <param name="suite">The suite for which the test case is being built</param>
            <returns>True if any cases are available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestCaseProviders.GetTestCasesFor(System.Reflection.MethodInfo,NUnit.Core.Test)">
            <summary>
            Return an enumeration providing test cases for use in
            running a paramterized test.
            </summary>
            <param name="method">A MethodInfo representing a parameterized test</param>
            <param name="suite">The suite for which the test case is being built</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Core.Extensibility.TestDecoratorCollection">
            <summary>
            TestDecoratorCollection is an ExtensionPoint for TestDecorators and
            implements the ITestDecorator interface itself, passing calls 
            on to the individual decorators.
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.IExtensionPoint2">
            <summary>
            Represents a single point of extension for NUnit. Some extension
            points may accept only a single extension, while others may
            accept more than one at the same time. This interface enhances
            IExtensionPoint by allowing specification of a priority
            order for applying addins.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.IExtensionPoint2.Install(System.Object,System.Int32)">
            <summary>
            Install an extension at this extension point specifying
            an integer priority value for the extension.If the
            extension object does not meet the requirements for
            this extension point, or if the extension point does
            not support the requested priority level, an exception 
            is thrown.
            </summary>
            <param name="extension">The extension to install</param>
            <param name="priority">The priority level for this extension</param>
        </member>
        <member name="T:NUnit.Core.Extensibility.ITestDecorator">
            <summary>
            The ITestDecorator interface is exposed by a class that knows how to
            enhance the functionality of a test case or suite by decorating it.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.ITestDecorator.Decorate(NUnit.Core.Test,System.Reflection.MemberInfo)">
            <summary>
            Examine the a Test and either return it as is, modify it
            or return a different TestCase.
            </summary>
            <param name="test">The Test to be decorated</param>
            <param name="member">The MethodInfo used to construct the test</param>
            <returns>The resulting Test</returns>
        </member>
        <member name="T:NUnit.Core.TestDecorator">
            <summary>
            TestDecorator is used to add functionality to
            another Test, which it aggregates.
            </summary>
        </member>
        <member name="T:NUnit.Core.TestMethod">
            <summary>
            The TestMethod class represents a Test implemented as a method.
            
            Because of how exceptions are handled internally, this class
            must incorporate processing of expected exceptions. A change to
            the Test interface might make it easier to process exceptions
            in an object that aggregates a TestMethod in the future.
            </summary>
        </member>
        <member name="T:NUnit.Core.Test">
            <summary>
            	Test Class.
            </summary>
        </member>
        <member name="T:NUnit.Core.ITest">
            <summary>
            Common interface supported by all representations
            of a test. Only includes informational fields.
            The Run method is specifically excluded to allow
            for data-only representations of a test.
            </summary>
        </member>
        <member name="M:NUnit.Core.ITest.CountTestCases(NUnit.Core.ITestFilter)">
            <summary>
            Count the test cases that pass a filter. The
            result should match those that would execute
            when passing the same filter to Run.
            </summary>
            <param name="filter">The filter to apply</param>
            <returns>The count of test cases</returns>
        </member>
        <member name="P:NUnit.Core.ITest.TestName">
            <summary>
            Gets the completely specified name of the test
            encapsulated in a TestName object.
            </summary>
        </member>
        <member name="P:NUnit.Core.ITest.TestType">
            <summary>
            Gets a string representing the type of test, e.g.: "Test Case"
            </summary>
        </member>
        <member name="P:NUnit.Core.ITest.RunState">
            <summary>
            Indicates whether the test can be run using
            the RunState enum.
            </summary>
        </member>
        <member name="P:NUnit.Core.ITest.IgnoreReason">
            <summary>
            Reason for not running the test, if applicable
            </summary>
        </member>
        <member name="P:NUnit.Core.ITest.TestCount">
            <summary>
            Count of the test cases ( 1 if this is a test case )
            </summary>
        </member>
        <member name="P:NUnit.Core.ITest.Categories">
            <summary>
            Categories available for this test
            </summary>
        </member>
        <member name="P:NUnit.Core.ITest.Description">
            <summary>
            Return the description field. 
            </summary>
        </member>
        <member name="P:NUnit.Core.ITest.Properties">
            <summary>
            Return additional properties of the test
            </summary>
        </member>
        <member name="P:NUnit.Core.ITest.IsSuite">
            <summary>
            True if this is a suite
            </summary>
        </member>
        <member name="P:NUnit.Core.ITest.Parent">
            <summary>
             Gets the parent test of this test
            </summary>
        </member>
        <member name="P:NUnit.Core.ITest.Tests">
            <summary>
            For a test suite, the child tests or suites
            Null if this is not a test suite
            </summary>
        </member>
        <member name="F:NUnit.Core.Test.testName">
            <summary>
            TestName that identifies this test
            </summary>
        </member>
        <member name="F:NUnit.Core.Test.runState">
            <summary>
            Indicates whether the test should be executed
            </summary>
        </member>
        <member name="F:NUnit.Core.Test.parent">
            <summary>
            Test suite containing this test, or null
            </summary>
        </member>
        <member name="F:NUnit.Core.Test.properties">
            <summary>
            A dictionary of properties, used to add information
            to tests without requiring the class to change.
            </summary>
        </member>
        <member name="M:NUnit.Core.Test.GetCurrentApartment">
            <summary>
            Get the current apartment state of the test
            </summary>
        </member>
        <member name="M:NUnit.Core.Test.#ctor(System.String)">
            <summary>
            Constructs a test given its name
            </summary>
            <param name="name">The name of the test</param>
        </member>
        <member name="M:NUnit.Core.Test.#ctor(System.String,System.String)">
            <summary>
            Constructs a test given the path through the
            test hierarchy to its parent and a name.
            </summary>
            <param name="pathName">The parent tests full name</param>
            <param name="name">The name of the test</param>
        </member>
        <member name="M:NUnit.Core.Test.#ctor(NUnit.Core.TestName)">
            <summary>
            Constructs a test given a TestName object
            </summary>
            <param name="testName">The TestName for this test</param>
        </member>
        <member name="M:NUnit.Core.Test.SetRunnerID(System.Int32,System.Boolean)">
            <summary>
            Sets the runner id of a test and optionally its children
            </summary>
            <param name="runnerID">The runner id to be used</param>
            <param name="recursive">True if all children should get the same id</param>
        </member>
        <member name="M:NUnit.Core.Test.CountTestCases(NUnit.Core.ITestFilter)">
            <summary>
            Gets a count of test cases that would be run using
            the specified filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Test.Run(NUnit.Core.EventListener,NUnit.Core.ITestFilter)">
            <summary>
            Runs the test under a particular filter, sending
            notifications to a listener.
            </summary>
            <param name="listener">An event listener to receive notifications</param>
            <param name="filter">A filter used in running the test</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Test.CompareTo(System.Object)">
            <summary>
            Compares this test to another test for sorting purposes
            </summary>
            <param name="obj">The other test</param>
            <returns>Value of -1, 0 or +1 depending on whether the current test is less than, equal to or greater than the other test</returns>
        </member>
        <member name="P:NUnit.Core.Test.RequiresThread">
            <summary>
            Return true if the test requires a thread
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.ApartmentState">
            <summary>
            Get the desired apartment state for running the test
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.ShouldRunOnOwnThread">
            <summary>
            Gets a boolean value indicating whether this 
            test should run on it's own thread.
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.TestName">
            <summary>
            Gets the TestName of the test
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.TestType">
            <summary>
            Gets a string representing the kind of test
            that this object represents, for use in display.
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.RunState">
            <summary>
            Whether or not the test should be run
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.IgnoreReason">
            <summary>
            Reason for not running the test, if applicable
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.TestCount">
            <summary>
            Gets a count of test cases represented by
            or contained under this test.
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.Categories">
            <summary>
            Gets a list of categories associated with this test.
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.Description">
            <summary>
            Gets a description associated with this test.
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.Properties">
            <summary>
            Gets the property dictionary for this test
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.IsSuite">
            <summary>
            Indicates whether this test is a suite
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.NUnit#Core#ITest#Parent">
            <summary>
            Gets the parent test of this test
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.Parent">
            <summary>
            Gets the parent as a Test object.
            Used by the core to set the parent.
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.Tests">
            <summary>
            Gets this test's child tests
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.FixtureType">
            <summary>
            Gets the Type of the fixture used in running this test
            </summary>
        </member>
        <member name="P:NUnit.Core.Test.Fixture">
            <summary>
            Gets or sets a fixture object for running this test
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.method">
            <summary>
            The test method
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.setUpMethods">
            <summary>
            The SetUp method.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.tearDownMethods">
            <summary>
            The teardown method
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.actions">
            <summary>
            The actions
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.suiteActions">
            <summary>
            The parent suite's actions
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.exceptionProcessor">
            <summary>
            The ExpectedExceptionProcessor for this test, if any
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.arguments">
            <summary>
            Arguments to be used in invoking the method
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.expectedResult">
            <summary>
            The expected result of the method return value
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.hasExpectedResult">
            <summary>
            Indicates whether expectedResult was set - thereby allowing null as a value
            </summary>
        </member>
        <member name="F:NUnit.Core.TestMethod.fixture">
            <summary>
            The fixture object, if it has been created
            </summary>
        </member>
        <member name="M:NUnit.Core.TestMethod.RunTest">
            <summary>
            The doRun method is used to run a test internally.
            It assumes that the caller is taking care of any 
            TestFixtureSetUp and TestFixtureTearDown needed.
            </summary>
            <param name="testResult">The result in which to record success or failure</param>
        </member>
        <member name="T:NUnit.Core.AssemblyReader">
            <summary>
            AssemblyReader knows how to find various things in an assembly header
            </summary>
        </member>
        <member name="T:NUnit.Core.AssemblyResolver">
            <summary>
            Class adapted from NUnitAddin for use in handling assemblies that are not
            found in the test AppDomain.
            </summary>
        </member>
        <member name="T:NUnit.Core.CoreExtensions">
            <summary>
            CoreExtensions is a singleton class that groups together all 
            the extension points that are supported in the test domain.
            It also provides access to the test builders and decorators
            by other parts of the NUnit core.
            </summary>
        </member>
        <member name="T:NUnit.Core.ExtensionHost">
            <summary>
            ExtensionHost is the abstract base class used for
            all extension hosts. It provides an array of 
            extension points and a FrameworkRegistry and
            implements the IExtensionHost interface. Derived
            classes must initialize the extension points.
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.IExtensionHost">
            <summary>
            The IExtensionHost interface is implemented by each
            of NUnit's Extension hosts. Currently, there is
            only one host, which resides in the test domain.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.IExtensionHost.GetExtensionPoint(System.String)">
            <summary>
            Return an extension point by name, if present
            </summary>
            <param name="name">The name of the extension point</param>
            <returns>The extension point, if found, otherwise null</returns>
        </member>
        <member name="P:NUnit.Core.Extensibility.IExtensionHost.ExtensionPoints">
            <summary>
            Get a list of the ExtensionPoints provided by this host.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.IExtensionHost.FrameworkRegistry">
            <summary>
            Get an interface to the framework registry
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.IExtensionHost.ExtensionTypes">
            <summary>
            Gets the ExtensionTypes supported by this host
            </summary>
            <returns>An enum indicating the ExtensionTypes supported</returns>
        </member>
        <member name="T:NUnit.Core.IService">
            <summary>
            The IService interface is implemented by all Services.
            </summary>
        </member>
        <member name="M:NUnit.Core.IService.InitializeService">
            <summary>
            Initialize the Service
            </summary>
        </member>
        <member name="M:NUnit.Core.IService.UnloadService">
            <summary>
            Do any cleanup needed before terminating the service
            </summary>
        </member>
        <member name="P:NUnit.Core.CoreExtensions.AddinRegistry">
            <summary>
            Our AddinRegistry may be set from outside or passed into the domain
            </summary>
        </member>
        <member name="M:NUnit.Core.CultureDetector.#ctor">
            <summary>
            Default constructor uses the current culutre.
            </summary>
        </member>
        <member name="M:NUnit.Core.CultureDetector.#ctor(System.String)">
            <summary>
            Contruct a CultureHelper for a particular culture for testing.
            </summary>
            <param name="culture">The culture to be used</param>
        </member>
        <member name="M:NUnit.Core.CultureDetector.IsCultureSupported(System.String[])">
            <summary>
            Test to determine if one of a collection of culturess
            is being used currently.
            </summary>
            <param name="cultures"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.CultureDetector.IsCultureSupported(System.Attribute)">
            <summary>
            Tests to determine if the current culture is supported
            based on a culture attribute.
            </summary>
            <param name="platformAttribute">The attribute to examine</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.CultureDetector.IsCultureSupported(System.String)">
            <summary>
            Test to determine if the a particular culture or comma-
            delimited set of cultures is in use.
            </summary>
            <param name="platform">Name of the culture or comma-separated list of culture names</param>
            <returns>True if the culture is in use on the system</returns>
        </member>
        <member name="P:NUnit.Core.CultureDetector.Reason">
            <summary>
            Return the last failure reason. Results are not
            defined if called before IsSupported( Attribute )
            is called.
            </summary>
        </member>
        <member name="T:NUnit.Core.DirectorySwapper">
            <summary>
            Utility class that allows changing the current directory 
            for the duration of some lexical scope and guaranteeing
            that it will be restored upon exit.
            
            Use it as follows:
               using( new DirectorySwapper( @"X:\New\Path" )
               {
                   // Code that operates in the new current directory
               }
               
            Instantiating DirectorySwapper without a path merely
            saves the current directory, but does not change it.
            </summary>
        </member>
        <member name="T:NUnit.Core.DomainAgent">
            <summary>
            Represesents an agent that controls running of tests in
            an application domain.
            </summary>
        </member>
        <member name="T:NUnit.Core.TestAgent">
            <summary>
            Abstract base for all types of TestAgents.
            A TestAgent provides services of locating,
            loading and running tests in a particular
            context such as an AppDomain or Process.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestAgent.agency">
            <summary>
            Reference to the TestAgency that controls this agent
            </summary>
        </member>
        <member name="F:NUnit.Core.TestAgent.agentId">
            <summary>
            This agent's assigned id
            </summary>
        </member>
        <member name="M:NUnit.Core.TestAgent.#ctor(System.Guid)">
            <summary>
            Constructs a TestAgent
            </summary>
            <param name="agentId"></param>
        </member>
        <member name="M:NUnit.Core.TestAgent.#ctor(System.Guid,NUnit.Core.IAgency)">
            <summary>
            Consructor used by TestAgency when creating
            an agent.
            </summary>
            <param name="agentId"></param>
            <param name="agency"></param>
        </member>
        <member name="M:NUnit.Core.TestAgent.Start">
            <summary>
            Starts the agent, performing any required initialization
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.TestAgent.Stop">
            <summary>
            Stops the agent, releasing any resources
            </summary>
        </member>
        <member name="M:NUnit.Core.TestAgent.CreateRunner(System.Int32)">
            <summary>
             Creates a runner using a given runner id
            </summary>
        </member>
        <member name="M:NUnit.Core.TestAgent.Dispose">
            <summary>
            Dispose is overridden to stop the agent
            </summary>
        </member>
        <member name="M:NUnit.Core.TestAgent.InitializeLifetimeService">
            <summary>
            Overridden to cause object to live indefinitely
            </summary>
        </member>
        <member name="P:NUnit.Core.TestAgent.Agency">
            <summary>
            The TestAgency with which this agent is asssociated,
            or null if the agent is not tied to an agency.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestAgent.Id">
            <summary>
            A Guid that uniquely identifies this agent.
            </summary>
        </member>
        <member name="M:NUnit.Core.DomainAgent.CreateInstance(System.AppDomain)">
            <summary>
            Factory method used to create a DomainAgent in an AppDomain.
            </summary>
            <param name="targetDomain">The domain in which to create the agent</param>
            <param name="traceLevel">The level of internal tracing to use</param>
            <returns>A proxy for the DomainAgent in the other domain</returns>
        </member>
        <member name="M:NUnit.Core.DomainAgent.#ctor">
            <summary>
            Constructs a DomainAgent specifying the trace level.
            </summary>
            <param name="traceLevel">The level of internal tracing to use</param>
        </member>
        <member name="M:NUnit.Core.DomainAgent.CreateRunner(System.Int32)">
            <summary>
            Creates a TestRunner for use in loading and running
            tests in this domain. DomainAgent always creates
            a RemoteTestRunner.
            </summary>
            <param name="runnerID">Runner ID to be used</param>
            <returns>A TestRunner</returns>
        </member>
        <member name="M:NUnit.Core.DomainAgent.Start">
            <summary>
            Starts the agent if it is no aready started.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.DomainAgent.Stop">
            <summary>
            Stops the agent if it is running
            </summary>
        </member>
        <member name="M:NUnit.Core.DomainInitializer.CreateInstance(System.AppDomain)">
            <summary>
            Factory method used to create a DomainInitializer in an AppDomain.
            </summary>
            <param name="targetDomain">The domain in which to create the agent</param>
            <param name="traceLevel">The level of internal tracing to use</param>
            <returns>A proxy for the DomainAgent in the other domain</returns>
        </member>
        <member name="T:NUnit.Core.BufferedEventListenerTextWriter">
            <summary>
            This wrapper adds buffering to improve cross-domain performance.
            </summary>
        </member>
        <member name="T:NUnit.Core.EventPumpState">
            <summary>
            The EventPumpState enum represents the state of an
            EventPump.
            </summary>
        </member>
        <member name="T:NUnit.Core.EventPump">
            <summary>
            EventPump pulls events out of an EventQueue and sends
            them to a listener. It is used to send events back to
            the client without using the CallContext of the test
            runner thread.
            </summary>
        </member>
        <member name="F:NUnit.Core.EventPump.synchronousEventSent">
            <summary>
            The handle on which a thread enqueuing an event with <see cref="P:NUnit.Core.Event.IsSynchronous"/> == <c>true</c>
            waits, until the EventPump has sent the event to its listeners.
            </summary>
        </member>
        <member name="F:NUnit.Core.EventPump.eventListener">
            <summary>
            The downstream listener to which we send events
            </summary>
        </member>
        <member name="F:NUnit.Core.EventPump.events">
            <summary>
            The queue that holds our events
            </summary>
        </member>
        <member name="F:NUnit.Core.EventPump.pumpThread">
            <summary>
            Thread to do the pumping
            </summary>
        </member>
        <member name="F:NUnit.Core.EventPump.pumpState">
            <summary>
            The current state of the eventpump
            </summary>
        </member>
        <member name="F:NUnit.Core.EventPump.autostop">
            <summary>
            If true, stop after sending RunFinished
            </summary>
        </member>
        <member name="M:NUnit.Core.EventPump.#ctor(NUnit.Core.EventListener,NUnit.Core.EventQueue,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="eventListener">The EventListener to receive events</param>
            <param name="events">The event queue to pull events from</param>
            <param name="autostop">Set to true to stop pump after RunFinished</param>
        </member>
        <member name="M:NUnit.Core.EventPump.Dispose">
            <summary>
            Disposes and stops the pump.
            Disposes the used WaitHandle, too.
            </summary>
        </member>
        <member name="M:NUnit.Core.EventPump.Start">
            <summary>
            Start the pump
            </summary>
        </member>
        <member name="M:NUnit.Core.EventPump.Stop">
            <summary>
            Tell the pump to stop after emptying the queue.
            </summary>
        </member>
        <member name="M:NUnit.Core.EventPump.PumpThreadProc">
            <summary>
            Our thread proc for removing items from the event
            queue and sending them on. Note that this would
            need to do more locking if any other thread were
            removing events from the queue.
            </summary>
        </member>
        <member name="P:NUnit.Core.EventPump.PumpState">
            <summary>
            Gets or sets the current state of the pump
            </summary>
            <remarks>
            On <c>volatile</c> and <see cref="M:System.Threading.Thread.MemoryBarrier"/>, see
            "http://www.albahari.com/threading/part4.aspx".
            </remarks>
        </member>
        <member name="P:NUnit.Core.EventPump.Name">
            <summary>
            Gets or sets the name of this EventPump
            (used only internally and for testing).
            </summary>
        </member>
        <member name="T:NUnit.Core.Event">
            <summary>
            NUnit.Core.Event is the abstract base for all stored events.
            An Event is the stored representation of a call to the 
            EventListener interface and is used to record such calls
            or to queue them for forwarding on another thread or at
            a later time.
            </summary>
        </member>
        <member name="P:NUnit.Core.Event.IsSynchronous">
            <summary>
            Gets a value indicating whether this event is delivered synchronously by the NUnit <see cref="T:NUnit.Core.EventPump"/>.
            <para>
            If <c>true</c>, and if <see cref="M:NUnit.Core.EventQueue.SetWaitHandleForSynchronizedEvents(System.Threading.AutoResetEvent)"/> has been used to 
            set a WaitHandle, <see cref="M:NUnit.Core.EventQueue.Enqueue(NUnit.Core.Event)"/> blocks its calling thread until the <see cref="T:NUnit.Core.EventPump"/>
            thread has delivered the event and sets the WaitHandle.
            </para>
            </summary>
        </member>
        <member name="T:NUnit.Core.EventQueue">
            <summary>
            Implements a queue of work items each of which
            is queued as a WaitCallback.
            </summary>
        </member>
        <member name="F:NUnit.Core.EventQueue.synchronousEventSent">
            <summary>
            WaitHandle for synchronous event delivery in <see cref="M:NUnit.Core.EventQueue.Enqueue(NUnit.Core.Event)"/>.
            <para>
            Having just one handle for the whole <see cref="T:NUnit.Core.EventQueue"/> implies that 
            there may be only one producer (the test thread) for synchronous events.
            If there can be multiple producers for synchronous events, one would have
            to introduce one WaitHandle per event.
            </para>
            </summary>
        </member>
        <member name="M:NUnit.Core.EventQueue.SetWaitHandleForSynchronizedEvents(System.Threading.AutoResetEvent)">
            <summary>
            Sets a handle on which to wait, when <see cref="M:NUnit.Core.EventQueue.Enqueue(NUnit.Core.Event)"/> is called
            for an <see cref="T:NUnit.Core.Event"/> with <see cref="P:NUnit.Core.Event.IsSynchronous"/> == true.
            </summary>
            <param name="synchronousEventWaitHandle">
            The wait handle on which to wait, when <see cref="M:NUnit.Core.EventQueue.Enqueue(NUnit.Core.Event)"/> is called
            for an <see cref="T:NUnit.Core.Event"/> with <see cref="P:NUnit.Core.Event.IsSynchronous"/> == true.
            <para>The caller is responsible for disposing this wait handle.</para>
            </param>
        </member>
        <member name="M:NUnit.Core.EventQueue.Dequeue(System.Boolean)">
            <summary>
            Removes the first element from the queue and returns it (or <c>null</c>).
            </summary>
            <param name="blockWhenEmpty">
            If <c>true</c> and the queue is empty, the calling thread is blocked until
            either an element is enqueued, or <see cref="M:NUnit.Core.EventQueue.Stop"/> is called.
            </param>
            <returns>
            <list type="bullet">
              <item>
                <term>If the queue not empty</term>
                <description>the first element.</description>
              </item>
              <item>
                <term>otherwise, if <paramref name="blockWhenEmpty"/>==<c>false</c> 
                  or <see cref="M:NUnit.Core.EventQueue.Stop"/> has been called</term>
                <description><c>null</c>.</description>
              </item>
            </list>
            </returns>
        </member>
        <member name="F:NUnit.Core.ExpectedExceptionProcessor.testMethod">
            <summary>
            The TestMethod to which this exception processor applies
            </summary>
        </member>
        <member name="F:NUnit.Core.ExpectedExceptionProcessor.exceptionHandler">
            <summary>
            The exception handler method
            </summary>
        </member>
        <member name="F:NUnit.Core.ExpectedExceptionProcessor.expectedExceptionType">
            <summary>
            The type of any expected exception
            </summary>
        </member>
        <member name="F:NUnit.Core.ExpectedExceptionProcessor.expectedExceptionName">
            <summary>
            The full name of any expected exception type
            </summary>
        </member>
        <member name="F:NUnit.Core.ExpectedExceptionProcessor.expectedMessage">
            <summary>
            The value of any message associated with an expected exception
            </summary>
        </member>
        <member name="F:NUnit.Core.ExpectedExceptionProcessor.matchType">
            <summary>
            A string indicating how to match the expected message
            </summary>
        </member>
        <member name="F:NUnit.Core.ExpectedExceptionProcessor.userMessage">
            <summary>
            A string containing any user message specified for the expected exception
            </summary>
        </member>
        <member name="T:NUnit.Core.IgnoreDecorator">
            <summary>
            Ignore Decorator is an alternative method of marking tests to
            be ignored. It is currently not used, since the test builders
            take care of the ignore attribute.
            </summary>
        </member>
        <member name="T:NUnit.Core.InternalTraceLevel">
            <summary>
            InternalTraceLevel is an enumeration controlling the
            level of detailed presented in the internal log.
            </summary>
        </member>
        <member name="T:NUnit.Core.InternalTrace">
            <summary>
            Summary description for Logger.
            </summary>
        </member>
        <member name="T:NUnit.Core.InternalTraceWriter">
            <summary>
            A trace listener that writes to a separate file per domain
            and process using it.
            </summary>
        </member>
        <member name="M:NUnit.Core.InvalidSuiteException.#ctor(System.String)">
            <summary>
            Standard constructor
            </summary>
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Core.InvalidSuiteException.#ctor(System.String,System.Exception)">
            <summary>
            Standard constructor
            </summary>
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Core.InvalidSuiteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Core.InvalidTestFixtureException">
            <summary>
            Summary description for NoTestMethodsException.
            </summary>
            
        </member>
        <member name="M:NUnit.Core.InvalidTestFixtureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Core.LegacySuite">
            <summary>
            Represents a test suite constructed from a type that has a static Suite property
            </summary>
        </member>
        <member name="T:NUnit.Core.TestSuite">
            <summary>
            Summary description for TestSuite.
            </summary>
            
        </member>
        <member name="F:NUnit.Core.TestSuite.tests">
            <summary>
            Our collection of child tests
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.fixtureSetUpMethods">
            <summary>
            The fixture setup methods for this suite
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.fixtureTearDownMethods">
            <summary>
            The fixture teardown methods for this suite
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.setUpMethods">
            <summary>
            The setup methods for this suite
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.tearDownMethods">
            <summary>
            The teardown methods for this suite
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.actions">
            <summary>
            The actions for this suite
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.maintainTestOrder">
            <summary>
            Set to true to suppress sorting this suite's contents
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.arguments">
            <summary>
            Arguments for use in creating a parameterized fixture
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.fixtureType">
            <summary>
            The System.Type of the fixture for this test suite, if there is one
            </summary>
        </member>
        <member name="F:NUnit.Core.TestSuite.fixture">
            <summary>
            The fixture object, if it has been created
            </summary>
        </member>
        <member name="T:NUnit.Core.Log4NetCapture">
            <summary>
            Proxy class for operations on a real log4net appender,
            allowing NUnit to work with multiple versions of log4net
            and to fail gracefully if no log4net assembly is present.
            </summary>
        </member>
        <member name="T:NUnit.Core.TextCapture">
            <summary>
            Abstract base for classes that capture text output
            and redirect it to a TextWriter.
            </summary>
        </member>
        <member name="P:NUnit.Core.TextCapture.Writer">
            <summary>
            Gets or sets the TextWriter to which text is redirected
            when captured. The value may only be changed when the
            logging threshold is set to "Off"
            </summary>
        </member>
        <member name="P:NUnit.Core.TextCapture.Threshold">
            <summary>
            Gets or sets the capture threshold value, which represents
            the degree of verbosity of the output text stream. Derived
            classes will need to translate the LoggingThreshold into
            the appropriate levels supported by the logging software.
            </summary>
        </member>
        <member name="F:NUnit.Core.Log4NetCapture.writer">
            <summary>
            The TextWriter to which text is redirected
            </summary>
        </member>
        <member name="F:NUnit.Core.Log4NetCapture.threshold">
            <summary>
            The threshold for capturing text. A value of "Off"
            means that no text is captured. A value of "All"
            should be taken to mean the highest possible level
            of verbosity supported by the derived class. The 
            meaning of any other values is determined by the 
            derived class.
            </summary>
        </member>
        <member name="M:NUnit.Core.Log4NetCapture.TryCreateAppender">
            <summary>
            Attempt to create a TextWriterAppender using reflection,
            failing silently if it is not possible.
            </summary>
        </member>
        <member name="P:NUnit.Core.Log4NetCapture.Writer">
            <summary>
            Gets or sets the TextWriter to which text is redirected
            when captured. The value may only be changed when the
            logging threshold is set to "Off"
            </summary>
        </member>
        <member name="P:NUnit.Core.Log4NetCapture.Threshold">
            <summary>
            Gets or sets the capture threshold value, which represents
            the degree of verbosity of the output text stream.
            Derived classes may supply multiple levels of capture but
            must retain the use of the "Off" setting to represent 
            no logging.
            </summary>
        </member>
        <member name="T:NUnit.Core.NamespaceSuite">
            <summary>
            TestAssembly is a TestSuite that represents the execution
            of tests in a managed assembly.
            </summary>
        </member>
        <member name="M:NUnit.Core.NamespaceSuite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Core.NamespaceSuite"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:NUnit.Core.NamespaceSuite.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Core.NamespaceSuite"/> class.
            </summary>
            <param name="parentNamespace">The parent namespace.</param>
            <param name="suiteName">Name of the suite.</param>
        </member>
        <member name="P:NUnit.Core.NamespaceSuite.TestType">
            <summary>
            Gets the type of the test.
            </summary>
        </member>
        <member name="T:NUnit.Core.NamespaceTreeBuilder">
            <summary>
            Class that can build a tree of automatic namespace
            suites from a group of fixtures.
            </summary>
        </member>
        <member name="F:NUnit.Core.NamespaceTreeBuilder.namespaceSuites">
            <summary>
            Hashtable of all test suites we have created to represent namespaces.
            Used to locate namespace parent suites for fixtures.
            </summary>
        </member>
        <member name="F:NUnit.Core.NamespaceTreeBuilder.rootSuite">
            <summary>
            The root of the test suite being created by this builder.
            </summary>
        </member>
        <member name="T:NUnit.Core.NoTestFixturesException">
            <summary>
            Summary description for NoTestFixtureException.
            </summary>
        </member>
        <member name="T:NUnit.Core.NullListener">
            <summary>
            Summary description for NullListener.
            </summary>
            
        </member>
        <member name="T:NUnit.Core.NUnitConfiguration">
            <summary>
            Provides static methods for accessing the NUnit config
            file 
            </summary>
        </member>
        <member name="P:NUnit.Core.NUnitConfiguration.NUnitLibDirectory">
            <summary>
            Gets the path to the lib directory for the version and build
            of NUnit currently executing.
            </summary>
        </member>
        <member name="T:NUnit.Core.NUnitException">
            <summary>
            Thrown when an assertion failed. Here to preserve the inner
            exception and hence its stack trace.
            </summary>
            
        </member>
        <member name="M:NUnit.Core.NUnitException.#ctor(System.String)">
            <summary>
            Standard constructor
            </summary>
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Core.NUnitException.#ctor(System.String,System.Exception)">
            <summary>
            Standard constructor
            </summary>
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Core.NUnitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Core.NUnitFramework">
            <summary>
            Static methods that implement aspects of the NUnit framework that cut 
            across individual test types, extensions, etc. Some of these use the 
            methods of the Reflect class to implement operations specific to the 
            NUnit Framework.
            </summary>
        </member>
        <member name="M:NUnit.Core.NUnitFramework.GetDescription(System.Attribute)">
            <summary>
            Method to return the description from an source
            </summary>
            <param name="source">The source to check</param>
            <returns>The description, if any, or null</returns>
        </member>
        <member name="M:NUnit.Core.NUnitFramework.ApplyCommonAttributes(System.Reflection.MemberInfo,NUnit.Core.Test)">
            <summary>
            Modify a newly constructed test based on a type or method by 
            applying any of NUnit's common attributes.
            </summary>
            <param name="member">The type or method from which the test was constructed</param>
            <param name="test">The test to which the attributes apply</param>
        </member>
        <member name="M:NUnit.Core.NUnitFramework.ApplyCommonAttributes(System.Reflection.Assembly,NUnit.Core.Test)">
            <summary>
            Modify a newly constructed test based on an assembly by applying 
            any of NUnit's common attributes.
            </summary>
            <param name="assembly">The assembly from which the test was constructed</param>
            <param name="test">The test to which the attributes apply</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NUnit.Core.NUnitFramework.ApplyCommonAttributes(System.Attribute[],NUnit.Core.Test)" -->
        <!-- Badly formed XML comment ignored for member "M:NUnit.Core.NUnitFramework.ApplyExpectedExceptionAttribute(System.Reflection.MethodInfo,NUnit.Core.TestMethod)" -->
        <member name="M:NUnit.Core.NUnitFramework.GetResultState(System.Exception)">
            <summary>
            Returns a result state for a special exception.
            If the exception is not handled specially, returns
            ResultState.Error.
            </summary>
            <param name="ex">The exception to be examined</param>
            <returns>A ResultState</returns>
        </member>
        <member name="M:NUnit.Core.NUnitFramework.IsValidCategoryName(System.String)">
            <summary>
            Returns true if the category name is valid
            </summary>
        </member>
        <member name="T:NUnit.Core.NUnitFramework.Assert">
            <summary>
            NUnitFramework.Assert is a nested class that implements
            a few of the framework operations by reflection, 
            using whatever framework version is available.
            </summary>
        </member>
        <member name="M:NUnit.Core.NUnitFramework.Assert.AreEqual(System.Object,System.Object)">
            <summary>
            Invoke Assert.AreEqual by reflection
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Core.NUnitFramework.Assert.GetAssertCount">
            <summary>
            Get the assertion counter. It clears itself automatically
            on each call.
            </summary>
            <returns>Count of number of asserts since last call</returns>
        </member>
        <member name="T:NUnit.Core.NUnitTestFixture">
            <summary>
            Class to implement an NUnit test fixture
            </summary>
        </member>
        <member name="T:NUnit.Core.TestFixture">
            <summary>
            TestFixture is a surrogate for a user test fixture class,
            containing one or more tests.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestFixture.TestType">
            <summary>
            Gets a string representing the kind of test
            that this object represents, for use in display.
            </summary>
        </member>
        <member name="T:NUnit.Core.NUnitTestMethod">
            <summary>
            Class to implement an NUnit test method
            </summary>
        </member>
        <member name="M:NUnit.Core.NUnitTestMethod.RunTest">
            <summary>
            Run a test returning the result. Overrides TestMethod
            to count assertions.
            </summary>
            <param name="testResult"></param>
        </member>
        <member name="T:NUnit.Core.ParameterizedFixtureSuite">
            <summary>
            ParameterizedFixtureSuite serves as a container for the set of test 
            fixtures created from a given Type using various parameters.
            </summary>
        </member>
        <member name="M:NUnit.Core.ParameterizedFixtureSuite.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Core.ParameterizedFixtureSuite"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:NUnit.Core.ParameterizedFixtureSuite.TestType">
            <summary>
            Gets the type of the test.
            </summary>
            <value>The type of the test.</value>
        </member>
        <member name="P:NUnit.Core.ParameterizedFixtureSuite.ParameterizedType">
            <summary>
            Gets the Type represented by this suite.
            </summary>
            <value>A Sysetm.Type.</value>
        </member>
        <member name="T:NUnit.Core.ParameterizedMethodSuite">
            <summary>
            ParameterizedMethodSuite holds a collection of individual
            TestMethods with their arguments applied.
            </summary>
        </member>
        <member name="M:NUnit.Core.ParameterizedMethodSuite.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Construct from a MethodInfo
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:NUnit.Core.ParameterizedMethodSuite.Run(NUnit.Core.EventListener,NUnit.Core.ITestFilter)">
            <summary>
            Override Run, setting Fixture to that of the Parent.
            </summary>
            <param name="listener"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.ParameterizedMethodSuite.DoOneTimeSetUp(NUnit.Core.TestResult)">
            <summary>
            Override DoOneTimeSetUp to avoid executing any
            TestFixtureSetUp method for this suite
            </summary>
            <param name="suiteResult"></param>
        </member>
        <member name="M:NUnit.Core.ParameterizedMethodSuite.DoOneTimeTearDown(NUnit.Core.TestResult)">
            <summary>
            Override DoOneTimeTearDown to avoid executing any
            TestFixtureTearDown method for this suite.
            </summary>
            <param name="suiteResult"></param>
        </member>
        <member name="P:NUnit.Core.ParameterizedMethodSuite.TestType">
            <summary>
            Gets a string representing the kind of test
            that this object represents, for use in display.
            </summary>
        </member>
        <member name="F:NUnit.Core.PlatformHelper.OSPlatforms">
            <summary>
            Comma-delimited list of all supported OS platform constants
            </summary>
        </member>
        <member name="F:NUnit.Core.PlatformHelper.RuntimePlatforms">
            <summary>
            Comma-delimited list of all supported Runtime platform constants
            </summary>
        </member>
        <member name="M:NUnit.Core.PlatformHelper.#ctor">
            <summary>
            Default constructor uses the operating system and
            common language runtime of the system.
            </summary>
        </member>
        <member name="M:NUnit.Core.PlatformHelper.#ctor(NUnit.Core.OSPlatform,NUnit.Core.RuntimeFramework)">
            <summary>
            Contruct a PlatformHelper for a particular operating
            system and common language runtime. Used in testing.
            </summary>
            <param name="os">OperatingSystem to be used</param>
        </member>
        <member name="M:NUnit.Core.PlatformHelper.IsPlatformSupported(System.String[])">
            <summary>
            Test to determine if one of a collection of platforms
            is being used currently.
            </summary>
            <param name="platforms"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.PlatformHelper.IsPlatformSupported(System.Attribute)">
            <summary>
            Tests to determine if the current platform is supported
            based on a platform attribute.
            </summary>
            <param name="platformAttribute">The attribute to examine</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.PlatformHelper.IsPlatformSupported(System.String)">
            <summary>
            Test to determine if the a particular platform or comma-
            delimited set of platforms is in use.
            </summary>
            <param name="platform">Name of the platform or comma-separated list of platform names</param>
            <returns>True if the platform is in use on the system</returns>
        </member>
        <member name="P:NUnit.Core.PlatformHelper.Reason">
            <summary>
            Return the last failure reason. Results are not
            defined if called before IsSupported( Attribute )
            is called.
            </summary>
        </member>
        <member name="T:NUnit.Core.ProjectRootSuite">
            <summary>
            TestAssembly is a TestSuite that represents the execution
            of tests in a managed assembly.
            </summary>
        </member>
        <member name="M:NUnit.Core.ProjectRootSuite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Core.ProjectRootSuite"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:NUnit.Core.ProjectRootSuite.TestType">
            <summary>
            Gets the type of the test.
            </summary>
        </member>
        <member name="T:NUnit.Core.ProxyTestRunner">
            <summary>
            DelegatingTestRUnner is the abstract base for core TestRunner
            implementations that operate by controlling a downstream
            TestRunner. All calls are simply passed on to the
            TestRunner that is provided to the constructor.
            
            Although the class is abstract, it has no abstract 
            methods specified because each implementation will
            need to override different methods. All methods are
            specified using interface syntax and the derived class
            must explicitly implement TestRunner in order to 
            redefine the selected methods.
            </summary>
        </member>
        <member name="T:NUnit.Core.TestRunner">
             <summary>
             The TestRunner Interface allows client code, such as the NUnit console and
             gui runners, to load and run tests. This is the lowest level interface generally
             supported for running tests and is implemented by the RemoteTestRunner class in
             the NUnit core as well as by other classes running on the client side.
             
             The Load method is used to load a suite of tests from one or more 
             assemblies, returning a tree of TestNodes to the caller.
             
             The CountTestCases family of methods returns the number of test cases in the
             loaded suite, either in its entirety or by using a filter to count a subset of tests.
             
             The Run family of methods performs a test run synchronously, returning a TestResult
             or TestResult[] to the caller. If provided, an EventListener interface will be 
             notified of significant events in the running of the tests. A filter may be used
             to run a subset of the tests.
            
             BeginRun and EndRun provide a simplified form of the asynchronous invocation
             pattern used in many places within the .NET framework. Because the current
             implementation allows only one run to be in process at a time, an IAsyncResult
             is not used at this time.
             
             Methods to cancel a run and to wait for a run to complete are also provided. The 
             result of the last run may be obtained by querying the TestResult property.
             
             </summary>
        </member>
        <member name="M:NUnit.Core.TestRunner.Load(NUnit.Core.TestPackage)">
            <summary>
            Load the assemblies in a test package
            </summary>
            <param name="package">The test package to be loaded</param>
            <returns>True if the tests were loaded successfully, otherwise false</returns>
        </member>
        <member name="M:NUnit.Core.TestRunner.Unload">
            <summary>
            Unload all tests previously loaded
            </summary>
        </member>
        <member name="M:NUnit.Core.TestRunner.CountTestCases(NUnit.Core.ITestFilter)">
            <summary>
            Count Test Cases using a filter
            </summary>
            <param name="filter">The filter to apply</param>
            <returns>The number of test cases found</returns>
        </member>
        <member name="M:NUnit.Core.TestRunner.Run(NUnit.Core.EventListener,NUnit.Core.ITestFilter,System.Boolean,NUnit.Core.LoggingThreshold)">
            <summary>
            Run selected tests and return a test result. The test is run synchronously,
            and the listener interface is notified as it progresses. Arguments control whether
            trace and log output are passed back to the caller.
            </summary>
            <param name="listener">Interface to receive EventListener notifications.</param>
            <param name="filter">The filter to apply when running the tests</param>
            <param name="captureTrace">If true, trace output is returned as a TestOutput event</param>
            <param name="logLevel">The threshold for log output to be returned as a TestOutput event</param>
        </member>
        <member name="M:NUnit.Core.TestRunner.BeginRun(NUnit.Core.EventListener,NUnit.Core.ITestFilter,System.Boolean,NUnit.Core.LoggingThreshold)">
            <summary>
            Start a run of selected tests. The tests are run aynchronously and the 
            listener interface is notified as it progresses. Arguments control whether
            trace and log output are passed back to the caller.
            </summary>
            <param name="listener">Interface to receive EventListener notifications.</param>
            <param name="filter">The filter to apply when running the tests</param>
            <param name="captureTrace">If true, trace output is returned as a TestOutput event</param>
            <param name="logLevel">The threshold for log output to be returned as a TestOutput event</param>
        </member>
        <member name="M:NUnit.Core.TestRunner.EndRun">
            <summary>
            Wait for an asynchronous run to complete and return the result.
            </summary>
            <returns>A TestResult for the entire run</returns>
        </member>
        <member name="M:NUnit.Core.TestRunner.CancelRun">
            <summary>
             Cancel the test run that is in progress. For a synchronous run,
             a client wanting to call this must create a separate run thread.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestRunner.Wait">
            <summary>
            Wait for the test run in progress to complete. For a synchronous run,
            a client wanting to call this must create a separate run thread. In
            particular, a gui client calling this method is likely to hang, since
            events will not be able to invoke methods on the gui thread.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestRunner.ID">
            <summary>
            TestRunners are identified by an ID. So long as there
            is only one test runner or a single chain of test runners,
            the default id of 0 may be used. However, any client that
            creates multiple runners must ensure that each one has a
            unique ID in order to locate and run specific tests.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestRunner.Running">
            <summary>
            Running indicates whether a test is in progress. To retrieve the
            results from an asynchronous test run, wait till Running is false.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestRunner.AssemblyInfo">
            <summary>
            Returns information about loaded assemblies
            </summary>
        </member>
        <member name="P:NUnit.Core.TestRunner.Test">
            <summary>
            The loaded test, converted to a tree of TestNodes so they can be
            serialized and marshalled to a remote client.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestRunner.TestResult">
            <summary>
            Result of the last test run.
            </summary>
        </member>
        <member name="F:NUnit.Core.ProxyTestRunner.runnerID">
            <summary>
            Our runner ID
            </summary>
        </member>
        <member name="F:NUnit.Core.ProxyTestRunner.testRunner">
            <summary>
            The downstream TestRunner
            </summary>
        </member>
        <member name="F:NUnit.Core.ProxyTestRunner.listener">
            <summary>
            The event listener for the currently running test
            </summary>
        </member>
        <member name="M:NUnit.Core.ProxyTestRunner.#ctor(System.Int32)">
            <summary>
            Protected constructor for runners that delay creation
            of their downstream runner.
            </summary>
        </member>
        <member name="P:NUnit.Core.ProxyTestRunner.TestRunner">
            <summary>
            Protected property copies any settings to the downstream test runner
            when it is set. Derived runners overriding this should call the base
            or copy the settings themselves.
            </summary>
        </member>
        <member name="T:NUnit.Core.QueuingEventListener">
            <summary>
            QueuingEventListener uses an EventQueue to store any
            events received on its EventListener interface.
            </summary>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.RunStarted(System.String,System.Int32)">
            <summary>
            Run is starting
            </summary>
            <param name="tests">Array of tests to be run</param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.RunFinished(NUnit.Core.TestResult)">
            <summary>
            Run finished successfully
            </summary>
            <param name="results">Array of test results</param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.RunFinished(System.Exception)">
            <summary>
            Run was terminated due to an exception
            </summary>
            <param name="exception">Exception that was thrown</param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.TestStarted(NUnit.Core.TestName)">
            <summary>
            A single test case is starting
            </summary>
            <param name="testCase">The test case</param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.TestFinished(NUnit.Core.TestResult)">
            <summary>
            A test case finished
            </summary>
            <param name="result">Result of the test case</param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.SuiteStarted(NUnit.Core.TestName)">
            <summary>
            A suite is starting
            </summary>
            <param name="suite">The suite that is starting</param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.SuiteFinished(NUnit.Core.TestResult)">
            <summary>
            A suite finished
            </summary>
            <param name="result">Result of the suite</param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.UnhandledException(System.Exception)">
            <summary>
            An unhandled exception occured while running a test,
            but the test was not terminated.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:NUnit.Core.QueuingEventListener.TestOutput(NUnit.Core.TestOutput)">
            <summary>
            A message has been output to the console.
            </summary>
            <param name="testOutput">A console message</param>
        </member>
        <member name="P:NUnit.Core.QueuingEventListener.Events">
            <summary>
            The EvenQueue created and filled by this listener
            </summary>
        </member>
        <member name="T:NUnit.Core.Reflect">
            <summary>
            Helper methods for inspecting a type by reflection. 
            
            Many of these methods take ICustomAttributeProvider as an 
            argument to avoid duplication, even though certain attributes can 
            only appear on specific types of members, like MethodInfo or Type.
            
            In the case where a type is being examined for the presence of
            an attribute, interface or named member, the Reflect methods
            operate with the full name of the member being sought. This
            removes the necessity of the caller having a reference to the
            assembly that defines the item being sought and allows the
            NUnit core to inspect assemblies that reference an older
            version of the NUnit framework.
            </summary>
        </member>
        <member name="M:NUnit.Core.Reflect.HasAttribute(System.Reflection.ICustomAttributeProvider,System.String,System.Boolean)">
            <summary>
            Check presence of attribute of a given type on a member.
            </summary>
            <param name="member">The member to examine</param>
            <param name="attrName">The FullName of the attribute type to look for</param>
            <param name="inherit">True to include inherited attributes</param>
            <returns>True if the attribute is present</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetAttribute(System.Reflection.ICustomAttributeProvider,System.String,System.Boolean)">
            <summary>
            Get attribute of a given type on a member. If multiple attributes
            of a type are present, the first one found is returned.
            </summary>
            <param name="member">The member to examine</param>
            <param name="attrName">The FullName of the attribute type to look for</param>
            <param name="inherit">True to include inherited attributes</param>
            <returns>The attribute or null</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetAttributes(System.Reflection.ICustomAttributeProvider,System.String,System.Boolean)">
            <summary>
            Get all attributes of a given type on a member.
            </summary>
            <param name="member">The member to examine</param>
            <param name="attrName">The FullName of the attribute type to look for</param>
            <param name="inherit">True to include inherited attributes</param>
            <returns>The attribute or null</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetAttributes(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Get all attributes on a member.
            </summary>
            <param name="member">The member to examine</param>
            <param name="inherit">True to include inherited attributes</param>
            <returns>The attribute or null</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.HasInterface(System.Type,System.String)">
            <summary>
            Check to see if a type implements a named interface.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="interfaceName">The FullName of the interface to check for</param>
            <returns>True if the interface is implemented by the type</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.InheritsFrom(System.Type,System.String)">
            <summary>
            Checks to see if a type inherits from a named type. 
            </summary>
            <param name="type">The type to examine</param>
            <param name="parentType">The FullName of the inherited type to look for</param>
            <returns>True if the type inherits from the named type.</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetConstructor(System.Type)">
            <summary>
            Find the default constructor on a type
            </summary>
            <param name="fixtureType"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetMethodsWithAttribute(System.Type,System.String,System.Boolean)">
            <summary>
            Examine a fixture type and return an array of methods having a 
            particular attribute. The array is order with base methods first.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="attributeName">The FullName of the attribute to look for</param>
            <returns>The array of methods found</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.HasMethodWithAttribute(System.Type,System.String,System.Boolean)">
            <summary>
            Examine a fixture type and return true if it has a method with
            a particular attribute. 
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="attributeName">The FullName of the attribute to look for</param>
            <returns>True if found, otherwise false</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetNamedMethod(System.Type,System.String)">
            <summary>
            Examine a fixture type and get a method with a particular name.
            In the case of overloads, the first one found is returned.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="methodName">The name of the method</param>
            <returns>A MethodInfo or null</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetNamedMethod(System.Type,System.String,System.String[])">
            <summary>
            Examine a fixture type and get a method with a particular name and list
            of arguments. In the case of overloads, the first one found is returned.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="methodName">The name of the method</param>
            <param name="argTypes">The full names of the argument types to search for</param>
            <returns>A MethodInfo or null</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetPropertyWithAttribute(System.Type,System.String)">
            <summary>
            Examine a type and return a property having a particular attribute.
            In the case of multiple methods, the first one found is returned.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="attributeName">The FullName of the attribute to look for</param>
            <returns>A PropertyInfo or null</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetNamedProperty(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Examine a type and get a property with a particular name.
            In the case of overloads, the first one found is returned.
            </summary>
            <param name="type">The type to examine</param>
            <param name="bindingFlags">BindingFlags to use</param>
            <returns>A PropertyInfo or null</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetPropertyValue(System.Object,System.String)">
            <summary>
            Get the value of a named property on an object using binding flags of Public and Instance
            </summary>
            <param name="obj">The object for which the property value is needed</param>
            <param name="name">The name of a non-indexed property of the object</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetPropertyValue(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Get the value of a named property on an object
            </summary>
            <param name="obj">The object for which the property value is needed</param>
            <param name="name">The name of a non-indexed property of the object</param>
            <param name="bindingFlags">BindingFlags for use in determining which properties are needed</param>param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Reflect.Construct(System.Type)">
            <summary>
            Invoke the default constructor on a Type
            </summary>
            <param name="type">The Type to be constructed</param>
            <returns>An instance of the Type</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.Construct(System.Type,System.Object[])">
            <summary>
            Invoke a constructor on a Type with arguments
            </summary>
            <param name="type">The Type to be constructed</param>
            <param name="arguments">Arguments to the constructor</param>
            <returns>An instance of the Type</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.GetTypeArray(System.Object[])">
            <summary>
            Returns an array of types from an array of objects.
            Used because the compact framework doesn't support
            Type.GetTypeArray()
            </summary>
            <param name="objects">An array of objects</param>
            <returns>An array of Types</returns>
        </member>
        <member name="M:NUnit.Core.Reflect.InvokeMethod(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Invoke a parameterless method returning void on an object.
            </summary>
            <param name="method">A MethodInfo for the method to be invoked</param>
            <param name="fixture">The object on which to invoke the method</param>
        </member>
        <member name="M:NUnit.Core.Reflect.InvokeMethod(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Invoke a method returning void, converting any TargetInvocationException
            to an NUnitException
            </summary>
            <param name="method">A MethodInfo for the method to be invoked</param>
            <param name="fixture">The object on which to invoke the method</param>
        </member>
        <member name="T:NUnit.Core.RemoteTestRunner">
            <summary>
            RemoteTestRunner is tailored for use as the initial runner to
            receive control in a remote domain. It provides isolation for the return
            value by using a ThreadedTestRunner and for the events through use of
            an EventPump.
            </summary>
        </member>
        <member name="M:NUnit.Core.RemoteTestRunner.CreateInstance(System.AppDomain,System.Int32)">
            <summary>
            Returns a RemoteTestRunner in the target domain. This method
            is used in the domain that wants to get a reference to 
            a RemoteTestRunnner and not in the test domain itself.
            </summary>
            <param name="targetDomain">AppDomain in which to create the runner</param>
            <param name="ID">Id for the new runner to use</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Core.SetUpFixture">
            <summary>
            SetUpFixture extends TestSuite and supports
            Setup and TearDown methods.
            </summary>
        </member>
        <member name="P:NUnit.Core.SetUpFixture.TestType">
            <summary>
            Gets a string representing the kind of test
            that this object represents, for use in display.
            </summary>
        </member>
        <member name="T:NUnit.Core.SimpleTestRunner">
            <summary>
            SimpleTestRunner is the simplest direct-running TestRunner. It
            passes the event listener interface that is provided on to the tests
            to use directly and does nothing to redirect text output. Both
            Run and BeginRun are actually synchronous, although the client
            can usually ignore this. BeginRun + EndRun operates as expected.
            </summary>
        </member>
        <member name="F:NUnit.Core.SimpleTestRunner.runnerID">
            <summary>
            Identifier for this runner. Must be unique among all
            active runners in order to locate tests. Default
            value of 0 is adequate in applications with a single
            runner or a non-branching chain of runners.
            </summary>
        </member>
        <member name="F:NUnit.Core.SimpleTestRunner.test">
            <summary>
            The loaded test suite
            </summary>
        </member>
        <member name="F:NUnit.Core.SimpleTestRunner.builder">
            <summary>
            The builder we use to load tests, created for each load
            </summary>
        </member>
        <member name="F:NUnit.Core.SimpleTestRunner.testResult">
            <summary>
            Results from the last test run
            </summary>
        </member>
        <member name="F:NUnit.Core.SimpleTestRunner.runThread">
            <summary>
            The thread on which Run was called. Set to the
            current thread while a run is in process.
            </summary>
        </member>
        <member name="M:NUnit.Core.SimpleTestRunner.Load(NUnit.Core.TestPackage)">
            <summary>
            Load a TestPackage
            </summary>
            <param name="package">The package to be loaded</param>
            <returns>True on success, false on failure</returns>
        </member>
        <member name="M:NUnit.Core.SimpleTestRunner.Unload">
            <summary>
            Unload all tests previously loaded
            </summary>
        </member>
        <member name="M:NUnit.Core.SimpleTestRunner.Wait">
            <summary>
            Wait is a NOP for SimpleTestRunner
            </summary>
        </member>
        <member name="P:NUnit.Core.SimpleTestRunner.TestResult">
            <summary>
            Results from the last test run
            </summary>
        </member>
        <member name="T:NUnit.Core.StringTextWriter">
            <summary>
            Use this wrapper to ensure that only strings get passed accross the AppDomain
            boundary.  Otherwise tests will break when non-remotable objects are passed to
            Console.Write/WriteLine.
            </summary>
        </member>
        <member name="T:NUnit.Core.BufferedStringTextWriter">
            <summary>
            This wrapper derives from StringTextWriter and adds buffering
            to improve cross-domain performance. The buffer is flushed whenever
            it reaches or exceeds a maximum size or when Flush is called.
            </summary>
        </member>
        <member name="T:NUnit.Core.SuiteBuilderAttribute">
            <summary>
            SuiteBuilderAttribute is used to mark custom suite builders.
            The class so marked must implement the ISuiteBuilder interface.
            </summary>
        </member>
        <member name="T:NUnit.Core.TestAssembly">
            <summary>
            TestAssembly is a TestSuite that represents the execution
            of tests in a managed assembly.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestAssembly.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Core.TestAssembly"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:NUnit.Core.TestAssembly.TestType">
            <summary>
            Gets the type of the test.
            </summary>
        </member>
        <member name="T:NUnit.Core.TestCaseBuilderAttribute">
            <summary>
            TestBuilderAttribute is used to mark custom test case builders.
            The class so marked must implement the ITestCaseBuilder interface.
            </summary>
        </member>
        <member name="T:NUnit.Core.TestDecoratorAttribute">
            <summary>
            TestDecoratorAttribute is used to mark custom suite builders.
            The class so marked must implement the ISuiteBuilder interface.
            </summary>
        </member>
        <member name="T:NUnit.Core.TestExecutionContext">
            <summary>
            Helper class used to save and restore certain static or
            singleton settings in the environment that affect tests 
            or which might be changed by the user tests.
            
            An internal class is used to hold settings and a stack
            of these objects is pushed and popped as Save and Restore
            are called.
            
            Static methods for each setting forward to the internal 
            object on the top of the stack.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestExecutionContext.current">
            <summary>
            The current context, head of the list of saved contexts.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestExecutionContext.tracing">
            <summary>
            Indicates whether trace is enabled
            </summary>
        </member>
        <member name="F:NUnit.Core.TestExecutionContext.outWriter">
            <summary>
            Destination for standard output
            </summary>
        </member>
        <member name="F:NUnit.Core.TestExecutionContext.errorWriter">
            <summary>
            Destination for standard error
            </summary>
        </member>
        <member name="F:NUnit.Core.TestExecutionContext.traceWriter">
            <summary>
            Destination for Trace output
            </summary>
        </member>
        <member name="F:NUnit.Core.TestExecutionContext.testCaseTimeout">
            <summary>
            Default timeout for test cases
            </summary>
        </member>
        <member name="F:NUnit.Core.TestExecutionContext.currentDirectory">
            <summary>
            The current working directory
            </summary>
        </member>
        <member name="F:NUnit.Core.TestExecutionContext.currentCulture">
            <summary>
            The current culture
            </summary>
        </member>
        <member name="F:NUnit.Core.TestExecutionContext.currentUICulture">
            <summary>
            The current UI culture
            </summary>
        </member>
        <member name="F:NUnit.Core.TestExecutionContext.currentPrincipal">
            <summary>
            The current Principal.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestExecutionContext.currentTest">
            <summary>
            The currently executing test
            </summary>
        </member>
        <member name="F:NUnit.Core.TestExecutionContext.currentResult">
            <summary>
            The active TestResult for the current test
            </summary>
        </member>
        <member name="F:NUnit.Core.TestExecutionContext.testPackage">
            <summary>
            The TestPackage being executed
            </summary>
        </member>
        <member name="F:NUnit.Core.TestExecutionContext.prior">
            <summary>
            Link to a prior saved context
            </summary>
        </member>
        <member name="M:NUnit.Core.TestExecutionContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Core.TestExecutionContext"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestExecutionContext.#ctor(NUnit.Core.TestExecutionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Core.TestExecutionContext"/> class.
            </summary>
            <param name="other">An existing instance of TestExecutionContext.</param>
        </member>
        <member name="M:NUnit.Core.TestExecutionContext.Save">
            <summary>
            Saves the old context and makes a fresh one 
            current without changing any settings.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestExecutionContext.Restore">
            <summary>
            Restores the last saved context and puts
            any saved settings back into effect.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestExecutionContext.ReverseChanges">
            <summary>
            Used to restore settings to their prior
            values before reverting to a prior context.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestExecutionContext.Update">
            <summary>
            Record any changed values in the current context
            </summary>
        </member>
        <member name="P:NUnit.Core.TestExecutionContext.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
            <value>The current context.</value>
        </member>
        <member name="P:NUnit.Core.TestExecutionContext.Tracing">
            <summary>
            Controls whether trace and debug output are written
            to the standard output.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestExecutionContext.Out">
            <summary>
            Controls where Console.Out is directed
            </summary>
        </member>
        <member name="P:NUnit.Core.TestExecutionContext.Error">
            <summary>
            Controls where Console.Error is directed
            </summary>
        </member>
        <member name="P:NUnit.Core.TestExecutionContext.TraceWriter">
            <summary>
            Controls where Trace output is directed
            </summary>
        </member>
        <member name="P:NUnit.Core.TestExecutionContext.LogWriter">
            <summary>
             Gets or sets the Log writer, which is actually held by a log4net 
             TextWriterAppender. When first set, the appender will be created
             and will thereafter send any log events to the writer.
             
             In normal operation, LogWriter is set to an EventListenerTextWriter
             connected to the EventQueue in the test domain. The events are
             subsequently captured in the Gui an the output displayed in
             the Log tab. The application under test does not need to define
             any additional appenders.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestExecutionContext.CurrentDirectory">
            <summary>
            Saves and restores the CurrentDirectory
            </summary>
        </member>
        <member name="P:NUnit.Core.TestExecutionContext.CurrentCulture">
            <summary>
            Saves or restores the CurrentCulture
            </summary>
        </member>
        <member name="P:NUnit.Core.TestExecutionContext.CurrentUICulture">
            <summary>
            Saves or restores the CurrentUICulture
            </summary>
        </member>
        <member name="P:NUnit.Core.TestExecutionContext.CurrentPrincipal">
            <summary>
            Gets or sets the current <see cref="T:System.Security.Principal.IPrincipal"/> for the Thread.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestExecutionContext.TestCaseTimeout">
            <summary>
            Gets or sets the test case timeout value
            </summary>
        </member>
        <member name="P:NUnit.Core.TestExecutionContext.CurrentTest">
            <summary>
            Gets or sets the current test
            </summary>
        </member>
        <member name="P:NUnit.Core.TestExecutionContext.CurrentResult">
            <summary>
            Gets or sets the current test result
            </summary>
        </member>
        <member name="P:NUnit.Core.TestExecutionContext.TestPackage">
            <summary>
            Gets the test package currently being run
            </summary>
        </member>
        <member name="T:NUnit.Core.TestFixtureBuilder">
            <summary>
            TestFixtureBuilder contains static methods for building
            TestFixtures from types. It uses builtin SuiteBuilders
            and any installed extensions to do it.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestFixtureBuilder.BuildFrom(System.Type)">
            <summary>
            Build a test fixture from a given type.
            </summary>
            <param name="type">The type to be used for the fixture</param>
            <returns>A TestSuite if the fixture can be built, null if not</returns>
        </member>
        <member name="M:NUnit.Core.TestFixtureBuilder.BuildFrom(System.Object)">
            <summary>
            Build a fixture from an object. 
            </summary>
            <param name="fixture">The object to be used for the fixture</param>
            <returns>A TestSuite if fixture type can be built, null if not</returns>
        </member>
        <member name="M:NUnit.Core.TestFixtureBuilder.#ctor">
            <summary>
            Private constructor to prevent instantiation
            </summary>
        </member>
        <member name="T:NUnit.Core.TestRunnerThread">
            <summary>
            TestRunnerThread encapsulates running a test on a thread.
            It knows how to create the thread based on configuration
            settings and can cancel abort the test if necessary.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestRunnerThread.runner">
            <summary>
            The Test runner to be used in running tests on the thread
            </summary>
        </member>
        <member name="F:NUnit.Core.TestRunnerThread.thread">
            <summary>
            The System.Threading.Thread created by the object
            </summary>
        </member>
        <member name="F:NUnit.Core.TestRunnerThread.listener">
            <summary>
            The EventListener interface to receive test events
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NUnit.Core.TestRunnerThread.filter" -->
        <member name="F:NUnit.Core.TestRunnerThread.tracing">
            <summary>
            Indicates whether trace output should be captured
            </summary>
        </member>
        <member name="F:NUnit.Core.TestRunnerThread.logLevel">
            <summary>
            The logging threshold for which output should be captured
            </summary>
        </member>
        <member name="F:NUnit.Core.TestRunnerThread.results">
            <summary>
            Array of returned results
            </summary>
        </member>
        <member name="M:NUnit.Core.TestRunnerThread.TestRunnerThreadProc">
            <summary>
            The thread proc for our actual test run
            </summary>
        </member>
        <member name="P:NUnit.Core.TestRunnerThread.IsAlive">
            <summary>
            True if the thread is executing
            </summary>
        </member>
        <member name="P:NUnit.Core.TestRunnerThread.Results">
            <summary>
            Array of returned results
            </summary>
        </member>
        <member name="T:NUnit.Core.TestSuiteBuilder">
            <summary>
            This is the master suite builder for NUnit. It builds a test suite from
            one or more assemblies using a list of internal and external suite builders 
            to create fixtures from the qualified types in each assembly. It implements
            the ISuiteBuilder interface itself, allowing it to be used by other classes
            for queries and suite construction.
            </summary>D:\Dev\NUnit\nunit20\src\NUnitFramework\core\TestBuilderAttribute.cs
        </member>
        <member name="M:NUnit.Core.TestSuiteBuilder.Build(NUnit.Core.TestPackage)">
            <summary>
            Build a suite based on a TestPackage
            </summary>
            <param name="package">The TestPackage</param>
            <returns>A TestSuite</returns>
        </member>
        <member name="T:NUnit.Core.TestThread">
            <summary>
            Represents a thread of test execution and runs a test
            on a thread, implementing timeout and setting the 
            apartment state appropriately.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestThread.thread">
            <summary>
            The Thread object used to run tests
            </summary>
        </member>
        <member name="F:NUnit.Core.TestThread.threadResult">
            <summary>
            The result of running the test, which must be kept
            separate from the returned TestResult while the thread
            is running to avoid race conditions.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestThread.thrownException">
            <summary>
            Unexpected exception thrown by test thread
            </summary>
        </member>
        <member name="M:NUnit.Core.TestThread.Run(NUnit.Core.EventListener,NUnit.Core.ITestFilter)">
            <summary>
            Run the test, honoring any timeout value provided. If the
            timeout is exceeded, set the testresult as a failure. As
            currently implemented, the thread proc calls test.doRun,
            which handles all exceptions itself. However, for safety,
            any exception thrown is rethrown upwards.
            
            TODO: It would be cleaner to call test.Run, since that's
            part of the pubic interface, but it would require some
            restructuring of the Test hierarchy.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestThread.RunTestProc">
            <summary>
            This is the engine of this class; the actual call to test.doRun!
            Note that any thrown exception is saved for later use!
            </summary>
        </member>
        <member name="T:NUnit.Core.ThreadedTestRunner">
            <summary>
            ThreadedTestRunner overrides the Run and BeginRun methods 
            so that they are always run on a separate thread. The actual
            </summary>
        </member>
        <member name="M:NUnit.Core.ThreadUtility.Kill(System.Threading.Thread)">
            <summary>
            Do our best to Kill a thread
            </summary>
            <param name="thread">The thread to kill</param>
        </member>
        <member name="M:NUnit.Core.ThreadUtility.Kill(System.Threading.Thread,System.Object)">
            <summary>
            Do our best to kill a thread, passing state info
            </summary>
            <param name="thread">The thread to kill</param>
            <param name="stateInfo">Info for the ThreadAbortException handler</param>
        </member>
        <member name="T:NUnit.Core.Extensibility.Addin">
            <summary>
            The Addin class holds information about an addin.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.Addin.#ctor(System.Type)">
            <summary>
            Construct an Addin for a type.
            </summary>
            <param name="type">The type to be used</param>
        </member>
        <member name="M:NUnit.Core.Extensibility.Addin.Equals(System.Object)">
            <summary>
            Return true if two Addins have teh same type name
            </summary>
            <param name="obj">The other addin to be compared</param>
        </member>
        <member name="M:NUnit.Core.Extensibility.Addin.GetHashCode">
            <summary>
            Return a hash code for this addin
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.Addin.Name">
            <summary>
            The name of the Addin
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.Addin.Description">
            <summary>
            Brief description of what the Addin does
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.Addin.ExtensionType">
            <summary>
            The type or types of extension provided, using 
            one or more members of the ExtensionType enumeration.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.Addin.TypeName">
            <summary>
            The AssemblyQualifiedName of the type that implements
            the addin.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.Addin.Status">
            <summary>
            The status of the addin
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.Addin.Message">
            <summary>
            Any message that clarifies the status of the Addin,
            such as an error message or an explanation of why
            the addin is disabled.
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.AddinStatus">
            <summary>
            The AddinStatus enum indicates the load status of an addin.
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.AddinStatus.Unknown">
            <summary>
            Not known - default
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.AddinStatus.Enabled">
            <summary>
            The addin is enabled but not loaded
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.AddinStatus.Disabled">
            <summary>
            The addin is disabled
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.AddinStatus.Loaded">
            <summary>
            The addin was loaded successfully
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.AddinStatus.Error">
            <summary>
            An error was encountered loading the addin
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.ExtensionType">
            <summary>
            The ExtensionType enumeration is used to indicate the
            kinds of extensions provided by an Addin. The addin
            is only installed by hosts supporting one of its
            extension types.
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.ExtensionType.Core">
            <summary>
            A Core extension is installed by the CoreExtensions
            host in each test domain.
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.ExtensionType.Client">
            <summary>
            A Client extension is installed by all clients
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.ExtensionType.Gui">
            <summary>
            A Gui extension is installed by the gui client
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.IAddin">
            <summary>
            Add-ins are used to extend NUnti. All add-ins must
            implement the IAddin interface.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.IAddin.Install(NUnit.Core.Extensibility.IExtensionHost)">
            <summary>
            When called, the add-in installs itself into
            the host, if possible. Because NUnit uses separate
            hosts for the client and test domain environments,
            an add-in may be invited to istall itself more than
            once. The add-in is responsible for checking which
            extension points are supported by the host that is
            passed to it and taking the appropriate action.
            </summary>
            <param name="host">The host in which to install the add-in</param>
            <returns>True if the add-in was installed, otehrwise false</returns>
        </member>
        <member name="T:NUnit.Core.Extensibility.IAddinRegistry">
            <summary>
            The IAddinRegistry interface allows registering addins
            and retrieving information about them. It is also used
             to record the load status of an addin.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.IAddinRegistry.Register(NUnit.Core.Extensibility.Addin)">
            <summary>
            Registers an addin
            </summary>
            <param name="addin">The addin to be registered</param>
        </member>
        <member name="M:NUnit.Core.Extensibility.IAddinRegistry.IsAddinRegistered(System.String)">
            <summary>
            Returns true if an addin of a given name is registered
            </summary>
            <param name="name">The name of the addin</param>
            <returns>True if an addin of that name is registered, otherwise false</returns>
        </member>
        <member name="M:NUnit.Core.Extensibility.IAddinRegistry.SetStatus(System.String,NUnit.Core.Extensibility.AddinStatus,System.String)">
            <summary>
             Sets the load status of an addin
            </summary>
            <param name="name">The name of the addin</param>
            <param name="status">The status to be set</param>
            <param name="message">An optional message explaining the status</param>
        </member>
        <member name="P:NUnit.Core.Extensibility.IAddinRegistry.Addins">
            <summary>
            Gets a list of all addins as Addin objects
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.DecoratorPriority">
            <summary>
            DecoratorPriority wraps constants that may be used
            to represent the relative priority of TestDecorators.
            Decorators with a lower priority are applied first
            so that higher priority decorators wrap them.
            
            NOTE: This feature is subject to change.
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.DecoratorPriority.Default">
            <summary>
            The default priority, equivalent to Normal
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.DecoratorPriority.First">
            <summary>
            Priority for Decorators that must apply first 
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.DecoratorPriority.Normal">
            <summary>
            Normal Decorator priority
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.DecoratorPriority.Last">
            <summary>
            Priority for Decorators that must apply last
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.NUnitAddinAttribute">
            <summary>
            NUnitAddinAttribute is used to mark all add-ins. The marked class
            must implement the IAddin interface.
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.NUnitAddinAttribute.Name">
            <summary>
            The name of this addin
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.NUnitAddinAttribute.Description">
            <summary>
            A description for the addin
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.NUnitAddinAttribute.Type">
            <summary>
            The type of extension provided
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.NUnitAddinAttribute.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.ParameterSet">
            <summary>
            ParameterSet encapsulates method arguments and
            other selected parameters needed for constructing
            a parameterized test case.
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.ParameterSet.properties">
            <summary>
            A dictionary of properties, used to add information
            to tests without requiring the class to change.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.ParameterSet.#ctor(System.Exception)">
            <summary>
            Construct a non-runnable ParameterSet, specifying
            the provider excetpion that made it invalid.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.ParameterSet.#ctor">
            <summary>
            Construct an empty parameter set, which
            defaults to being Runnable.
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.ParameterSet.FromDataSource(System.Object)">
            <summary>
            Constructs a ParameterSet from another object, accessing properties 
            by reflection. The object must expose at least an Arguments property
            in order for the test to be runnable.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.RunState">
            <summary>
            The RunState for this set of parameters.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.ProviderException">
            <summary>
            Holds any exception thrown by the parameter provider
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.Arguments">
            <summary>
            The arguments to be used in running the test,
            which must match the method signature.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.OriginalArguments">
            <summary>
            The original arguments supplied by the user,
            used for display purposes.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.ExpectedException">
            <summary>
            The Type of any exception that is expected.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.ExpectedExceptionName">
            <summary>
            The FullName of any exception that is expected
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.ExpectedMessage">
            <summary>
            The Message of any exception that is expected
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.MatchType">
            <summary>
             Gets or sets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.Result">
            <summary>
            The expected result of the test, which
            must match the method return type.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.HasExpectedResult">
            <summary>
            Returns true if an expected result has been 
            specified for this parameter set.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.Description">
            <summary>
            A description to be applied to this test case
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.TestName">
            <summary>
            A name to be used for this test case in lieu
            of the standard generated name containing
            the argument list.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NUnit.Core.Extensibility.ParameterSet"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.Explicit">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NUnit.Core.Extensibility.ParameterSet"/> is explicit.
            </summary>
            <value><c>true</c> if explicit; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.IgnoreReason">
            <summary>
            Gets or sets the ignore reason.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.Categories">
            <summary>
            Gets a list of categories associated with this test.
            </summary>
        </member>
        <member name="P:NUnit.Core.Extensibility.ParameterSet.Properties">
            <summary>
            Gets the property dictionary for this test
            </summary>
        </member>
        <member name="T:NUnit.Core.Extensibility.TestFramework">
            <summary>
            Summary description for TestFramework.
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.TestFramework.Name">
            <summary>
            The name of the framework
            </summary>
        </member>
        <member name="F:NUnit.Core.Extensibility.TestFramework.AssemblyName">
            <summary>
            The file name of the assembly that defines the framwork
            </summary>
        </member>
        <member name="M:NUnit.Core.Extensibility.TestFramework.#ctor(System.String,System.String)">
            <summary>
            Constructs a TestFramwork object given its name and assembly name.
            </summary>
            <param name="frameworkName"></param>
            <param name="assemblyName"></param>
        </member>
        <member name="T:NUnit.Core.Filters.AndFilter">
            <summary>
            Combines multiple filters so that a test must pass all 
            of them in order to pass this filter.
            </summary>
        </member>
        <member name="T:NUnit.Core.TestFilter">
            <summary>
            Interface to be implemented by filters applied to tests.
            The filter applies when running the test, after it has been
            loaded, since this is the only time an ITest exists.
            </summary>
        </member>
        <member name="T:NUnit.Core.ITestFilter">
            <summary>
            Interface to be implemented by filters applied to tests.
            The filter applies when running the test, after it has been
            loaded, since this is the only time an ITest exists.
            </summary>
        </member>
        <member name="M:NUnit.Core.ITestFilter.Pass(NUnit.Core.ITest)">
            <summary>
            Determine if a particular test passes the filter criteria. Pass
            may examine the parents and/or descendants of a test, depending
            on the semantics of the particular filter
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the test passes the filter, otherwise false</returns>
        </member>
        <member name="M:NUnit.Core.ITestFilter.Match(NUnit.Core.ITest)">
            <summary>
            Determine whether the test itself matches the filter criteria,
            without examining either parents or descendants.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the filter matches the any parent of the test</returns>
        </member>
        <member name="P:NUnit.Core.ITestFilter.IsEmpty">
            <summary>
            Indicates whether this is the EmptyFilter
            </summary>
        </member>
        <member name="F:NUnit.Core.TestFilter.Empty">
            <summary>
            Unique Empty filter.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestFilter.Pass(NUnit.Core.ITest)">
            <summary>
            Determine if a particular test passes the filter criteria. The default 
            implementation checks the test itself, its parents and any descendants.
            
            Derived classes may override this method or any of the Match methods
            to change the behavior of the filter.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the test passes the filter, otherwise false</returns>
        </member>
        <member name="M:NUnit.Core.TestFilter.Match(NUnit.Core.ITest)">
            <summary>
            Determine whether the test itself matches the filter criteria, without
            examining either parents or descendants.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the filter matches the any parent of the test</returns>
        </member>
        <member name="M:NUnit.Core.TestFilter.MatchParent(NUnit.Core.ITest)">
            <summary>
            Determine whether any ancestor of the test mateches the filter criteria
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the filter matches the an ancestor of the test</returns>
        </member>
        <member name="M:NUnit.Core.TestFilter.MatchDescendant(NUnit.Core.ITest)">
            <summary>
            Determine whether any descendant of the test matches the filter criteria.
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if at least one descendant matches the filter criteria</returns>
        </member>
        <member name="P:NUnit.Core.TestFilter.IsEmpty">
            <summary>
            Indicates whether this is the EmptyFilter
            </summary>
        </member>
        <member name="T:NUnit.Core.TestFilter.EmptyFilter">
            <summary>
            Nested class provides an empty filter - one that always
            returns true when called, unless the test is marked explicit.
            </summary>
        </member>
        <member name="M:NUnit.Core.Filters.AndFilter.#ctor">
            <summary>
            Constructs an empty AndFilter
            </summary>
        </member>
        <member name="M:NUnit.Core.Filters.AndFilter.#ctor(NUnit.Core.ITestFilter[])">
            <summary>
            Constructs an AndFilter from an array of filters
            </summary>
            <param name="filters"></param>
        </member>
        <member name="M:NUnit.Core.Filters.AndFilter.Add(NUnit.Core.ITestFilter)">
            <summary>
            Adds a filter to the list of filters
            </summary>
            <param name="filter">The filter to be added</param>
        </member>
        <member name="M:NUnit.Core.Filters.AndFilter.Pass(NUnit.Core.ITest)">
            <summary>
            Checks whether the AndFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if all the component filters pass, otherwise false</returns>
        </member>
        <member name="M:NUnit.Core.Filters.AndFilter.Match(NUnit.Core.ITest)">
            <summary>
            Checks whether the AndFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if all the component filters match, otherwise false</returns>
        </member>
        <member name="M:NUnit.Core.Filters.AndFilter.ToString">
            <summary>
            Return string representation of  the filter.
            </summary>
        </member>
        <member name="P:NUnit.Core.Filters.AndFilter.Filters">
            <summary>
            Return an array of the composing filters
            </summary>
        </member>
        <member name="T:NUnit.Core.Filters.CategoryFilter">
            <summary>
            CategoryFilter is able to select or exclude tests
            based on their categories.
            </summary>
            
        </member>
        <member name="M:NUnit.Core.Filters.CategoryFilter.#ctor">
            <summary>
            Construct an empty CategoryFilter
            </summary>
        </member>
        <member name="M:NUnit.Core.Filters.CategoryFilter.#ctor(System.String)">
            <summary>
            Construct a CategoryFilter using a single category name
            </summary>
            <param name="name">A category name</param>
        </member>
        <member name="M:NUnit.Core.Filters.CategoryFilter.#ctor(System.String[])">
            <summary>
            Construct a CategoryFilter using an array of category names
            </summary>
            <param name="names">An array of category names</param>
        </member>
        <member name="M:NUnit.Core.Filters.CategoryFilter.AddCategory(System.String)">
            <summary>
            Add a category name to the filter
            </summary>
            <param name="name">A category name</param>
        </member>
        <member name="M:NUnit.Core.Filters.CategoryFilter.Match(NUnit.Core.ITest)">
            <summary>
            Check whether the filter matches a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.Filters.CategoryFilter.ToString">
            <summary>
            Return the string representation of a category filter
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Core.Filters.CategoryFilter.Categories">
            <summary>
            Gets the list of categories from this filter
            </summary>
        </member>
        <member name="T:NUnit.Core.Filters.NameFilter">
            <summary>
            Summary description for NameFilter.
            </summary>
            
        </member>
        <member name="M:NUnit.Core.Filters.NameFilter.#ctor">
            <summary>
            Construct an empty NameFilter
            </summary>
        </member>
        <member name="M:NUnit.Core.Filters.NameFilter.#ctor(NUnit.Core.TestName)">
            <summary>
            Construct a NameFilter for a single TestName
            </summary>
            <param name="testName"></param>
        </member>
        <member name="M:NUnit.Core.Filters.NameFilter.Add(NUnit.Core.TestName)">
            <summary>
            Add a TestName to a NameFilter
            </summary>
            <param name="testName"></param>
        </member>
        <member name="M:NUnit.Core.Filters.NameFilter.Match(NUnit.Core.ITest)">
            <summary>
            Check if a test matches the filter
            </summary>
            <param name="test">The test to match</param>
            <returns>True if it matches, false if not</returns>
        </member>
        <member name="T:NUnit.Core.Filters.NotFilter">
            <summary>
            NotFilter negates the operation of another filter
            </summary>
        </member>
        <member name="M:NUnit.Core.Filters.NotFilter.#ctor(NUnit.Core.ITestFilter)">
            <summary>
            Construct a not filter on another filter
            </summary>
            <param name="baseFilter">The filter to be negated</param>
        </member>
        <member name="M:NUnit.Core.Filters.NotFilter.Match(NUnit.Core.ITest)">
            <summary>
            Check whether the filter matches a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if it matches, otherwise false</returns>
        </member>
        <member name="M:NUnit.Core.Filters.NotFilter.MatchDescendant(NUnit.Core.ITest)">
            <summary>
            Determine whether any descendant of the test matches the filter criteria.
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if at least one descendant matches the filter criteria</returns>
        </member>
        <member name="M:NUnit.Core.Filters.NotFilter.ToString">
            <summary>
            Return string representation of the filter
            </summary>
        </member>
        <member name="P:NUnit.Core.Filters.NotFilter.TopLevel">
            <summary>
            Indicates whether this is a top-level NotFilter,
            requiring special handling of Explicit
            </summary>
        </member>
        <member name="P:NUnit.Core.Filters.NotFilter.BaseFilter">
            <summary>
            Gets the base filter
            </summary>
        </member>
        <member name="T:NUnit.Core.Filters.OrFilter">
            <summary>
            Combines multiple filters so that a test must pass one 
            of them in order to pass this filter.
            </summary>
        </member>
        <member name="M:NUnit.Core.Filters.OrFilter.#ctor">
            <summary>
            Constructs an empty OrFilter
            </summary>
        </member>
        <member name="M:NUnit.Core.Filters.OrFilter.#ctor(NUnit.Core.ITestFilter[])">
            <summary>
            Constructs an AndFilter from an array of filters
            </summary>
            <param name="filters"></param>
        </member>
        <member name="M:NUnit.Core.Filters.OrFilter.Add(NUnit.Core.ITestFilter)">
            <summary>
            Adds a filter to the list of filters
            </summary>
            <param name="filter">The filter to be added</param>
        </member>
        <member name="M:NUnit.Core.Filters.OrFilter.Pass(NUnit.Core.ITest)">
            <summary>
            Checks whether the OrFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if any of the component filters pass, otherwise false</returns>
        </member>
        <member name="M:NUnit.Core.Filters.OrFilter.Match(NUnit.Core.ITest)">
            <summary>
            Checks whether the OrFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if any of the component filters match, otherwise false</returns>
        </member>
        <member name="M:NUnit.Core.Filters.OrFilter.ToString">
            <summary>
            Return the string representation of an or filter
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Core.Filters.OrFilter.Filters">
            <summary>
            Return an array of the composing filters
            </summary>
        </member>
        <member name="T:NUnit.Core.Filters.SimpleNameFilter">
            <summary>
            SimpleName filter selects tests based on their name
            </summary>
        </member>
        <member name="M:NUnit.Core.Filters.SimpleNameFilter.#ctor">
            <summary>
            Construct an empty SimpleNameFilter
            </summary>
        </member>
        <member name="M:NUnit.Core.Filters.SimpleNameFilter.#ctor(System.String)">
            <summary>
            Construct a SimpleNameFilter for a single name
            </summary>
            <param name="name">The name the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Core.Filters.SimpleNameFilter.#ctor(System.String[])">
            <summary>
            Construct a SimpleNameFilter for an array of names
            </summary>
            <param names="nameToAdd">The names the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Core.Filters.SimpleNameFilter.Add(System.String)">
            <summary>
            Add a name to a SimpleNameFilter
            </summary>
            <param name="name">The name to be added.</param>
        </member>
        <member name="M:NUnit.Core.Filters.SimpleNameFilter.Add(System.String[])">
            <summary>
            Add an array of names to a SimpleNameFilter
            </summary>
            <param name="namesToAdd">The name to be added.</param>
        </member>
        <member name="M:NUnit.Core.Filters.SimpleNameFilter.Match(NUnit.Core.ITest)">
            <summary>
            Check whether the filter matches a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if it matches, otherwise false</returns>
        </member>
        <member name="T:NUnit.Core.IAgency">
            <summary>
            The IAgency interface is implemented by a TestAgency in 
            order to allow TestAgents to register with it.
            </summary>
        </member>
        <member name="M:NUnit.Core.IAgency.Register(NUnit.Core.TestAgent)">
            <summary>
            Registers an agent with an agency
            </summary>
            <param name="agent"></param>
        </member>
        <member name="T:NUnit.Core.LoggingThreshold">
            <summary>
            Enumeration expressing the level of log messages to be 
            captured by NUnit and sent to the runner. These happen
            to match the standard levels used by log4net, but will
            be translated for any other loggers we support.
            </summary>
        </member>
        <member name="F:NUnit.Core.LoggingThreshold.Off">
            <summary>No logging</summary>
        </member>
        <member name="F:NUnit.Core.LoggingThreshold.Fatal">
            <summary>Severe error beyond which continuation is not possible</summary>
        </member>
        <member name="F:NUnit.Core.LoggingThreshold.Error">
            <summary>Error that may allow continuation</summary>
        </member>
        <member name="F:NUnit.Core.LoggingThreshold.Warn">
            <summary>A warning message</summary>
        </member>
        <member name="F:NUnit.Core.LoggingThreshold.Info">
            <summary>An informational message</summary>
        </member>
        <member name="F:NUnit.Core.LoggingThreshold.Debug">
            <summary>Messages used for debugging</summary>
        </member>
        <member name="F:NUnit.Core.LoggingThreshold.All">
            <summary>All of the preceding plus more detailled messages if supported</summary>
        </member>
        <member name="T:NUnit.Core.OSPlatform">
            <summary>
            OSPlatform represents a particular operating system platform
            </summary>
        </member>
        <member name="F:NUnit.Core.OSPlatform.UnixPlatformID_Microsoft">
            <summary>
            Platform ID for Unix as defined by Microsoft .NET 2.0 and greater
            </summary>
        </member>
        <member name="F:NUnit.Core.OSPlatform.UnixPlatformID_Mono">
            <summary>
            Platform ID for Unix as defined by Mono
            </summary>
        </member>
        <member name="M:NUnit.Core.OSPlatform.#ctor(System.PlatformID,System.Version)">
            <summary>
            Construct from a platform ID and version
            </summary>
        </member>
        <member name="M:NUnit.Core.OSPlatform.#ctor(System.PlatformID,System.Version,NUnit.Core.OSPlatform.ProductType)">
            <summary>
            Construct from a platform ID, version and product type
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.CurrentPlatform">
            <summary>
            Get the OSPlatform under which we are currently running
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.Platform">
            <summary>
            Get the platform ID of this instance
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.Version">
            <summary>
            Get the Version of this instance
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.Product">
            <summary>
            Get the Product Type of this instance
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWindows">
            <summary>
            Return true if this is a windows platform
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsUnix">
            <summary>
            Return true if this is a Unix or Linux platform
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin32S">
            <summary>
            Return true if the platform is Win32S
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin32Windows">
            <summary>
            Return true if the platform is Win32Windows
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin32NT">
            <summary>
             Return true if the platform is Win32NT
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWinCE">
            <summary>
            Return true if the platform is Windows CE
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin95">
            <summary>
            Return true if the platform is Windows 95
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin98">
            <summary>
            Return true if the platform is Windows 98
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWinME">
            <summary>
            Return true if the platform is Windows ME
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsNT3">
            <summary>
            Return true if the platform is NT 3
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsNT4">
            <summary>
            Return true if the platform is NT 4
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsNT5">
            <summary>
            Return true if the platform is NT 5
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin2K">
            <summary>
            Return true if the platform is Windows 2000
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWinXP">
            <summary>
            Return true if the platform is Windows XP
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin2003Server">
            <summary>
            Return true if the platform is Windows 2003 Server
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsNT6">
            <summary>
            Return true if the platform is NT 6
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsVista">
            <summary>
            Return true if the platform is Vista
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin2008Server">
            <summary>
            Return true if the platform is Windows 2008 Server (original or R2)
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin2008ServerR1">
            <summary>
            Return true if the platform is Windows 2008 Server (original)
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin2008ServerR2">
            <summary>
            Return true if the platform is Windows 2008 Server R2
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWin2012Server">
            <summary>
            Return true if the platform is Windows 2012 Server
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWindows7">
            <summary>
            Return true if the platform is Windows 7
            </summary>
        </member>
        <member name="P:NUnit.Core.OSPlatform.IsWindows8">
            <summary>
            Return true if the platform is Windows 8
            </summary>
        </member>
        <member name="T:NUnit.Core.OSPlatform.ProductType">
            <summary>
            Product Type Enumeration used for Windows
            </summary>
        </member>
        <member name="F:NUnit.Core.OSPlatform.ProductType.Unknown">
            <summary>
            Product type is unknown or unspecified
            </summary>
        </member>
        <member name="F:NUnit.Core.OSPlatform.ProductType.WorkStation">
            <summary>
            Product type is Workstation
            </summary>
        </member>
        <member name="F:NUnit.Core.OSPlatform.ProductType.DomainController">
            <summary>
            Product type is Domain Controller
            </summary>
        </member>
        <member name="F:NUnit.Core.OSPlatform.ProductType.Server">
            <summary>
            Product type is Server
            </summary>
        </member>
        <member name="T:NUnit.Core.PropertyNames">
            <summary>
            The PropertyNames struct lists common property names, which are
            accessed by reflection in the NUnit core. This provides a modicum 
            of type safety as opposed to using the strings directly.
            </summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.ExpectedException">
            <summary>Exception Type expected from a test</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.LegacyExceptionType">
            <summary>Exception Type expected from a test (pre-2.5)</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.ExpectedExceptionName">
            <summary>FullName of the Exception Type expected from a test</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.LegacyExceptionName">
            <summary>FullName of the Exception Type expected from a test (pre-2.5)</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.ExpectedMessage">
            <summary>ExpectedException Message</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.MatchType">
            <summary>ExpectedException MatchType</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.ExpectedResult">
            <summary>Expected return result from test</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.HasExpectedResult">
            <summary>Indicates whether there is an expected return result</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.Description">
            <summary>Description of the test</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.TestName">
            <summary>Alternate test name</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.Arguments">
            <summary>Arguments for the test</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.Ignored">
            <summary>Indicates test case is ignored</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.Explicit">
            <summary>Indicates test case is explicit</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.IgnoreReason">
            <summary>The reason a test case is ignored</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.Properties">
            <summary>Properties of the test</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.Categories">
            <summary>Categories of the test</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.CategoryName">
            <summary>Name of a category</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.Reason">
            <summary>Reason for not running a test</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.IgnoreExcluded">
            <summary>Flag indicating excluded test should be marked as Ignored</summary>
        </member>
        <member name="F:NUnit.Core.PropertyNames.RequiredAddin">
            <summary>Name of an addin that must be present to run a test</summary>
        </member>
        <member name="T:NUnit.Core.ResultState">
            <summary>
            The ResultState enum indicates the result of running a test
            </summary>
        </member>
        <member name="F:NUnit.Core.ResultState.Inconclusive">
            <summary>
            The result is inconclusive
            </summary>
        </member>
        <member name="F:NUnit.Core.ResultState.NotRunnable">
            <summary>
            The test was not runnable.
            </summary>
        </member>
        <member name="F:NUnit.Core.ResultState.Skipped">
            <summary>
            The test has been skipped. 
            </summary>
        </member>
        <member name="F:NUnit.Core.ResultState.Ignored">
            <summary>
            The test has been ignored.
            </summary>
        </member>
        <member name="F:NUnit.Core.ResultState.Success">
            <summary>
            The test succeeded
            </summary>
        </member>
        <member name="F:NUnit.Core.ResultState.Failure">
            <summary>
            The test failed
            </summary>
        </member>
        <member name="F:NUnit.Core.ResultState.Error">
            <summary>
            The test encountered an unexpected exception
            </summary>
        </member>
        <member name="F:NUnit.Core.ResultState.Cancelled">
            <summary>
            The test was cancelled by the user
            </summary>
        </member>
        <member name="T:NUnit.Core.FailureSite">
            <summary>
            The FailureSite enum indicates the stage of a test
            in which an error or failure occured.
            </summary>
        </member>
        <member name="F:NUnit.Core.FailureSite.Test">
            <summary>
            Failure in the test itself
            </summary>
        </member>
        <member name="F:NUnit.Core.FailureSite.SetUp">
            <summary>
            Failure in the SetUp method
            </summary>
        </member>
        <member name="F:NUnit.Core.FailureSite.TearDown">
            <summary>
            Failure in the TearDown method
            </summary>
        </member>
        <member name="F:NUnit.Core.FailureSite.Parent">
            <summary>
            Failure of a parent test
            </summary>
        </member>
        <member name="F:NUnit.Core.FailureSite.Child">
            <summary>
            Failure of a child test
            </summary>
        </member>
        <member name="T:NUnit.Core.RunState">
            <summary>
            The RunState enum indicates whether a test
            can be executed. When used on a TestResult
            it may also indicate whether the test has
            been executed. See individual values for
            restrictions on use.
            </summary>
        </member>
        <member name="F:NUnit.Core.RunState.NotRunnable">
            <summary>
            The test is not runnable.
            </summary>
        </member>
        <member name="F:NUnit.Core.RunState.Runnable">
            <summary>
            The test is runnable. This value would 
            normally not appear on a TestResult, since
            it would change to Executed.
            </summary>
        </member>
        <member name="F:NUnit.Core.RunState.Explicit">
            <summary>
            The test can only be run explicitly. Would
            normally not appear on a TestResult, since
            it would change to Executed or Skipped.
            </summary>
        </member>
        <member name="F:NUnit.Core.RunState.Skipped">
            <summary>
            The test has been skipped. This value may
            appear on a Test when certain attributes
            are used to skip the test.
            </summary>
        </member>
        <member name="F:NUnit.Core.RunState.Ignored">
            <summary>
            The test has been ignored. May appear on
            a Test, when the IgnoreAttribute is used.
            Appears on a TestResult in that case or
            if the test is dynamically ignored.
            </summary>
        </member>
        <member name="T:NUnit.Core.RuntimeType">
            <summary>
            Enumeration identifying a common language 
            runtime implementation.
            </summary>
        </member>
        <member name="F:NUnit.Core.RuntimeType.Any">
            <summary>Any supported runtime framework</summary>
        </member>
        <member name="F:NUnit.Core.RuntimeType.Net">
            <summary>Microsoft .NET Framework</summary>
        </member>
        <member name="F:NUnit.Core.RuntimeType.NetCF">
            <summary>Microsoft .NET Compact Framework</summary>
        </member>
        <member name="F:NUnit.Core.RuntimeType.SSCLI">
            <summary>Microsoft Shared Source CLI</summary>
        </member>
        <member name="F:NUnit.Core.RuntimeType.Mono">
            <summary>Mono</summary>
        </member>
        <member name="T:NUnit.Core.RuntimeFramework">
            <summary>
            RuntimeFramework represents a particular version
            of a common language runtime implementation.
            </summary>
        </member>
        <member name="F:NUnit.Core.RuntimeFramework.DefaultVersion">
            <summary>
            DefaultVersion is an empty Version, used to indicate that
            NUnit should select the CLR version to use for the test.
            </summary>
        </member>
        <member name="M:NUnit.Core.RuntimeFramework.#ctor(NUnit.Core.RuntimeType,System.Version)">
            <summary>
            Construct from a runtime type and version
            </summary>
            <param name="runtime">The runtime type of the framework</param>
            <param name="version">The version of the framework</param>
        </member>
        <member name="M:NUnit.Core.RuntimeFramework.Parse(System.String)">
            <summary>
            Parses a string representing a RuntimeFramework.
            The string may be just a RuntimeType name or just
            a Version or a hyphentated RuntimeType-Version or
            a Version prefixed by 'v'.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.RuntimeFramework.GetBestAvailableFramework(NUnit.Core.RuntimeFramework)">
            <summary>
            Returns the best available framework that matches a target framework.
            If the target framework has a build number specified, then an exact
            match is needed. Otherwise, the matching framework with the highest
            build number is used.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.RuntimeFramework.ToString">
            <summary>
            Overridden to return the short name of the framework
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.RuntimeFramework.Supports(NUnit.Core.RuntimeFramework)">
            <summary>
            Returns true if this framework's supports executing under the 
            requested target framework. The target is supported if
            
            1. The runtime types are the same or either one is RuntimeType.Any
            
            2. All specified (non-negative) components of the CLR version are equal. 
            
            3. The major and minor components of the current framework version are
               greater than or equal to the corresponding target components.
               
            The last provision allows tests requiring .NET 2.0 to run under the
            3.0 and 3.5 platforms as well.
            </summary>
            <param name="target">The RuntimeFramework to be matched.</param>
            <returns>True on match, otherwise false</returns>
        </member>
        <member name="P:NUnit.Core.RuntimeFramework.CurrentFramework">
            <summary>
            Static method to return a RuntimeFramework object
            for the framework that is currently in use.
            </summary>
        </member>
        <member name="P:NUnit.Core.RuntimeFramework.AvailableFrameworks">
            <summary>
            Gets an array of all available frameworks
            </summary>
        </member>
        <member name="P:NUnit.Core.RuntimeFramework.IsAvailable">
            <summary>
            Returns true if the current RuntimeFramework is available.
            In the current implementation, only Mono and Microsoft .NET
            are supported.
            </summary>
            <returns>True if it's available, false if not</returns>
        </member>
        <member name="P:NUnit.Core.RuntimeFramework.Runtime">
            <summary>
            The type of this runtime framework
            </summary>
        </member>
        <member name="P:NUnit.Core.RuntimeFramework.FrameworkVersion">
            <summary>
            The framework version for this runtime framework
            </summary>
        </member>
        <member name="P:NUnit.Core.RuntimeFramework.ClrVersion">
            <summary>
            The CLR version for this runtime framework
            </summary>
        </member>
        <member name="P:NUnit.Core.RuntimeFramework.AllowAnyVersion">
            <summary>
            Return true if any CLR version may be used in
            matching this RuntimeFramework object.
            </summary>
        </member>
        <member name="P:NUnit.Core.RuntimeFramework.DisplayName">
            <summary>
            Returns the Display name for this framework
            </summary>
        </member>
        <member name="T:NUnit.Core.TestAssemblyInfo">
            <summary>
            TestAssemblyInfo holds information about a loaded test assembly
            </summary>
        </member>
        <member name="M:NUnit.Core.TestAssemblyInfo.#ctor(System.String,System.Version,NUnit.Core.RuntimeFramework,System.Collections.IList)">
            <summary>
            Constructs a TestAssemblyInfo
            </summary>
            <param name="assemblyName">The name of the assembly</param>
            <param name="imageRuntimeVersion">The version of the runtime for which the assembly was built</param>
            <param name="runnerRuntimeFramework">The runtime framework under which the assembly is loaded</param>
            <param name="testFrameworks">A list of test framework useds by the assembly</param>
        </member>
        <member name="P:NUnit.Core.TestAssemblyInfo.Name">
            <summary>
            Gets the name of the assembly
            </summary>
        </member>
        <member name="P:NUnit.Core.TestAssemblyInfo.ImageRuntimeVersion">
            <summary>
            Gets the runtime version for which the assembly was built
            </summary>
        </member>
        <member name="P:NUnit.Core.TestAssemblyInfo.RunnerRuntimeFramework">
            <summary>
            Gets the runtime framework under which the assembly is loaded
            </summary>
        </member>
        <member name="P:NUnit.Core.TestAssemblyInfo.RunnerRuntimeVersion">
            <summary>
            Gets the runtime version under which the assembly is loaded
            </summary>
        </member>
        <member name="P:NUnit.Core.TestAssemblyInfo.ProcessId">
            <summary>
            The Id of the process in which the assembly is loaded
            </summary>
        </member>
        <member name="P:NUnit.Core.TestAssemblyInfo.DomainName">
            <summary>
            The friendly name of the AppDomain in which the assembly is loaded
            </summary>
        </member>
        <member name="P:NUnit.Core.TestAssemblyInfo.ApplicationBase">
            <summary>
            The Application Base of the AppDomain in which the assembly is loaded
            </summary>
        </member>
        <member name="P:NUnit.Core.TestAssemblyInfo.PrivateBinPath">
            <summary>
            The PrivateBinPath of the AppDomain in which the assembly is loaded
            </summary>
        </member>
        <member name="P:NUnit.Core.TestAssemblyInfo.ConfigurationFile">
            <summary>
            The ConfigurationFile of the AppDomain in which the assembly is loaded
            </summary>
        </member>
        <member name="P:NUnit.Core.TestAssemblyInfo.ModuleName">
            <summary>
            The name of the main module of the process in which the assembly is loaded 
            </summary>
        </member>
        <member name="P:NUnit.Core.TestAssemblyInfo.TestFrameworks">
            <summary>
            Gets a list of testframeworks referenced by the assembly
            </summary>
        </member>
        <member name="T:NUnit.Core.TestID">
            <summary>
            TestID encapsulates a unique identifier for tests. As
            currently implemented, this is an integer and is unique
            within the AppDomain. TestID is one component of a 
            TestName. We use this object, rather than a raw int,
            for two reasons: (1) to hide the implementation so
            it may be changed later if necessary and (2) so that the
            id may be null in a "weak" TestName.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestID.id">
            <summary>
            The int key that distinguishes this test from all others created
            by the same runner.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestID.nextID">
            <summary>
            Static value to seed ids. It's started at 1000 so any
            uninitialized ids will stand out.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestID.#ctor">
            <summary>
            Construct a new TestID
            </summary>
        </member>
        <member name="M:NUnit.Core.TestID.#ctor(System.Int32)">
            <summary>
            Construct a TestID with a given value.
            Used in parsing test names and in order
            to construct an artificial test node for
            aggregating multiple test runners.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:NUnit.Core.TestID.Parse(System.String)">
            <summary>
            Parse a TestID from it's string representation
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.TestID.Equals(System.Object)">
            <summary>
            Override of Equals method to allow comparison of TestIDs
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.TestID.GetHashCode">
            <summary>
            Override of GetHashCode for TestIDs
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.TestID.ToString">
            <summary>
            Override ToString() to display the int id
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.TestID.op_Equality(NUnit.Core.TestID,NUnit.Core.TestID)">
            <summary>
            Operator == override
            </summary>
            <param name="id1"></param>
            <param name="id2"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.TestID.op_Inequality(NUnit.Core.TestID,NUnit.Core.TestID)">
            <summary>
            Operator != override
            </summary>
            <param name="id1"></param>
            <param name="id2"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.TestID.Clone">
            <summary>
            Clone this TestID
            </summary>
            <returns>An identical TestID</returns>
        </member>
        <member name="T:NUnit.Core.TestInfo">
            <summary>
            TestInfo holds common info about a test. It represents only
            a single test or a suite and contains no references to other
            tests. Since it is informational only, it can easily be passed
            around using .Net remoting.
            
            TestInfo is used directly in all EventListener events and in
            TestResults. It contains an ID, which can be used by a 
            runner to locate the actual test.
            
            TestInfo also serves as the base class for TestNode, which
            adds hierarchical information and is used in client code to
            maintain a visible image of the structure of the tests.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestInfo.testName">
            <summary>
            TestName that identifies this test
            </summary>
        </member>
        <member name="F:NUnit.Core.TestInfo.ignoreReason">
            <summary>
            Reason for not running the test
            </summary>
        </member>
        <member name="F:NUnit.Core.TestInfo.testCaseCount">
            <summary>
            Number of test cases in this test or suite
            </summary>
        </member>
        <member name="F:NUnit.Core.TestInfo.isSuite">
            <summary>
            True if this is a suite
            </summary>
        </member>
        <member name="F:NUnit.Core.TestInfo.description">
            <summary>
            The test description
            </summary>
        </member>
        <member name="F:NUnit.Core.TestInfo.categories">
            <summary>
            A list of all the categories assigned to a test
            </summary>
        </member>
        <member name="F:NUnit.Core.TestInfo.properties">
            <summary>
            A dictionary of properties, used to add information
            to tests without requiring the class to change.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestInfo.#ctor(NUnit.Core.ITest)">
            <summary>
            Construct from an ITest
            </summary>
            <param name="test">Test from which a TestNode is to be constructed</param>
        </member>
        <member name="M:NUnit.Core.TestInfo.#ctor(NUnit.Core.TestName,NUnit.Core.ITest[])">
            <summary>
            Construct as a parent to multiple tests.
            </summary>
            <param name="testName">The name to use for the new test</param>
            <param name="tests">An array of child tests</param>
        </member>
        <member name="M:NUnit.Core.TestInfo.#ctor(NUnit.Core.TestName)">
            <summary>
            Construct given a test name
            </summary>
            <param name="testName">The TestName for the new test</param>
        </member>
        <member name="M:NUnit.Core.TestInfo.CountTestCases(NUnit.Core.ITestFilter)">
            <summary>
            Counts the test cases that would be run if this
            test were executed using the provided filter.
            </summary>
            <param name="filter">The filter to apply</param>
            <returns>A count of test cases</returns>
        </member>
        <member name="P:NUnit.Core.TestInfo.TestName">
            <summary>
            Gets the completely specified name of the test
            encapsulated in a TestName object.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestInfo.TestType">
            <summary>
            Gets a string representing the kind of test this
            object represents for display purposes.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestInfo.Description">
            <summary>
            The test description 
            </summary>
        </member>
        <member name="P:NUnit.Core.TestInfo.RunState">
            <summary>
            Gets the RunState for this test
            </summary>
        </member>
        <member name="P:NUnit.Core.TestInfo.IgnoreReason">
            <summary>
            The reason for ignoring a test
            </summary>
        </member>
        <member name="P:NUnit.Core.TestInfo.TestCount">
            <summary>
            Count of test cases in this test.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestInfo.Parent">
            <summary>
             Gets the parent test of this test
            </summary>
        </member>
        <member name="P:NUnit.Core.TestInfo.Categories">
            <summary>
            Gets a list of the categories applied to this test
            </summary>
        </member>
        <member name="P:NUnit.Core.TestInfo.Tests">
            <summary>
            Gets a list of any child tests
            </summary>
        </member>
        <member name="P:NUnit.Core.TestInfo.IsSuite">
            <summary>
            True if this is a suite, false if a test case
            </summary>
        </member>
        <member name="P:NUnit.Core.TestInfo.Properties">
            <summary>
            Gets the Properties dictionary for this test
            </summary>
        </member>
        <member name="T:NUnit.Core.TestName">
            <summary>
            TestName encapsulates all info needed to identify and
            locate a test that has been loaded by a runner. It consists
            of a three components: the simple name of the test, an int
            id that is unique to a given tree of tests and an int 
            runner id that identifies the particular runner that
            holds the test instance.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestName.testID">
            <summary>
            ID that uniquely identifies the test
            </summary>
        </member>
        <member name="F:NUnit.Core.TestName.name">
            <summary>
            The simple name of the test, without qualification
            </summary>
        </member>
        <member name="F:NUnit.Core.TestName.fullName">
            <summary>
            The fully qualified name of the test
            </summary>
        </member>
        <member name="M:NUnit.Core.TestName.Parse(System.String)">
            <summary>
            Parse a string representation of a TestName,
            returning a TestName.
            </summary>
            <param name="s">The string to parse</param>
            <returns>A TestName</returns>
        </member>
        <member name="M:NUnit.Core.TestName.Equals(System.Object)">
            <summary>
            Compares two TestNames for equality
            </summary>
            <param name="obj">the other TestID</param>
            <returns>True if the two TestIDs are equal</returns>
        </member>
        <member name="M:NUnit.Core.TestName.GetHashCode">
            <summary>
            Calculates a hashcode for this TestID
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:NUnit.Core.TestName.ToString">
            <summary>
            Override ToString() to display the UniqueName
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.TestName.op_Equality(NUnit.Core.TestName,NUnit.Core.TestName)">
            <summary>
            Override the == operator
            </summary>
            <param name="name1"></param>
            <param name="name2"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.TestName.op_Inequality(NUnit.Core.TestName,NUnit.Core.TestName)">
            <summary>
            Override the != operator
            </summary>
            <param name="name1"></param>
            <param name="name2"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.TestName.Clone">
            <summary>
            Returns a duplicate of this TestName
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Core.TestName.TestID">
            <summary>
            Gets or sets the TestID that uniquely identifies this test
            </summary>
        </member>
        <member name="P:NUnit.Core.TestName.RunnerID">
            <summary>
            Gets the ID for the runner that created the test from
            the TestID, or returns -1 if the TestID is null.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestName.Name">
            <summary>
            Gets or sets the simple name of the test
            </summary>
        </member>
        <member name="P:NUnit.Core.TestName.FullName">
            <summary>
            Gets or sets the full (qualified) name of the test
            </summary>
        </member>
        <member name="P:NUnit.Core.TestName.UniqueName">
            <summary>
            Get the string representation of this test name, incorporating all
            the components of the name.
            </summary>
        </member>
        <member name="T:NUnit.Core.TestNode">
            <summary>
            TestNode represents a single test or suite in the test hierarchy.
            TestNode holds common info needed about a test and represents a
            single node - either a test or a suite - in the hierarchy of tests.
            
            TestNode extends TestInfo, which holds all the information with
            the exception of the list of child classes. When constructed from
            a Test, TestNodes are always fully populated with child TestNodes.
            
            Like TestInfo, TestNode is purely a data class, and is not able
            to execute tests.
            
            </summary>
        </member>
        <member name="F:NUnit.Core.TestNode.tests">
            <summary>
            For a test suite, the child tests or suites
            Null if this is not a test suite
            </summary>
        </member>
        <member name="M:NUnit.Core.TestNode.#ctor(NUnit.Core.ITest)">
            <summary>
            Construct from an ITest
            </summary>
            <param name="test">Test from which a TestNode is to be constructed</param>
        </member>
        <member name="M:NUnit.Core.TestNode.#ctor(NUnit.Core.TestName,NUnit.Core.ITest[])">
            <summary>
            Construct a TestNode given a TestName and an
            array of child tests.
            </summary>
            <param name="testName">The TestName of the new test</param>
            <param name="tests">An array of tests to be added as children of the new test</param>
        </member>
        <member name="P:NUnit.Core.TestNode.Parent">
            <summary>
            Gets the parent test of the current test
            </summary>
        </member>
        <member name="P:NUnit.Core.TestNode.Tests">
            <summary>
            Array of child tests, null if this is a test case.
            </summary>
        </member>
        <member name="T:NUnit.Core.TestOutput">
            <summary>
            The TestOutput class holds a unit of output from 
            a test to either stdOut or stdErr
            </summary>
        </member>
        <member name="M:NUnit.Core.TestOutput.#ctor(System.String,NUnit.Core.TestOutputType)">
            <summary>
            Construct with text and an ouput destination type
            </summary>
            <param name="text">Text to be output</param>
            <param name="type">Destination of output</param>
        </member>
        <member name="M:NUnit.Core.TestOutput.ToString">
            <summary>
            Return string representation of the object for debugging
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Core.TestOutput.Text">
            <summary>
            Get the text 
            </summary>
        </member>
        <member name="P:NUnit.Core.TestOutput.Type">
            <summary>
            Get the output type
            </summary>
        </member>
        <member name="T:NUnit.Core.TestOutputType">
            <summary>
            Enum representing the output destination
            It uses combinable flags so that a given
            output control can accept multiple types
            of output. Normally, each individual
            output uses a single flag value.
            </summary>
        </member>
        <member name="F:NUnit.Core.TestOutputType.Out">
            <summary>
            Send output to stdOut
            </summary>
        </member>
        <member name="F:NUnit.Core.TestOutputType.Error">
            <summary>
            Send output to stdErr
            </summary>
        </member>
        <member name="F:NUnit.Core.TestOutputType.Trace">
            <summary>
            Send output to Trace
            </summary>
        </member>
        <member name="F:NUnit.Core.TestOutputType.Log">
            <summary>
            Send output to Log
            </summary>
        </member>
        <member name="T:NUnit.Core.ProcessModel">
            <summary>
            Represents the manner in which test assemblies are
            distributed across processes.
            </summary>
        </member>
        <member name="F:NUnit.Core.ProcessModel.Default">
            <summary>
            Use the default setting, depending on the runner
            and the nature of the tests to be loaded.
            </summary>
        </member>
        <member name="F:NUnit.Core.ProcessModel.Single">
            <summary>
            Run tests directly in the NUnit process
            </summary>
        </member>
        <member name="F:NUnit.Core.ProcessModel.Separate">
            <summary>
            Run tests in a single separate process
            </summary>
        </member>
        <member name="F:NUnit.Core.ProcessModel.Multiple">
            <summary>
            Run tests in a separate process per assembly
            </summary>
        </member>
        <member name="T:NUnit.Core.DomainUsage">
            <summary>
            Represents the manner in which test assemblies use
            AppDomains to provide isolation
            </summary>
        </member>
        <member name="F:NUnit.Core.DomainUsage.Default">
            <summary>
            Use the default setting, depending on the runner
            and the nature of the tests to be loaded.
            </summary>
        </member>
        <member name="F:NUnit.Core.DomainUsage.None">
            <summary>
            Don't create a test domain - run in the primary AppDomain
            </summary>
        </member>
        <member name="F:NUnit.Core.DomainUsage.Single">
            <summary>
            Run tests in a single separate test domain
            </summary>
        </member>
        <member name="F:NUnit.Core.DomainUsage.Multiple">
            <summary>
            Run tests in a separate domain per assembly
            </summary>
        </member>
        <member name="T:NUnit.Core.TestPackage">
            <summary>
            TestPackage holds information about a set of tests to
            be loaded by a TestRunner. It may represent a single
            assembly or a set of assemblies. It supports selection
            of a single test fixture for loading.
            </summary>
        </member>
        <member name="M:NUnit.Core.TestPackage.#ctor(System.String)">
            <summary>
            Construct a package, specifying the name of the package.
            If the package name is an assembly file type (dll or exe)
            then the resulting package represents a single assembly.
            Otherwise it is a container for multiple assemblies.
            </summary>
            <param name="name">The name of the package</param>
        </member>
        <member name="M:NUnit.Core.TestPackage.#ctor(System.String,System.Collections.IList)">
            <summary>
            Construct a package, specifying the name to be used
            and a list of assemblies.
            </summary>
            <param name="name">The package name, used to name the top-level test node</param>
            <param name="assemblies">The list of assemblies comprising the package</param>
        </member>
        <member name="M:NUnit.Core.TestPackage.GetSetting(System.String,System.Object)">
            <summary>
            Return the value of a setting or a default.
            </summary>
            <param name="name">The name of the setting</param>
            <param name="defaultSetting">The default value</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.TestPackage.GetSetting(System.String,System.String)">
            <summary>
            Return the value of a string setting or a default.
            </summary>
            <param name="name">The name of the setting</param>
            <param name="defaultSetting">The default value</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.TestPackage.GetSetting(System.String,System.Boolean)">
            <summary>
            Return the value of a bool setting or a default.
            </summary>
            <param name="name">The name of the setting</param>
            <param name="defaultSetting">The default value</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.TestPackage.GetSetting(System.String,System.Int32)">
            <summary>
            Return the value of an int setting or a default.
            </summary>
            <param name="name">The name of the setting</param>
            <param name="defaultSetting">The default value</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Core.TestPackage.GetSetting(System.String,System.Enum)">
            <summary>
            Return the value of a enum setting or a default.
            </summary>
            <param name="name">The name of the setting</param>
            <param name="defaultSetting">The default value</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Core.TestPackage.Name">
            <summary>
            Gets the name of the package
            </summary>
        </member>
        <member name="P:NUnit.Core.TestPackage.FullName">
            <summary>
            Gets the full name of the package, which is usually
            the path to the NUnit project used to create the it
            </summary>
        </member>
        <member name="P:NUnit.Core.TestPackage.BasePath">
            <summary>
            The BasePath to be used in loading the assemblies
            </summary>
        </member>
        <member name="P:NUnit.Core.TestPackage.ConfigurationFile">
            <summary>
            The configuration file to be used
            </summary>
        </member>
        <member name="P:NUnit.Core.TestPackage.PrivateBinPath">
            <summary>
            Addditional directories to be probed when loading assemblies
            </summary>
        </member>
        <member name="P:NUnit.Core.TestPackage.AutoBinPath">
            <summary>
            Indicates whether the probing path should be generated
            automatically based on the list of assemblies.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestPackage.Assemblies">
            <summary>
            Assemblies to be loaded. At least one must be specified.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestPackage.IsSingleAssembly">
            <summary>
            Return true if the package represents a single assembly.
            No root node is displayed in that case.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestPackage.TestName">
            <summary>
            Fully qualified name of test to be loaded. If not 
            specified, all the tests in the assemblies are loaded.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestPackage.Settings">
            <summary>
            Gets the dictionary of settings for this TestPackage
            </summary>
        </member>
        <member name="T:NUnit.Core.TestResult">
            <summary>
            The TestResult class represents
            the result of a test and is used to
            communicate results across AppDomains.
            </summary>
            
        </member>
        <member name="F:NUnit.Core.TestResult.resultState">
            <summary>
            Indicates the result of the test
            </summary>
        </member>
        <member name="F:NUnit.Core.TestResult.failureSite">
            <summary>
            Indicates the location of a failure
            </summary>
        </member>
        <member name="F:NUnit.Core.TestResult.time">
            <summary>
            The elapsed time for executing this test
            </summary>
        </member>
        <member name="F:NUnit.Core.TestResult.test">
            <summary>
            The test that this result pertains to
            </summary>
        </member>
        <member name="F:NUnit.Core.TestResult.stackTrace">
            <summary>
            The stacktrace at the point of failure
            </summary>
        </member>
        <member name="F:NUnit.Core.TestResult.message">
            <summary>
            Message giving the reason for failure
            </summary>
        </member>
        <member name="F:NUnit.Core.TestResult.results">
            <summary>
            List of child results
            </summary>
        </member>
        <member name="F:NUnit.Core.TestResult.assertCount">
            <summary>
            Number of asserts executed by this test
            </summary>
        </member>
        <member name="M:NUnit.Core.TestResult.#ctor(NUnit.Core.TestInfo)">
            <summary>
            Construct a test result given a TestInfo
            </summary>
            <param name="test">The test to be used</param>
        </member>
        <member name="M:NUnit.Core.TestResult.#ctor(NUnit.Core.ITest)">
            <summary>
            Construct a TestResult given an ITest
            </summary>
            <param name="test"></param>
        </member>
        <member name="M:NUnit.Core.TestResult.#ctor(NUnit.Core.TestName)">
            <summary>
            Construct a TestResult given a TestName
            </summary>
            <param name="testName">A TestName</param>
        </member>
        <member name="M:NUnit.Core.TestResult.Success">
            <summary>
            Mark the test as succeeding
            </summary>
        </member>
        <member name="M:NUnit.Core.TestResult.Success(System.String)">
            <summary>
            Mark the test as succeeding and set a message
            </summary>
        </member>
        <member name="M:NUnit.Core.TestResult.Ignore(System.String)">
            <summary>
            Mark the test as ignored.
            </summary>
            <param name="reason">The reason the test was not run</param>
        </member>
        <member name="M:NUnit.Core.TestResult.Ignore(System.Exception)">
            <summary>
            Mark the test as ignored.
            </summary>
            <param name="ex">The ignore exception that was thrown</param>
        </member>
        <member name="M:NUnit.Core.TestResult.Ignore(System.String,System.String)">
            <summary>
            Mark the test as ignored.
            </summary>
            <param name="reason">The reason the test was not run</param>
            <param name="stackTrace">Stack trace giving the location of the command</param>
        </member>
        <member name="M:NUnit.Core.TestResult.Skip(System.String)">
            <summary>
            Mark the test as skipped.
            </summary>
            <param name="reason">The reason the test was not run</param>
        </member>
        <member name="M:NUnit.Core.TestResult.Invalid(System.String)">
            <summary>
            Mark the test a not runnable with a reason
            </summary>
            <param name="reason">The reason the test is invalid</param>
        </member>
        <member name="M:NUnit.Core.TestResult.Invalid(System.Exception)">
            <summary>
            Mark the test as not runnable due to a builder exception
            </summary>
            <param name="ex">The exception thrown by the builder or an addin</param>
        </member>
        <member name="M:NUnit.Core.TestResult.SetResult(NUnit.Core.ResultState,System.String,System.String,NUnit.Core.FailureSite)">
            <summary>
            Set the result of the test
            </summary>
            <param name="resultState">The ResultState to use in the result</param>
            <param name="reason">The reason the test was not run</param>
            <param name="stackTrace">Stack trace giving the location of the command</param>
            <param name="failureSite">The location of the failure, if any</param>
        </member>
        <member name="M:NUnit.Core.TestResult.SetResult(NUnit.Core.ResultState,System.String,System.String)">
            <summary>
            Set the result of the test
            </summary>
            <param name="resultState">The ResultState to use in the result</param>
            <param name="reason">The reason the test was not run</param>
            <param name="stackTrace">Stack trace giving the location of the command</param>
        </member>
        <member name="M:NUnit.Core.TestResult.SetResult(NUnit.Core.ResultState,System.Exception,NUnit.Core.FailureSite)">
            <summary>
            Set the result of the test.
            </summary>
            <param name="resultState">The ResultState to use in the result</param>
            <param name="ex">The exception that caused this result</param>
            <param name="failureSite">The site at which an error or failure occured</param>
        </member>
        <member name="M:NUnit.Core.TestResult.Failure(System.String,System.String)">
            <summary>
            Mark the test as a failure due to an
            assertion having failed.
            </summary>
            <param name="message">Message to display</param>
            <param name="stackTrace">Stack trace giving the location of the failure</param>
        </member>
        <member name="M:NUnit.Core.TestResult.Failure(System.String,System.String,NUnit.Core.FailureSite)">
            <summary>
            Mark the test as a failure due to an
            assertion having failed.
            </summary>
            <param name="message">Message to display</param>
            <param name="stackTrace">Stack trace giving the location of the failure</param>
            <param name="failureSite">The site of the failure</param>
        </member>
        <member name="M:NUnit.Core.TestResult.Error(System.Exception)">
            <summary>
            Marks the result as an error due to an exception thrown
            by the test.
            </summary>
            <param name="exception">The exception that was caught</param>
        </member>
        <member name="M:NUnit.Core.TestResult.Error(System.Exception,NUnit.Core.FailureSite)">
            <summary>
            Marks the result as an error due to an exception thrown
            from the indicated FailureSite.
            </summary>
            <param name="exception">The exception that was caught</param>
            <param name="failureSite">The site from which it was thrown</param>
        </member>
        <member name="M:NUnit.Core.TestResult.AddResult(NUnit.Core.TestResult)">
            <summary>
            Add a child result
            </summary>
            <param name="result">The child result to be added</param>
        </member>
        <member name="P:NUnit.Core.TestResult.ResultState">
            <summary>
            Gets the ResultState of the test result, which 
            indicates the success or failure of the test.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.FailureSite">
            <summary>
            Gets the stage of the test in which a failure
            or error occured.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.Executed">
            <summary>
            Indicates whether the test executed
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.Name">
            <summary>
            Gets the name of the test result
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.FullName">
            <summary>
            Gets the full name of the test result
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.Test">
            <summary>
            Gets the test associated with this result
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.IsSuccess">
            <summary>
            Indicates whether the test ran successfully
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.IsFailure">
            <summary>
            Indicates whether the test failed
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.IsError">
            <summary>
            Indicates whether the test had an error (as opposed to a failure)
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.Description">
            <summary>
            Gets a description associated with the test
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.Time">
            <summary>
            Gets the elapsed time for running the test
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.Message">
            <summary>
            Gets the message associated with a test
            failure or with not running the test
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.StackTrace">
            <summary>
            Gets any stacktrace associated with an
            error or failure.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.AssertCount">
            <summary>
            Gets or sets the count of asserts executed
            when running the test.
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.HasResults">
            <summary>
            Return true if this result has any child results
            </summary>
        </member>
        <member name="P:NUnit.Core.TestResult.Results">
            <summary>
            Gets a list of the child results of this TestResult
            </summary>
        </member>
        <member name="T:NUnit.ConsoleRunner.ConsoleUi">
            <summary>
            Summary description for ConsoleUi.
            </summary>
        </member>
        <member name="T:NUnit.ConsoleRunner.EventCollector">
            <summary>
            Summary description for EventCollector.
            </summary>
        </member>
        <member name="T:NUnit.ConsoleRunner.Runner">
            <summary>
            Summary description for Runner.
            </summary>
        </member>
        <member name="T:NUnit.ConsoleRunner.TestNameParser">
            <summary>
            TestNameParser is used to parse the arguments to the 
            -run option, separating testnames at the correct point.
            </summary>
        </member>
        <member name="M:NUnit.ConsoleRunner.TestNameParser.Parse(System.String)">
            <summary>
            Parse the -run argument and return an array of argument
            </summary>
            <param name="argument">argument</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Util.Extensibility.IProjectConverter">
            <summary>
            The IProjectConverter interface is implemented by any class
            that knows how to convert a foreign project format to an
            NUnitProject.
            </summary>
        </member>
        <member name="M:NUnit.Util.Extensibility.IProjectConverter.CanConvertFrom(System.String)">
            <summary>
            Returns true if the file indicated is one that this
            converter knows how to convert.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Util.Extensibility.IProjectConverter.ConvertFrom(System.String)">
            <summary>
            Converts an external project returning an NUnitProject
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Util.Extensibility.ProjectConverterCollection">
            <summary>
            Summary description for ProjectConverterCollection.
            </summary>
        </member>
        <member name="M:NUnit.Util.IRuntimeFrameworkSelector.SelectRuntimeFramework(NUnit.Core.TestPackage)">
            <summary>
            Selects a target runtime framework for a TestPackage based on
            the settings in the package and the assemblies themselves.
            The package RuntimeFramework setting may be updated as a 
            result and the selected runtime is returned.
            </summary>
            <param name="package">A TestPackage</param>
            <returns>The selected RuntimeFramework</returns>
        </member>
        <member name="T:NUnit.Util.ISettings">
            <summary>
            The ISettings interface is used to access all user
            settings and options.
            </summary>
        </member>
        <member name="M:NUnit.Util.ISettings.GetSetting(System.String)">
            <summary>
            Load a setting from the storage.
            </summary>
            <param name="settingName">Name of the setting to load</param>
            <returns>Value of the setting or null</returns>
        </member>
        <member name="M:NUnit.Util.ISettings.GetSetting(System.String,System.Object)">
            <summary>
            Load a setting from the storage or return a default value
            </summary>
            <param name="settingName">Name of the setting to load</param>
            <param name="settingName">Value to return if the setting is missing</param>
            <returns>Value of the setting or the default value</returns>
        </member>
        <member name="M:NUnit.Util.ISettings.GetSetting(System.String,System.Int32)">
            <summary>
            Load an integer setting from the storage or return a default value
            </summary>
            <param name="settingName">Name of the setting to load</param>
            <param name="defaultValue">Value to return if the setting is missing</param>
            <returns>Value of the setting or the default value</returns>
        </member>
        <member name="M:NUnit.Util.ISettings.GetSetting(System.String,System.Single)">
            <summary>
            Load a float setting from the storage or return a default value
            </summary>
            <param name="settingName">Name of the setting to load</param>
            <param name="defaultValue">Value to return if the setting is missing</param>
            <returns>Value of the setting or the default value</returns>
        </member>
        <member name="M:NUnit.Util.ISettings.GetSetting(System.String,System.Boolean)">
            <summary>
            Load a boolean setting or return a default value
            </summary>
            <param name="settingName">Name of setting to load</param>
            <param name="defaultValue">Value to return if the setting is missing</param>
            <returns>Value of the setting or the default value</returns>
        </member>
        <member name="M:NUnit.Util.ISettings.GetSetting(System.String,System.String)">
            <summary>
            Load a string setting from the storage or return a default value
            </summary>
            <param name="settingName">Name of the setting to load</param>
            <param name="defaultValue">Value to return if the setting is missing</param>
            <returns>Value of the setting or the default value</returns>
        </member>
        <member name="M:NUnit.Util.ISettings.GetSetting(System.String,System.Enum)">
            <summary>
            Load an enum setting from the storage or return a default value
            </summary>
            <param name="settingName">Name of the setting to load</param>
            <param name="defaultValue">Value to return if the setting is missing</param>
            <returns>Value of the setting or the default value</returns>
        </member>
        <member name="M:NUnit.Util.ISettings.GetSetting(System.String,System.Drawing.Font)">
            <summary>
            Load a Font setting from the storage or return a default value
            </summary>
            <param name="settingName">Name of the setting to load</param>
            <param name="defaultFont">Value to return if the setting is missing</param>
            <returns>Value of the setting or the default value</returns>
        </member>
        <member name="M:NUnit.Util.ISettings.RemoveSetting(System.String)">
            <summary>
            Remove a setting from the storage
            </summary>
            <param name="settingName">Name of the setting to remove</param>
        </member>
        <member name="M:NUnit.Util.ISettings.RemoveGroup(System.String)">
            <summary>
            Remove an entire group of settings from the storage
            </summary>
            <param name="groupName">Name of the group to remove</param>
        </member>
        <member name="M:NUnit.Util.ISettings.SaveSetting(System.String,System.Object)">
            <summary>
            Save a setting in the storage
            </summary>
            <param name="settingName">Name of the setting to save</param>
            <param name="settingValue">Value to be saved</param>
        </member>
        <member name="T:NUnit.Util.ITestEvents">
            <summary>
            ITestEvents interface defines events related to loading
            and unloading of test projects and loading, unloading and
            running tests.
            </summary>
        </member>
        <member name="E:NUnit.Util.ITestEvents.TestException">
            <summary>
            An unhandled exception was thrown during a test run,
            and it cannot be associated with a particular test failure.
            </summary>
        </member>
        <member name="E:NUnit.Util.ITestEvents.TestOutput">
            <summary>
            Console Out/Error
            </summary>
        </member>
        <member name="T:NUnit.Util.ITestLoader">
            <summary>
            The ITestLoader interface supports the loading and running
            of tests in a remote domain.
            </summary>
        </member>
        <member name="T:NUnit.Util.ITestRunnerFactory">
            <summary>
            A Test Runner factory can supply a suitable test runner for a given package
            </summary>
        </member>
        <member name="M:NUnit.Util.ITestRunnerFactory.MakeTestRunner(NUnit.Core.TestPackage)">
            <summary>
            Return a suitable runner for the package provided as an argument
            </summary>
            <param name="package">The test package to be loaded by the runner</param>
            <returns>A TestRunner</returns>
        </member>
        <member name="M:NUnit.Util.ITestRunnerFactory.CanReuse(NUnit.Core.TestRunner,NUnit.Core.TestPackage)">
            <summary>
            Return true if the provided runner is suitable for reuse in loading
            the test package provided. Otherwise, return false.
            </summary>
            <param name="package"></param>
            <param name="runner"></param>
            <returns>True if the runner may be reused</returns>
        </member>
        <member name="T:NUnit.Util.ProjectConverters.VisualStudioConverter">
            <summary>
            Summary description for VSProjectLoader.
            </summary>
        </member>
        <member name="T:NUnit.Util.AddinRegistry">
            <summary>
            Summary description for AddinRegistry.
            </summary>
        </member>
        <member name="T:NUnit.Util.DomainManager">
            <summary>
            The DomainManager class handles the creation and unloading
            of domains as needed and keeps track of all existing domains.
            </summary>
        </member>
        <member name="M:NUnit.Util.DomainManager.CreateDomain(NUnit.Core.TestPackage)">
            <summary>
            Construct an application domain for running a test package
            </summary>
            <param name="package">The TestPackage to be run</param>
        </member>
        <member name="M:NUnit.Util.DomainManager.GetCachePath">
            <summary>
            Get the location for caching and delete any old cache info
            </summary>
        </member>
        <member name="M:NUnit.Util.DomainManager.DeleteCacheDir(System.IO.DirectoryInfo)">
            <summary>
            Helper method to delete the cache dir. This method deals 
            with a bug that occurs when files are marked read-only
            and deletes each file separately in order to give better 
            exception information when problems occur.
            
            TODO: This entire method is problematic. Should we be doing it?
            </summary>
            <param name="cacheDir"></param>
        </member>
        <member name="T:NUnit.Util.ProjectService">
            <summary>
            Summary description for ProjectService.
            </summary>
        </member>
        <member name="F:NUnit.Util.ProjectService.projectSeed">
            <summary>
            Seed used to generate names for new projects
            </summary>
        </member>
        <member name="F:NUnit.Util.ProjectService.converters">
            <summary>
            Array of all installed ProjectConverters
            </summary>
        </member>
        <member name="M:NUnit.Util.ProjectService.WrapAssemblies(System.String[])">
            <summary>
            Creates a project to wrap a list of assemblies
            </summary>
        </member>
        <member name="M:NUnit.Util.ProjectService.WrapAssembly(System.String)">
            <summary>
            Creates a project to wrap an assembly
            </summary>
        </member>
        <member name="T:NUnit.Util.RecentFilesService">
            <summary>
            Summary description for RecentFilesService.
            </summary>
        </member>
        <member name="T:NUnit.Util.RecentFiles">
            <summary>
            The RecentFiles interface is used to isolate the app
            from various implementations of recent files.
            </summary>
        </member>
        <member name="M:NUnit.Util.RecentFiles.SetMostRecent(NUnit.Util.RecentFileEntry)">
            <summary>
            Set the most recent file entry, reordering
            the saved names as needed and removing the oldest
            if the max number of files would be exceeded.
            </summary>
        </member>
        <member name="M:NUnit.Util.RecentFiles.SetMostRecent(System.String)">
            <summary>
            Set the most recent file name, reordering
            the saved names as needed and removing the oldest
            if the max number of files would be exceeded.
            The current CLR version is used to create the entry.
            </summary>
        </member>
        <member name="M:NUnit.Util.RecentFiles.Remove(System.String)">
            <summary>
            Remove a file from the list
            </summary>
            <param name="fileName">The name of the file to remove</param>
        </member>
        <member name="P:NUnit.Util.RecentFiles.MaxFiles">
            <summary>
            The max number of files saved
            </summary>
        </member>
        <member name="P:NUnit.Util.RecentFiles.Count">
            <summary>
            The current number of saved files
            </summary>
        </member>
        <member name="P:NUnit.Util.RecentFiles.Entries">
            <summary>
            Get a list of all the file entries
            </summary>
            <returns>The most recent file list</returns>
        </member>
        <member name="T:NUnit.Util.ServiceManager">
            <summary>
            Summary description for ServiceManger.
            </summary>
        </member>
        <member name="T:NUnit.Util.SettingsService">
            <summary>
            Summary description for UserSettingsService.
            </summary>
        </member>
        <member name="T:NUnit.Util.SettingsGroup">
            <summary>
            SettingsGroup is the base class representing a group
            of user or system settings. All storge of settings
            is delegated to a SettingsStorage.
            </summary>
        </member>
        <member name="M:NUnit.Util.SettingsGroup.#ctor(NUnit.Util.ISettingsStorage)">
            <summary>
            Construct a settings group.
            </summary>
            <param name="storage">Storage for the group settings</param>
        </member>
        <member name="M:NUnit.Util.SettingsGroup.#ctor">
            <summary>
            Protected constructor for use by derived classes that
            set the storage themselves or don't use a storage.
            </summary>
        </member>
        <member name="M:NUnit.Util.SettingsGroup.GetSetting(System.String)">
            <summary>
            Load the value of one of the group's settings
            </summary>
            <param name="settingName">Name of setting to load</param>
            <returns>Value of the setting or null</returns>
        </member>
        <member name="M:NUnit.Util.SettingsGroup.GetSetting(System.String,System.Object)">
            <summary>
            Load the value of one of the group's settings or return a default value
            </summary>
            <param name="settingName">Name of setting to load</param>
            <param name="defaultValue">Value to return if the seeting is not present</param>
            <returns>Value of the setting or the default</returns>
        </member>
        <member name="M:NUnit.Util.SettingsGroup.GetSetting(System.String,System.Int32)">
            <summary>
            Load the value of one of the group's integer settings
            in a type-safe manner or return a default value
            </summary>
            <param name="settingName">Name of setting to load</param>
            <param name="defaultValue">Value to return if the seeting is not present</param>
            <returns>Value of the setting or the default</returns>
        </member>
        <member name="M:NUnit.Util.SettingsGroup.GetSetting(System.String,System.Single)">
            <summary>
            Load the value of one of the group's float settings
            in a type-safe manner or return a default value
            </summary>
            <param name="settingName">Name of setting to load</param>
            <param name="defaultValue">Value to return if the setting is not present</param>
            <returns>Value of the setting or the default</returns>
        </member>
        <member name="M:NUnit.Util.SettingsGroup.GetSetting(System.String,System.Boolean)">
            <summary>
            Load the value of one of the group's boolean settings
            in a type-safe manner.
            </summary>
            <param name="settingName">Name of setting to load</param>
            <param name="defaultValue">Value of the setting or the default</param>
            <returns>Value of the setting</returns>
        </member>
        <member name="M:NUnit.Util.SettingsGroup.GetSetting(System.String,System.String)">
            <summary>
            Load the value of one of the group's string settings
            in a type-safe manner or return a default value
            </summary>
            <param name="settingName">Name of setting to load</param>
            <param name="defaultValue">Value to return if the setting is not present</param>
            <returns>Value of the setting or the default</returns>
        </member>
        <member name="M:NUnit.Util.SettingsGroup.GetSetting(System.String,System.Enum)">
            <summary>
            Load the value of one of the group's enum settings
            in a type-safe manner or return a default value
            </summary>
            <param name="settingName">Name of setting to load</param>
            <param name="defaultValue">Value to return if the setting is not present</param>
            <returns>Value of the setting or the default</returns>
        </member>
        <member name="M:NUnit.Util.SettingsGroup.GetSetting(System.String,System.Drawing.Font)">
            <summary>
            Load the value of one of the group's Font settings
            in a type-safe manner or return a default value
            </summary>
            <param name="settingName">Name of setting to load</param>
            <param name="defaultFont">Value to return if the setting is not present</param>
            <returns>Value of the setting or the default</returns>
        </member>
        <member name="M:NUnit.Util.SettingsGroup.RemoveSetting(System.String)">
            <summary>
            Remove a setting from the group
            </summary>
            <param name="settingName">Name of the setting to remove</param>
        </member>
        <member name="M:NUnit.Util.SettingsGroup.RemoveGroup(System.String)">
            <summary>
            Remove a group of settings
            </summary>
            <param name="GroupName"></param>
        </member>
        <member name="M:NUnit.Util.SettingsGroup.SaveSetting(System.String,System.Object)">
            <summary>
            Save the value of one of the group's settings
            </summary>
            <param name="settingName">Name of the setting to save</param>
            <param name="settingValue">Value to be saved</param>
        </member>
        <member name="M:NUnit.Util.SettingsGroup.Dispose">
            <summary>
            Dispose of this group by disposing of it's storage implementation
            </summary>
        </member>
        <member name="P:NUnit.Util.SettingsGroup.Storage">
            <summary>
            The storage used for the group settings
            </summary>
        </member>
        <member name="T:NUnit.Util.AgentStatus">
            <summary>
            Enumeration used to report AgentStatus
            </summary>
        </member>
        <member name="T:NUnit.Util.TestAgency">
            <summary>
            The TestAgency class provides RemoteTestAgents
            on request and tracks their status. Agents
            are wrapped in an instance of the TestAgent
            class. Multiple agent types are supported
            but only one, ProcessAgent is implemented
            at this time.
            </summary>
        </member>
        <member name="T:NUnit.Util.ServerBase">
            <summary>
            Summary description for ServerBase.
            </summary>
        </member>
        <member name="M:NUnit.Util.ServerBase.#ctor(System.String,System.Int32)">
            <summary>
            Constructor used to provide
            </summary>
            <param name="uri"></param>
            <param name="port"></param>
        </member>
        <member name="M:NUnit.Util.TestAgency.IsRuntimeVersionSupported(System.Version)">
            <summary>
            Returns true if NUnit support for the runtime specified 
            is installed, independent of whether the runtime itself
            is installed on the system.
            
            In the current implementation, only .NET 1.x requires
            special handling, since all higher runtimes are 
            supported normally.
            </summary>
            <param name="version">The desired runtime version</param>
            <returns>True if NUnit support is installed</returns>
        </member>
        <member name="M:NUnit.Util.TestAgency.GetNUnitBinDirectory(System.Version)">
            <summary>
            Return the NUnit Bin Directory for a particular
            runtime version, or null if it's not installed.
            For normal installations, there are only 1.1 and
            2.0 directories. However, this method accomodates
            3.5 and 4.0 directories for the benefit of NUnit
            developers using those runtimes.
            </summary>
        </member>
        <member name="T:NUnit.Util.TestAgency.AgentDataBase">
            <summary>
             A simple class that tracks data about this
             agencies active and available agents
            </summary>
        </member>
        <member name="T:NUnit.Util.AggregatingTestRunner">
            <summary>
            AggregatingTestRunner allows running multiple TestRunners
            and combining the results.
            </summary>
        </member>
        <member name="F:NUnit.Util.AggregatingTestRunner.runnerID">
            <summary>
            Our runner ID
            </summary>
        </member>
        <member name="F:NUnit.Util.AggregatingTestRunner.runners">
            <summary>
            The downstream TestRunners
            </summary>
        </member>
        <member name="F:NUnit.Util.AggregatingTestRunner.runInParallel">
            <summary>
            Indicates whether we should run test assemblies in parallel
            </summary>
        </member>
        <member name="F:NUnit.Util.AggregatingTestRunner.aggregateTest">
            <summary>
            The loaded test suite
            </summary>
        </member>
        <member name="F:NUnit.Util.AggregatingTestRunner.testResult">
            <summary>
            The result of the last run
            </summary>
        </member>
        <member name="F:NUnit.Util.AggregatingTestRunner.listener">
            <summary>
            The event listener for the currently running test
            </summary>
        </member>
        <member name="T:NUnit.Util.MultipleTestDomainRunner">
            <summary>
            Summary description for MultipleTestDomainRunner.
            </summary>
        </member>
        <member name="T:NUnit.Util.AssemblyList">
            <summary>
            Represents a list of assemblies. It stores paths 
            that are added and fires an event whenevever it
            changes. All paths must be added as absolute paths.
            </summary>
        </member>
        <member name="T:NUnit.Util.AssemblyWatcher">
            <summary>
            AssemblyWatcher keeps track of one or more assemblies to 
            see if they have changed. It incorporates a delayed notification
            and uses a standard event to notify any interested parties
            about the change. The path to the assembly is provided as
            an argument to the event handler so that one routine can
            be used to handle events from multiple watchers.
            </summary>
        </member>
        <member name="T:NUnit.Util.IAssemblyWatcher">
            <summary>
            AssemblyWatcher keeps track of one or more assemblies to 
            see if they have changed. It incorporates a delayed notification
            and uses a standard event to notify any interested parties
            about the change. The path to the assembly is provided as
            an argument to the event handler so that one routine can
            be used to handle events from multiple watchers.
            </summary>
        </member>
        <member name="M:NUnit.Util.IAssemblyWatcher.Stop">
            <summary>
            Stops watching for changes.
            To release resources call FreeResources.
            </summary>
        </member>
        <member name="M:NUnit.Util.IAssemblyWatcher.Start">
            <summary>
            Starts watching for assembly changes.
            You need to call Setup before start watching.
            </summary>
        </member>
        <member name="M:NUnit.Util.IAssemblyWatcher.Setup(System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes the watcher with assemblies to observe for changes.
            </summary>
            <param name="delayInMs">The delay in ms.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:NUnit.Util.IAssemblyWatcher.Setup(System.Int32,System.String)">
            <summary>
            Initializes the watcher with assemblies to observe for changes.
            </summary>
            <param name="delayInMs">The delay in ms.</param>
            <param name="assemblyFileName">Name of the assembly file.</param>
        </member>
        <member name="M:NUnit.Util.IAssemblyWatcher.FreeResources">
            <summary>
            Releases all resources held by the watcher.
            </summary>
        </member>
        <member name="E:NUnit.Util.IAssemblyWatcher.AssemblyChanged">
            <summary>
            Occurs when an assembly being watched has changed.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NUnit.Util.CategoryExpression" -->
        <member name="T:NUnit.Util.ConsoleWriter">
            <summary>
            Class used for receiving console output from the running test and displaying it.
            </summary>
        </member>
        <member name="T:NUnit.Util.DefaultTestRunnerFactory">
            <summary>
            DefaultTestRunnerFactory handles creation of a suitable test 
            runner for a given package to be loaded and run either in a 
            separate process or within the same process. 
            </summary>
        </member>
        <member name="T:NUnit.Util.InProcessTestRunnerFactory">
            <summary>
            InProcessTestRunnerFactory handles creation of a suitable test 
            runner for a given package to be loaded and run within the
            same process.
            </summary>
        </member>
        <member name="M:NUnit.Util.InProcessTestRunnerFactory.MakeTestRunner(NUnit.Core.TestPackage)">
            <summary>
            Returns a test runner based on the settings in a TestPackage.
            Any setting that is "consumed" by the factory is removed, so
            that downstream runners using the factory will not repeatedly
            create the same type of runner.
            </summary>
            <param name="package">The TestPackage to be loaded and run</param>
            <returns>A TestRunner</returns>
        </member>
        <member name="M:NUnit.Util.DefaultTestRunnerFactory.MakeTestRunner(NUnit.Core.TestPackage)">
            <summary>
            Returns a test runner based on the settings in a TestPackage.
            Any setting that is "consumed" by the factory is removed, so
            that downstream runners using the factory will not repeatedly
            create the same type of runner.
            </summary>
            <param name="package">The TestPackage to be loaded and run</param>
            <returns>A TestRunner</returns>
        </member>
        <member name="T:NUnit.Util.MemorySettingsStorage">
            <summary>
             MemorySettingsStorage is used to hold settings for
             the NUnit tests and also serves as the base class
             for XmlSettingsStorage.
            </summary>
        </member>
        <member name="T:NUnit.Util.ISettingsStorage">
            <summary>
            The ISettingsStorage interface is implemented by all
            types of backing storage for settings.
            </summary>
        </member>
        <member name="M:NUnit.Util.ISettingsStorage.GetSetting(System.String)">
            <summary>
            Load a setting from the storage.
            </summary>
            <param name="settingName">Name of the setting to load</param>
            <returns>Value of the setting or null</returns>
        </member>
        <member name="M:NUnit.Util.ISettingsStorage.RemoveSetting(System.String)">
            <summary>
            Remove a setting from the storage
            </summary>
            <param name="settingName">Name of the setting to remove</param>
        </member>
        <member name="M:NUnit.Util.ISettingsStorage.RemoveGroup(System.String)">
            <summary>
            Remove a group of settings from the storae
            </summary>
            <param name="groupName">Name of the group to remove</param>
        </member>
        <member name="M:NUnit.Util.ISettingsStorage.SaveSetting(System.String,System.Object)">
            <summary>
            Save a setting in the storage
            </summary>
            <param name="settingName">Name of the setting to save</param>
            <param name="settingValue">Value to be saved</param>
        </member>
        <member name="M:NUnit.Util.ISettingsStorage.MakeChildStorage(System.String)">
            <summary>
            Create a child storage of the same type
            </summary>
            <param name="name">Name of the child storage</param>
            <returns>New child storage</returns>
        </member>
        <member name="M:NUnit.Util.ISettingsStorage.LoadSettings">
            <summary>
            Load settings from external storage if required
            by the implementation.
            </summary>
        </member>
        <member name="M:NUnit.Util.ISettingsStorage.SaveSettings">
            <summary>
            Save settings to external storage if required
            by the implementation.
            </summary>
        </member>
        <member name="T:NUnit.Util.NUnitProject">
            <summary>
            Class that represents an NUnit test project
            </summary>
        </member>
        <member name="F:NUnit.Util.NUnitProject.projectPath">
            <summary>
            Path to the file storing this project
            </summary>
        </member>
        <member name="F:NUnit.Util.NUnitProject.basePath">
            <summary>
            Application Base for the project. Since this
            can be null, always fetch from the property
            rather than using the field directly.
            </summary>
        </member>
        <member name="F:NUnit.Util.NUnitProject.isDirty">
            <summary>
             Whether the project is dirty
            </summary>
        </member>
        <member name="F:NUnit.Util.NUnitProject.reloadRequired">
            <summary>
            Whether canges have been made requiring a reload
            </summary>
        </member>
        <member name="F:NUnit.Util.NUnitProject.configs">
            <summary>
            Collection of configs for the project
            </summary>
        </member>
        <member name="F:NUnit.Util.NUnitProject.autoConfig">
            <summary>
            True for NUnit-related projects that follow the config
            of the NUnit build under which they are running.
            </summary>
        </member>
        <member name="F:NUnit.Util.NUnitProject.activeConfig">
            <summary>
            The currently active configuration
            </summary>
        </member>
        <member name="F:NUnit.Util.NUnitProject.isAssemblyWrapper">
            <summary>
            Flag indicating that this project is a
            temporary wrapper for an assembly.
            </summary>
        </member>
        <member name="F:NUnit.Util.NUnitProject.processModel">
            <summary>
            The ProcessModel to be used in loading this project
            </summary>
        </member>
        <member name="F:NUnit.Util.NUnitProject.domainUsage">
            <summary>
            The DomainUsage setting to be used in loading this project
            </summary>
        </member>
        <member name="P:NUnit.Util.NUnitProject.ProjectPath">
            <summary>
            The path to which a project will be saved.
            </summary>
        </member>
        <member name="P:NUnit.Util.NUnitProject.BasePathSpecified">
            <summary>
            Indicates whether a base path was specified for the project
            </summary>
        </member>
        <member name="P:NUnit.Util.NUnitProject.BasePath">
            <summary>
            The base path for the project. Constructor sets
            it to the directory part of the project path.
            </summary>
        </member>
        <member name="P:NUnit.Util.NUnitProject.Name">
            <summary>
            The name of the project.
            </summary>
        </member>
        <member name="T:NUnit.Util.NUnitRegistry">
            <summary>
            NUnitRegistry provides static properties for NUnit's
            subkey under CurrentUser.
            </summary>
        </member>
        <member name="M:NUnit.Util.NUnitRegistry.#ctor">
            <summary>
            Prevent construction of object
            </summary>
        </member>
        <member name="M:NUnit.Util.NUnitRegistry.ClearSubKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Static helper method that clears out the contents of a subkey
            </summary>
            <param name="baseKey">Base key for the subkey</param>
            <param name="subKey">Name of the subkey</param>
        </member>
        <member name="M:NUnit.Util.NUnitRegistry.ClearKey(Microsoft.Win32.RegistryKey)">
            <summary>
            Static function that clears out the contents of a key
            </summary>
            <param name="key">Key to be cleared</param>
        </member>
        <member name="M:NUnit.Util.NUnitRegistry.CopyKey(Microsoft.Win32.RegistryKey,Microsoft.Win32.RegistryKey)">
            <summary>
            Static method that copies the contents of one key to another
            </summary>
            <param name="fromKey">The source key for the copy</param>
            <param name="toKey">The target key for the copy</param>
        </member>
        <member name="P:NUnit.Util.NUnitRegistry.CurrentUser">
            <summary>
            Registry subkey for the current user
            </summary>
        </member>
        <member name="T:NUnit.Util.PathUtils">
            <summary>
            Static methods for manipulating project paths, including both directories
            and files. Some synonyms for System.Path methods are included as well.
            </summary> 
        </member>
        <member name="M:NUnit.Util.PathUtils.RelativePath(System.String,System.String)">
            <summary>
            Returns the relative path from a base directory to another
            directory or file.
            </summary>
        </member>
        <member name="M:NUnit.Util.PathUtils.Canonicalize(System.String)">
            <summary>
            Return the canonical form of a path.
            </summary>
        </member>
        <member name="M:NUnit.Util.PathUtils.SamePath(System.String,System.String)">
            <summary>
            True if the two paths are the same. However, two paths
            to the same file or directory using different network
            shares or drive letters are not treated as equal.
            </summary>
        </member>
        <member name="M:NUnit.Util.PathUtils.SamePathOrUnder(System.String,System.String)">
            <summary>
            True if the two paths are the same or if the second is
            directly or indirectly under the first. Note that paths 
            using different network shares or drive letters are 
            considered unrelated, even if they end up referencing
            the same subtrees in the file system.
            </summary>
        </member>
        <member name="T:NUnit.Util.ProcessRunner">
            <summary>
            Summary description for ProcessRunner.
            </summary>
        </member>
        <member name="F:NUnit.Util.ProjectConfig.name">
            <summary>
            The name of this config
            </summary>
        </member>
        <member name="F:NUnit.Util.ProjectConfig.project">
            <summary>
            IProject interface of containing project
            </summary>
        </member>
        <member name="F:NUnit.Util.ProjectConfig.assemblies">
            <summary>
            List of the names of the assemblies
            </summary>
        </member>
        <member name="F:NUnit.Util.ProjectConfig.basePath">
            <summary>
            Base path specific to this configuration
            </summary>
        </member>
        <member name="F:NUnit.Util.ProjectConfig.configFile">
            <summary>
            Our configuration file, if specified
            </summary>
        </member>
        <member name="F:NUnit.Util.ProjectConfig.binPath">
            <summary>
            Private bin path, if specified
            </summary>
        </member>
        <member name="F:NUnit.Util.ProjectConfig.binPathType">
            <summary>
            True if assembly paths should be added to bin path
            </summary>
        </member>
        <member name="F:NUnit.Util.ProjectConfig.runtimeFramework">
            <summary>
            The CLR under which tests are to be run
            </summary>
        </member>
        <member name="P:NUnit.Util.ProjectConfig.BasePath">
            <summary>
            The base directory for this config - used
            as the application base for loading tests.
            </summary>
        </member>
        <member name="P:NUnit.Util.ProjectConfig.RelativeBasePath">
            <summary>
            The base path relative to the project base
            </summary>
        </member>
        <member name="P:NUnit.Util.ProjectConfig.PrivateBinPath">
            <summary>
            The Path.PathSeparator-separated path containing all the
            assemblies in the list.
            </summary>
        </member>
        <member name="P:NUnit.Util.ProjectConfig.BinPathType">
            <summary>
            How our PrivateBinPath is generated
            </summary>
        </member>
        <member name="P:NUnit.Util.ProjectConfig.Assemblies">
            <summary>
            Return our AssemblyList
            </summary>
        </member>
        <member name="T:NUnit.Util.ProjectConfigCollection">
            <summary>
            Summary description for ProjectConfigCollection.
            </summary>
        </member>
        <member name="T:NUnit.Util.ProjectFormatException">
            <summary>
            Exception raised when loading a project file with
            an invalid format.
            </summary>
        </member>
        <member name="T:NUnit.Util.RecentFilesCollection">
            <summary>
            Summary description for RecentFilesCollection.
            </summary>
        </member>
        <member name="T:NUnit.Util.RegistrySettingsStorage">
            <summary>
            Implementation of SettingsStorage for NUnit user settings,
            based on storage of settings in the registry.
            
            Setting names containing a dot are interpreted as a 
            reference to a subkey. Only the first dot is used
            in this way, since the feature is only intended
            to support legacy registry settings, which are not
            nested any deeper.
            </summary>
        </member>
        <member name="F:NUnit.Util.RegistrySettingsStorage.storageKey">
            <summary>
            If not null, the registry key for this storage
            </summary>
        </member>
        <member name="M:NUnit.Util.RegistrySettingsStorage.#ctor(Microsoft.Win32.RegistryKey)">
            <summary>
            Construct a storage on top of a pre-created registry key
            </summary>
            <param name="storageKey"></param>
        </member>
        <member name="M:NUnit.Util.RegistrySettingsStorage.GetSetting(System.String)">
            <summary>
            Load a setting from this storage
            </summary>
            <param name="settingName">Name of the setting to load</param>
            <returns>Value of the setting</returns>
        </member>
        <member name="M:NUnit.Util.RegistrySettingsStorage.RemoveSetting(System.String)">
            <summary>
            Remove a setting from the storage
            </summary>
            <param name="settingName">Name of the setting to remove</param>
        </member>
        <member name="M:NUnit.Util.RegistrySettingsStorage.SaveSetting(System.String,System.Object)">
            <summary>
            Save a setting in this storage
            </summary>
            <param name="settingName">Name of the setting to save</param>
            <param name="settingValue">Value to be saved</param>
        </member>
        <member name="M:NUnit.Util.RegistrySettingsStorage.MakeChildStorage(System.String)">
            <summary>
            Make a new child storage under this one
            </summary>
            <param name="storageName">Name of the child storage to make</param>
            <returns>New storage</returns>
        </member>
        <member name="M:NUnit.Util.RegistrySettingsStorage.LoadSettings">
            <summary>
            LoadSettings does nothing in this implementation, since the
            registry is accessed directly.
            </summary>
        </member>
        <member name="M:NUnit.Util.RegistrySettingsStorage.SaveSettings">
            <summary>
            SaveSettings does nothing in this implementation, since the
            registry is accessed directly.
            </summary>
        </member>
        <member name="M:NUnit.Util.RegistrySettingsStorage.Dispose">
            <summary>
            Dispose of this object by closing the storage key, if any
            </summary>
        </member>
        <member name="P:NUnit.Util.RegistrySettingsStorage.StorageKey">
            <summary>
            The registry key used to hold this storage
            </summary>
        </member>
        <member name="T:NUnit.Util.RemoteTestAgent">
            <summary>
            RemoteTestAgent represents a remote agent executing in another process
            and communicating with NUnit by TCP. Although it is similar to a
            TestServer, it does not publish a Uri at which clients may connect 
            to it. Rather, it reports back to the sponsoring TestAgency upon 
            startup so that the agency may in turn provide it to clients for use.
            </summary>
        </member>
        <member name="M:NUnit.Util.RemoteTestAgent.#ctor(System.Guid,NUnit.Util.TestAgency)">
            <summary>
            Construct a RemoteTestAgent
            </summary>
        </member>
        <member name="T:NUnit.Util.ResultSummarizer">
            <summary>
            Summary description for ResultSummarizer.
            </summary>
        </member>
        <member name="P:NUnit.Util.ResultSummarizer.ResultCount">
            <summary>
            Returns the number of test cases for which results
            have been summarized. Any tests excluded by use of
            Category or Explicit attributes are not counted.
            </summary>
        </member>
        <member name="P:NUnit.Util.ResultSummarizer.TestsRun">
            <summary>
            Returns the number of test cases actually run, which
            is the same as ResultCount, less any Skipped, Ignored
            or NonRunnable tests.
            </summary>
        </member>
        <member name="P:NUnit.Util.ResultSummarizer.Passed">
            <summary>
            Returns the number of tests that passed
            </summary>
        </member>
        <member name="P:NUnit.Util.ResultSummarizer.Errors">
            <summary>
            Returns the number of test cases that had an error.
            </summary>
        </member>
        <member name="P:NUnit.Util.ResultSummarizer.Failures">
            <summary>
            Returns the number of test cases that failed.
            </summary>
        </member>
        <member name="P:NUnit.Util.ResultSummarizer.Inconclusive">
            <summary>
            Returns the number of test cases that failed.
            </summary>
        </member>
        <member name="P:NUnit.Util.ResultSummarizer.NotRunnable">
            <summary>
            Returns the number of test cases that were not runnable
            due to errors in the signature of the class or method.
            Such tests are also counted as Errors.
            </summary>
        </member>
        <member name="P:NUnit.Util.ResultSummarizer.Skipped">
            <summary>
            Returns the number of test cases that were skipped.
            </summary>
        </member>
        <member name="M:NUnit.Util.RuntimeFrameworkSelector.SelectRuntimeFramework(NUnit.Core.TestPackage)">
            <summary>
            Selects a target runtime framework for a TestPackage based on
            the settings in the package and the assemblies themselves.
            The package RuntimeFramework setting may be updated as a 
            result and the selected runtime is returned.
            </summary>
            <param name="package">A TestPackage</param>
            <returns>The selected RuntimeFramework</returns>
        </member>
        <member name="T:NUnit.Util.ServerUtilities">
            <summary>
            Summary description for RemotingUtilities.
            </summary>
        </member>
        <member name="M:NUnit.Util.ServerUtilities.CreateTcpChannel(System.String,System.Int32,System.Int32)">
            <summary>
             Create a TcpChannel with a given name, on a given port.
            </summary>
            <param name="port"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Util.ServerUtilities.GetTcpChannel(System.String,System.Int32)">
            <summary>
            Get a channel by name, casting it to a TcpChannel.
            Otherwise, create, register and return a TcpChannel with
            that name, on the port provided as the second argument.
            </summary>
            <param name="name">The channel name</param>
            <param name="port">The port to use if the channel must be created</param>
            <returns>A TcpChannel or null</returns>
        </member>
        <member name="M:NUnit.Util.ServerUtilities.GetTcpChannel(System.String,System.Int32,System.Int32)">
            <summary>
            Get a channel by name, casting it to a TcpChannel.
            Otherwise, create, register and return a TcpChannel with
            that name, on the port provided as the second argument.
            </summary>
            <param name="name">The channel name</param>
            <param name="port">The port to use if the channel must be created</param>
            <param name="limit">The client connection limit or negative for the default</param>
            <returns>A TcpChannel or null</returns>
        </member>
        <member name="T:NUnit.Util.Services">
            <summary>
            Services is a utility class, which is used to provide access
            to services in a more simple way than is supported by te
            ServiceManager class itself.
            </summary>
        </member>
        <member name="T:NUnit.Util.StackTraceFilter">
            <summary>
            Summary description for StackTraceFilter.
            </summary>
        </member>
        <member name="F:NUnit.Util.TestDomain.domain">
            <summary>
            The appdomain used  to load tests
            </summary>
        </member>
        <member name="F:NUnit.Util.TestDomain.agent">
            <summary>
            The TestAgent in the domain
            </summary>
        </member>
        <member name="T:NUnit.Util.TestEventHandler">
            <summary>
            The delegates for all events related to running tests
            </summary>
        </member>
        <member name="T:NUnit.Util.TestAction">
            <summary>
            Enumeration used to distiguish test events
            </summary>
        </member>
        <member name="T:NUnit.Util.TestEventArgs">
            <summary>
            Argument used for all test events
            </summary>
        </member>
        <member name="T:NUnit.Util.TestEventDispatcher">
            <summary>
            Helper class used to dispatch test events
            </summary>
        </member>
        <member name="T:NUnit.Util.TestExceptionHandler">
            <summary>
            Summary description for UnhandledExceptionCatcher.
            </summary>
        </member>
        <member name="T:NUnit.Util.TestLoader">
            <summary>
            TestLoader handles interactions between a test runner and a 
            client program - typically the user interface - for the 
            purpose of loading, unloading and running tests.
            
            It implemements the EventListener interface which is used by 
            the test runner and repackages those events, along with
            others as individual events that clients may subscribe to
            in collaboration with a TestEventDispatcher helper object.
            
            TestLoader is quite handy for use with a gui client because
            of the large number of events it supports. However, it has
            no dependencies on ui components and can be used independently.
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.events">
            <summary>
            Our event dispatching helper object
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.factory">
            <summary>
            Our TestRunnerFactory
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.testRunner">
            <summary>
            Loads and executes tests. Non-null when
            we have loaded a test.
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.testProject">
            <summary>
            Our current test project, if we have one.
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.loadedTestName">
            <summary>
            The test name that was specified when loading
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.currentTestName">
            <summary>
            The currently executing test
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.currentRuntime">
            <summary>
            The currently set runtime framework
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.testResult">
            <summary>
            Result of the last test run
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.lastException">
            <summary>
            The last exception received when trying to load, unload or run a test
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.watcher">
            <summary>
            Watcher fires when the assembly changes
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.reloadPending">
            <summary>
            Assembly changed during a test and
            needs to be reloaded later
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.tracing">
            <summary>
            Trace setting to use for running tests
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.logLevel">
            <summary>
            LoggingThreshold to use for running tests
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.lastFilter">
            <summary>
            The last filter used for a run - used to 
            rerun tests when a change occurs
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.lastTracing">
            <summary>
            The last trace setting used for a run
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.lastLogLevel">
            <summary>
            Last logging level used for a run
            </summary>
        </member>
        <member name="F:NUnit.Util.TestLoader.currentFramework">
            <summary>
            The runtime framework being used for the currently
            loaded tests, or the current framework if no tests
            are loaded.
            </summary>
        </member>
        <member name="M:NUnit.Util.TestLoader.TestStarted(NUnit.Core.TestName)">
            <summary>
            Trigger event when each test starts
            </summary>
            <param name="testName">TestName of the Test that is starting</param>
        </member>
        <member name="M:NUnit.Util.TestLoader.TestFinished(NUnit.Core.TestResult)">
            <summary>
            Trigger event when each test finishes
            </summary>
            <param name="result">Result of the case that finished</param>
        </member>
        <member name="M:NUnit.Util.TestLoader.SuiteStarted(NUnit.Core.TestName)">
            <summary>
            Trigger event when each suite starts
            </summary>
            <param name="suite">Suite that is starting</param>
        </member>
        <member name="M:NUnit.Util.TestLoader.SuiteFinished(NUnit.Core.TestResult)">
            <summary>
            Trigger event when each suite finishes
            </summary>
            <param name="result">Result of the suite that finished</param>
        </member>
        <member name="M:NUnit.Util.TestLoader.UnhandledException(System.Exception)">
            <summary>
            Trigger event when an unhandled exception (other than ThreadAbordException) occurs during a test
            </summary>
            <param name="exception">The unhandled exception</param>
        </member>
        <member name="M:NUnit.Util.TestLoader.TestOutput(NUnit.Core.TestOutput)">
            <summary>
            Trigger event when output occurs during a test
            </summary>
            <param name="testOutput">The test output</param>
        </member>
        <member name="M:NUnit.Util.TestLoader.NewProject">
            <summary>
            Create a new project with default naming
            </summary>
        </member>
        <member name="M:NUnit.Util.TestLoader.NewProject(System.String)">
            <summary>
            Create a new project using a given path
            </summary>
        </member>
        <member name="M:NUnit.Util.TestLoader.LoadProject(System.String,System.String)">
            <summary>
            Load a new project, optionally selecting the config and fire events
            </summary>
        </member>
        <member name="M:NUnit.Util.TestLoader.LoadProject(System.String)">
            <summary>
            Load a new project using the default config and fire events
            </summary>
        </member>
        <member name="M:NUnit.Util.TestLoader.LoadProject(System.String[])">
            <summary>
            Load a project from a list of assemblies and fire events
            </summary>
        </member>
        <member name="M:NUnit.Util.TestLoader.UnloadProject">
            <summary>
            Unload the current project and fire events
            </summary>
        </member>
        <member name="M:NUnit.Util.TestLoader.OnProjectLoad(NUnit.Util.NUnitProject)">
            <summary>
            Common operations done each time a project is loaded
            </summary>
            <param name="testProject">The newly loaded project</param>
        </member>
        <member name="M:NUnit.Util.TestLoader.UnloadTest">
            <summary>
            Unload the current test suite and fire the Unloaded event
            </summary>
        </member>
        <member name="M:NUnit.Util.TestLoader.CanReloadUnderRuntimeVersion(System.Version)">
            <summary>
            Return true if the current project can be reloaded under
            the specified CLR version.
            </summary>
        </member>
        <member name="M:NUnit.Util.TestLoader.ReloadTest(NUnit.Core.RuntimeFramework)">
            <summary>
            Reload the current test on command
            </summary>
        </member>
        <member name="M:NUnit.Util.TestLoader.OnTestChanged(System.String)">
            <summary>
            Handle watcher event that signals when the loaded assembly
            file has changed. Make sure it's a real change before
            firing the SuiteChangedEvent. Since this all happens
            asynchronously, we use an event to let ui components
            know that the failure happened.
            </summary>
        </member>
        <member name="M:NUnit.Util.TestLoader.RunTests(NUnit.Core.ITestFilter)">
            <summary>
            Run selected tests using a filter
            </summary>
            <param name="filter">The filter to be used</param>
        </member>
        <member name="M:NUnit.Util.TestLoader.CancelTestRun">
            <summary>
            Cancel the currently running test.
            Fail silently if there is none to
            allow for latency in the UI.
            </summary>
        </member>
        <member name="M:NUnit.Util.TestLoader.InstallWatcher">
            <summary>
            Install our watcher object so as to get notifications
            about changes to a test.
            </summary>
        </member>
        <member name="M:NUnit.Util.TestLoader.RemoveWatcher">
            <summary>
            Stop and remove our current watcher object.
            </summary>
        </member>
        <member name="T:NUnit.Util.TestObserver">
            <summary>
            The TestObserver interface is implemented by a class that
            subscribes to the events generated in loading and running
            tests and uses that information in some way.
            </summary>
        </member>
        <member name="T:NUnit.Util.TestResultItem">
            <summary>
            Summary description for TestResultItem.
            </summary>
        </member>
        <member name="T:NUnit.Util.TestServer">
            <summary>
            Base class for servers
            </summary>
        </member>
        <member name="T:NUnit.Util.VSProject">
            <summary>
            This class allows loading information about
            configurations and assemblies in a Visual
            Studio project file and inspecting them.
            Only the most common project types are
            supported and an exception is thrown if
            an attempt is made to load an invalid
            file or one of an unknown type.
            </summary>
        </member>
        <member name="F:NUnit.Util.VSProject.validExtensions">
            <summary>
            VS Project extentions
            </summary>
        </member>
        <member name="F:NUnit.Util.VSProject.solutionExtension">
            <summary>
            VS Solution extension
            </summary>
        </member>
        <member name="F:NUnit.Util.VSProject.projectPath">
            <summary>
            Path to the file storing this project
            </summary>
        </member>
        <member name="F:NUnit.Util.VSProject.configs">
            <summary>
            Collection of configs for the project
            </summary>
        </member>
        <member name="P:NUnit.Util.VSProject.Name">
            <summary>
            The name of the project.
            </summary>
        </member>
        <member name="P:NUnit.Util.VSProject.ProjectPath">
            <summary>
            The path to the project
            </summary>
        </member>
        <member name="P:NUnit.Util.VSProject.Configs">
            <summary>
            Our collection of configurations
            </summary>
        </member>
        <member name="T:NUnit.Util.VSProjectConfig">
            <summary>
            Originally, we used the same ProjectConfig class for both
            NUnit and Visual Studio projects. Since we really do very
            little with VS Projects, this class has been created to 
            hold the name and the collection of assembly paths.
            </summary>
        </member>
        <member name="T:NUnit.Util.VSProjectConfigCollection">
            <summary>
            A simple collection to hold VSProjectConfigs. Originally,
            we used the (NUnit) ProjectConfigCollection, but the
            classes have since diverged.
            </summary>
        </member>
        <member name="T:NUnit.Util.XmlResultTransform">
            <summary>
            Summary description for XmlResultTransform.
            </summary>
        </member>
        <member name="T:NUnit.Util.XmlResultWriter">
            <summary>
            Summary description for XmlResultWriter.
            </summary>
        </member>
        <member name="M:NUnit.Util.XmlResultWriter.CharacterSafeString(System.String)">
            <summary>
            Makes string safe for xml parsing, replacing control chars with '?'
            </summary>
            <param name="encodedString">string to make safe</param>
            <returns>xml safe string</returns>
        </member>
        <member name="T:NUnit.Util.XmlSettingsStorage">
            <summary>
            Summary description for XmlSettingsStorage.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.SettingsPage">
            <summary>
            NUnitSettingsPage is the base class for all pages used
            in a tabbed or tree-structured SettingsDialog.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.SettingsPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.SettingsPage.settings">
            <summary>
            Settings are available to derived classes
            </summary>
        </member>
        <member name="M:NUnit.UiKit.SettingsPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.SettingsPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.AdvancedLoaderSettingsPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.AdvancedLoaderSettingsPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.AssemblyReloadSettingsPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.AssemblyReloadSettingsPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.GuiSettingsPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.GuiSettingsPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NUnit.Gui.SettingsPages.InternalTraceSettingsPage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.InternalTraceSettingsPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.InternalTraceSettingsPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NUnit.Gui.SettingsPages.ProjectEditorSettingsPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.ProjectEditorSettingsPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.ProjectEditorSettingsPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NUnit.Gui.SettingsPages.RuntimeSelectionSettingsPage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.RuntimeSelectionSettingsPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.RuntimeSelectionSettingsPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.TestLoaderSettingsPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.TestLoaderSettingsPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.TestResultSettingsPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.TestResultSettingsPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.TreeSettingsPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.TreeSettingsPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.VisualStudioSettingsPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.Gui.SettingsPages.VisualStudioSettingsPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NUnit.Gui.AboutBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.Gui.AboutBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.Gui.AboutBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NUnit.Gui.AddinDialog">
            <summary>
            Summary description for AddinDialog.
            </summary>
        </member>
        <member name="F:NUnit.Gui.AddinDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.Gui.AddinDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.Gui.AddinDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NUnit.Gui.AppEntry">
            <summary>
            Class to manage application startup.
            </summary>
        </member>
        <member name="M:NUnit.Gui.AppEntry.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:NUnit.Gui.DetailResults">
            <summary>
            Summary description for DetailResults
            </summary>
        </member>
        <member name="T:NUnit.Gui.ExceptionDetailsForm">
            <summary>
            Summary description for ExceptionDetailsForm.
            </summary>
        </member>
        <member name="F:NUnit.Gui.ExceptionDetailsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.Gui.ExceptionDetailsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.Gui.ExceptionDetailsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NUnit.Gui.NUnitForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NUnit.Gui.NUnitForm.projectMenu_Popup(System.Object,System.EventArgs)">
            <summary>
            When the project menu pops up, we populate the
            submenu for configurations dynamically.
            </summary>
        </member>
        <member name="M:NUnit.Gui.NUnitForm.aboutMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Display the about box when menu item is selected
            </summary>
        </member>
        <member name="M:NUnit.Gui.NUnitForm.NUnitForm_Load(System.Object,System.EventArgs)">
            <summary>
            Get saved options when form loads
            </summary>
        </member>
        <member name="M:NUnit.Gui.NUnitForm.NUnitForm_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Form is about to close, first see if we 
            have a test run going on and if so whether
            we should cancel it. Then unload the 
            test and save the latest form position.
            </summary>
        </member>
        <member name="M:NUnit.Gui.NUnitForm.runButton_Click(System.Object,System.EventArgs)">
            <summary>
            When the Run Button is clicked, run the selected test.
            </summary>
        </member>
        <member name="M:NUnit.Gui.NUnitForm.stopButton_Click(System.Object,System.EventArgs)">
            <summary>
            When the Stop Button is clicked, cancel running test
            </summary>
        </member>
        <member name="M:NUnit.Gui.NUnitForm.OnTestLoaded(System.Object,NUnit.Util.TestEventArgs)">
            <summary>
            A test suite has been loaded, so update 
            recent assemblies and display the tests in the UI
            </summary>
        </member>
        <member name="M:NUnit.Gui.NUnitForm.OnTestUnloaded(System.Object,NUnit.Util.TestEventArgs)">
            <summary>
            A test suite has been unloaded, so clear the UI
            and remove any references to the suite.
            </summary>
        </member>
        <member name="M:NUnit.Gui.NUnitForm.OnTestChanged(System.Object,NUnit.Util.TestEventArgs)">
            <summary>
            The current test suite has changed in some way,
            so update the info in the UI and clear the
            test results, since they are no longer valid.
            </summary>
        </member>
        <member name="M:NUnit.Gui.NUnitForm.OnTestLoadFailure(System.Object,NUnit.Util.TestEventArgs)">
            <summary>
            Event handler for assembly load failures. We do this via
            an event since some errors may occur asynchronously.
            </summary>
        </member>
        <member name="M:NUnit.Gui.NUnitForm.SetTitleBar(System.String)">
            <summary>
            Set the title bar based on the loaded file or project
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:NUnit.Gui.NUnitPresenter">
            <summary>
            NUnitPresenter does all file opening and closing that
            involves interacting with the user.
            
            NOTE: This class originated as the static class
            TestLoaderUI and is slowly being converted to a
            true presenter. Current limitations include:
            
            1. At this time, the presenter is created by
            the form and interacts with it directly, rather
            than through an interface. 
            
            2. Many functions, which should properly be in
            the presenter, remain in the form.
            
            3. The presenter creates dialogs itself, which
            limits testability.
            </summary>
        </member>
        <member name="T:NUnit.Gui.OptionsDialog">
            <summary>
            Summary description for OptionsDialog.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.ScrollingTextDisplayForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.ScrollingTextDisplayForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.ScrollingTextDisplayForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.CodeFormatterCollection">
            <summary>
            Makes the link between a file language and an ICodeFormatter.
            This class is used to know which formatter need to be call
            when displaying an ErrorItem.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.CodeFormatterCollection._toFormatter">
            <summary>
            Maps language files to ICodeFormatters.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CodeFormatterCollection.#ctor">
            <summary>
            Builds an empty CodeFormatterCollection.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CodeFormatterCollection.HasExtension(System.String)">
            <summary>
            Checks whether there is a formatter that has been
            assigned to the given file extension.
            </summary>
            <param name="language">A file extension such as: "cs".</param>
            <returns>True if there is such formatter, false otherwise.</returns>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CodeFormatterCollection.HasLanguage(System.String)">
            <summary>
            Tests whether the collection contains a formatter for the given language.
            </summary>
            <param name="language">
            A language name. Ex: "C#", "Java"</param>
            <returns>True if such formatter exists.</returns>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CodeFormatterCollection.GetFromExtension(System.String)">
            <summary>
            Gets the ICodeFormatter that has been assigned to this extension.
            </summary>
            <param name="extension">The file extension. This parameter
            cannot be null.</param>
            <returns>The ICodeFormatter assigned to.</returns>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CodeFormatterCollection.Register(NUnit.UiException.CodeFormatters.ICodeFormatter,System.String)">
            <summary>
            Registers an ICodeFormatter for the given language. The system
            is not case sensitive.
            </summary>
            <param name="formatter">
            A non null formatter.
            </param>
            <param name="language">
            A non null file language.
            The value must not be empty nor contain '.' and
            must not have been already registered.
            </param>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CodeFormatterCollection.Remove(System.String)">
            <summary>
            Removes the formatter for the given file language.
            The language is not case sensitive.
            </summary>
            <param name="language">A file language.</param>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CodeFormatterCollection.Clear">
            <summary>
            Removes all formatters.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CodeFormatterCollection.GetEnumerator">
            <summary>
            Returns an IEnumerator on all registered ICodeFormatter.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.CodeFormatterCollection.Count">
            <summary>
            Gets the size of the collection.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.CodeFormatterCollection.Item(System.String)">
            <summary>
            Returns the ICodeFormatter that fit the given language.
            </summary>
            <param name="language">
            A language name, such as: "C#" or "Java".
            This parameter cannot be null.
            </param>
            <returns>
            The ICodeFormatter that fit this language.
            </returns>
            <see cref="M:NUnit.UiException.CodeFormatters.CodeFormatterCollection.HasExtension(System.String)"/>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.CodeFormatterCollection.Extensions">
            <summary>
            Returns a string collection with all registered extensions.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.GeneralCodeFormatter">
            <summary>
              GeneralCodeFormatter is the front class responsible for making a basic
            syntax coloring of a string of text for a set of specific languages.
             The class encapsulates a set of algorithms where each of them addresses
            a specific language formatting. The use of one or another algorithm at
            analysing time is made through an language registering mechanism.
            For instance C# files are covered by CSharpCodeFormatter which has
            been assigned to "cs" language.
             If a query is made to GeneralCodeFormatter while there is no formatter
            that fit the given file language a default formatting is applyied
            through the use of the formatter registered into the property
            DefaultFormatter.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.IFormatterCatalog">
            <summary>
            The interface through which SourceCodeDisplay interacts to guess
            the language from a file extension.
            
            Direct implementation is:
                - GeneralCodeFormatter
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.IFormatterCatalog.Format(System.String,System.String)">
            <summary>
            Format the text using the given language formatting.
            </summary>
            <param name="text">A text to be formatted</param>
            <param name="language">The language with which formatting the text</param>
            <returns>A FormatterCode object</returns>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.IFormatterCatalog.LanguageFromExtension(System.String)">
            <summary>
            Gets the language from the given extension.
            </summary>
            <param name="extension">An extension without the dot, like 'cs'</param>
            <returns>A language name, like 'C#'</returns>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.GeneralCodeFormatter._formatters">
            <summary>
            The set of formatting algorithms.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.GeneralCodeFormatter._default">
            <summary>
            The default formatter to be used as last resort.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.GeneralCodeFormatter.#ctor">
            <summary>
            Build and initialises GeneralCodeFormatter.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.GeneralCodeFormatter.GetFormatterFromLanguage(System.String)">
            <summary>
            Gets the best formatter that fits the given language. If there
            is no such formatter, a default one is returned.
            </summary>
            <param name="language">
            The language name. Ex: "C#", "Java. This parameter cannot be null.
            </param>
            <returns>
            A non-null ICodeFormatter that best fits the request.
            </returns>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.GeneralCodeFormatter.GetFormatterFromExtension(System.String)">
            <summary>
            Gets the formatter assigned to the given extension. If there
            is no such assignment, the default formatter is returned.
            </summary>
            <param name="extension">
            A file extension. Ex: "cs", "txt". This parameter cannot be null.
            </param>
            <returns>A non-null ICodeFormatter.</returns>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.GeneralCodeFormatter.FormatFromExtension(System.String,System.String)">
            <summary>
            A convenient method to make the formatting of a piece of code when
            only the file extension is known. 
            </summary>
            <param name="code">The piece of code to be formatted. This parameter
            cannot be null.</param>
            <param name="extension">The file extension associated to this piece of code.
            Ex: "cs", "cpp". This is used to pick the formatter assigned to. If no such
            formatter exists, the default one is picked up.</param>
            <returns>The FormattedCode for this piece of code.</returns>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.GeneralCodeFormatter.Format(System.String,System.String)">
            <summary>
            Pick the best available formatter to format the given piece of code.
            </summary>
            <param name="code">The code to be formatted. This parameter cannot be null.</param>
            <param name="language">
            The language into which code has been written. Ex: "C#", "Java".
            If no such formatter is available, a default formatting is applied.
            This parameter cannot be null.
            </param>
            <returns>
            The formatting for this piece of code.
            </returns>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.GeneralCodeFormatter.DefaultFormatter">
            <summary>
            Gets or sets the formatter to be used as last resort when
            no formatter fit the given source language.
              The value cannot be null.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.GeneralCodeFormatter.Formatters">
            <summary>
            Gives access to the underlying formatter collection.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.ICodeFormatter">
            <summary>
            ICodeFormatter is the interface to make the syntax
            coloring of a string for a specific developpment language.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.ICodeFormatter.Format(System.String)">
            <summary>
            Makes the coloring syntax of the given text.
            </summary>
            <param name="code">The text to be formatted. This
            parameter cannot be null.</param>
            <returns>A FormattedCode instance.</returns>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.ICodeFormatter.Language">
            <summary>
            The language name handled by this formatter.
            Ex: "C#", "Java", "C++" and so on...
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.PlainTextCodeFormatter">
            <summary>
            Create a default FormattedCode for any string value.
            This should be used as a last resort when there is not ICodeFormatter
            that fit source code for an ErrorItem.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.PlainTextCodeFormatter.PreProcess(System.String)">
            <summary>
            Prepare input text for the parsing stage.
            </summary>
            <param name="text">The text to be pre-processed.</param>
            <returns>A string ready to be parsed.</returns>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.PlainTextCodeFormatter.Language">
            <summary>
            Returns "Plain text"
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.CodeBox">
            <summary>
            A control that implements ICodeView.
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.ICodeView">
            <summary>
            The interface through which SourceCodeDisplay interacts with the code display.
            
            Direct implementation is:
                - CodeBox
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.ICodeView.Text">
            <summary>
            Gets or sets a text to display in the code display.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.ICodeView.Language">
            <summary>
            Gets or sets the language formatting of the code display.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.ICodeView.CurrentLine">
            <summary>
            Gets or sets the viewport location from a 0 based line index
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.ICodeView.Formatter">
            <summary>
            Gives access to the underlying IFormatterCatalog.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.CodeBox.ShowCurrentLine">
            <summary>
            Gets or sets a value telling whether or not displaying a special
            feature for the current line at drawing time.
            </summary>        
        </member>
        <member name="P:NUnit.UiException.Controls.CodeBox.CurrentLineBackColor">
            <summary>
            If ShowCurrentLine is set, this set the current line's background color.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.CodeBox.CurrentLineForeColor">
            <summary>
            If ShowCurrentLine is set, this set current line's foreground color.
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.CodeRenderingContext">
            <summary>
            Encapsulates basic colors settings to format a text according a language.
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.ICodeRenderer">
            <summary>
            The interface through which CodeBox interacts with a display to display itself.
            
            Direct implementation is:
                - DefaultCodeRenderer
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.ICodeRenderer.DrawToGraphics(NUnit.UiException.CodeFormatters.FormattedCode,NUnit.UiException.Controls.CodeRenderingContext,System.Drawing.Rectangle)">
            <summary>
            Draw the given code to be displayed in the actual viewport.
            </summary>
            <param name="code">The code to draw</param>
            <param name="args">Encapsulate graphic information about how to display the code</param>
            <param name="viewport">The portion of interest</param>
        </member>
        <member name="M:NUnit.UiException.Controls.ICodeRenderer.GetDocumentSize(NUnit.UiException.CodeFormatters.FormattedCode,System.Drawing.Graphics,System.Drawing.Font)">
            <summary>
            Measures the code size in pixels.
            </summary>
            <param name="code">The code to measure</param>
            <param name="g">The target graphics object</param>
            <param name="font">The font with which displaying the code</param>
            <returns>The size in pixels</returns>
        </member>
        <member name="M:NUnit.UiException.Controls.ICodeRenderer.LineIndexToYCoordinate(System.Int32,System.Drawing.Graphics,System.Drawing.Font)">
            <summary>
            Converts a line index to its matching Y client coordinate.
            </summary>
            <param name="lineIndex">The line index to convert</param>
            <param name="g">The target graphics object</param>
            <param name="font">The font with which displaying the code</param>
            <returns>The Y client coordinate</returns>
        </member>
        <member name="F:NUnit.UiException.Controls.DefaultCodeRenderer.MEASURECHAR_BIG_WIDTH">
            <summary>
            These constants below address an issue at measure text time
            that sometimes can cause big lines of text to be misaligned.
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.DefaultCodeRenderer.measureStringWidth(System.Drawing.Graphics,System.Drawing.Font,System.String,System.Int32,System.Int32)">
            <summary>
            Utility method that measures a region of text in the given string.
            </summary>
            <param name="g">The graphics instance used to render this text.</param>
            <param name="font">The font instance used to render this text.</param>
            <param name="text">The text that contains the region to be rendered.</param>
            <param name="indexStart">Starting startingPosition of this region.</param>
            <param name="length">Length of this region.</param>
            <returns>The width of this region of text.</returns>
        </member>
        <member name="T:NUnit.UiException.Controls.DefaultErrorListRenderer">
            <summary>
            Implements IErrorListRenderer.
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.IErrorListRenderer">
            <summary>
            The interface through which ErrorList interacts with a painter to paint itself.
            
            Direct implementation is:
                - DefaultErrorListRenderer
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.IErrorListRenderer.DrawToGraphics(NUnit.UiException.ErrorItemCollection,NUnit.UiException.ErrorItem,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the list on the given graphics.
            </summary>
            <param name="items">The item collection to paint on the graphics object</param>
            <param name="selected">The item to paint with selection feature</param>
            <param name="g">The target graphics object</param>
            <param name="viewport">The viewport location</param>
        </member>
        <member name="M:NUnit.UiException.Controls.IErrorListRenderer.DrawItem(NUnit.UiException.ErrorItem,System.Int32,System.Boolean,System.Boolean,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the given item on the given graphics object.
            </summary>
            <param name="item">The item to be painted</param>
            <param name="index">The item's index</param>
            <param name="hovered">If true, this item can display hover feature</param>
            <param name="selected">If true, this item can display selection feature</param>
            <param name="g">The target graphics object</param>
            <param name="viewport">The current viewport</param>
        </member>
        <member name="M:NUnit.UiException.Controls.IErrorListRenderer.GetDocumentSize(NUnit.UiException.ErrorItemCollection,System.Drawing.Graphics)">
            <summary>
            Given a collection of items and a graphics object, this method
            measures in pixels the size of the collection.
            </summary>
            <param name="items">The collection</param>
            <param name="g">The target graphics object</param>
            <returns>The size in pixels of the collection</returns>
        </member>
        <member name="M:NUnit.UiException.Controls.IErrorListRenderer.ItemAt(NUnit.UiException.ErrorItemCollection,System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
            Gets the Item right under point.
            </summary>
            <param name="items">A collection of items</param>
            <param name="g">The target graphics object</param>
            <param name="point">Some client coordinate values</param>
            <returns>One item in the collection or null the location doesn't match any item</returns>
        </member>
        <member name="P:NUnit.UiException.Controls.IErrorListRenderer.Font">
            <summary>
            Gets and sets the font for this renderer
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NUnit.UiException.Controls.ErrorBrowser" -->
        <member name="M:NUnit.UiException.Controls.ErrorBrowser.#ctor">
            <summary>
            Builds a new instance of ErrorBrowser.
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.ErrorBrowser.RegisterDisplay(NUnit.UiException.Controls.IErrorDisplay)">
            <summary>
            Populates ErrorBrowser with the new display passed in parameter.
            If ErrorBrowser is empty, the display becomes automatically the
            new selected display.
            </summary>
            <param name="display"></param>
        </member>
        <member name="M:NUnit.UiException.Controls.ErrorBrowser.ClearAll">
            <summary>
            Removes all display from ErrorBrowser.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.ErrorBrowser.StackTraceSource">
            <summary>
            Use this property to get or set the new stack trace details.
            The changes are repercuted on the registered displays.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.ErrorBrowser.SelectedDisplay">
            <summary>
            Gets the selected display.
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.ErrorList">
            <summary>
            Displays a control which implements IStackTraceView.
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.IStackTraceView">
            <summary>
            The interface through which SourceCodeDisplay interacts with the error list.
            
            Direct implementations are:
                - ErrorList
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.ErrorList.#ctor">
            <summary>
            Builds a new instance of ErrorList.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.ErrorList.Items">
            <summary>
            Gives access to the item collection.
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.ErrorPanelLayout">
            <summary>
            Provides the panels and layout of ErrorBrowser as
            shown below:
            
            +--------------------------------------------+
            |                  Toolbar                   |
            +--------------------------------------------+
            |                                            |
            |                                            |
            |                  Content                   |
            |                                            |
            |                                            |
            +--------------------------------------------+
            
            Toolbar: the control which shows buttons
                     to alternate between the StackTraceDisplay
                     and BrowserDisplay back and forth.
                     The control collection of this control
                     never changes.
                          
            Option:  a free place holder to show subfeature
                     for a specific display (e.g: StackTraceDisplay
                     or BrowserDisplay). This control's
                     collection changes in relation with the
                     selected display.
                          
            Content: the place where to put the main content
                     for the current display. This control's 
                     collection changes in regard of the
                     selected display.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.ErrorPanelLayout.Toolbar">
            <summary>
            Gets or sets the control to be placed in Toolbar location.
            Pass null to reset Toolbar to its default state.
            
            When setting a control, the control's hierarchy of
            ErrorPanelLayout is automatically updated with the
            passed component. Besides, the passed component is
            automatically positionned to the right coordinates.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.ErrorPanelLayout.Option">
            <summary>
            Gets or sets the control to be placed in Option location.
            Pass null to reset Option to its default state.
            
            When setting a control, the control's hierarchy of
            ErrorPanelLayout is automatically updated with the
            passed component. Besides, the passed component is
            automatically positionned to the right coordinates.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.ErrorPanelLayout.Content">
            <summary>
            Gets or sets the control to be placed in Content location.
            Pass null to reset content to its default state.
            
            When setting a control, the control's hierarchy of
            ErrorPanelLayout is automatically updated with the
            passed component. Besides, the passed component is
            automatically positionned to the right coordinates.
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.ErrorToolbar">
            <summary>
            A specialization of a ToolStrip to show instances of IErrorDisplay.
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.ErrorToolbar.NewStripButton(System.Boolean,System.String,System.Drawing.Image,System.EventHandler)">
            <summary>
            Create and configure a ToolStripButton.
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.ErrorToolbar.Register(NUnit.UiException.Controls.IErrorDisplay)">
            <summary>
            Register a new IErrorDisplay in the toolbar.
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.ErrorToolbar.Clear">
            <summary>
            Clears all IErrorDisplay in the toolbar.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.ErrorToolbar.Count">
            <summary>
            Gets the count of IErrorDisplay instances.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.ErrorToolbar.Item(System.Int32)">
            <summary>
            Gets the display at the given index.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.ErrorToolbar.SelectedDisplay">
            <summary>
            Gets or sets the IErrorDisplay to be selected.
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.IErrorDisplay">
            <summary>
            This interface describes a feature that can be added to the ErrorWindow
            in order to show relevant information about failures/errors after a
            test suite run.
                Clients who wants to add their own display should implement this
            interface and register their instance to ErrorBrowser at run-time.
            
            Direct known implementations are:
                StackTraceDisplay
                SourceCodeDisplay
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.IErrorDisplay.OnStackTraceChanged(System.String)">
            <summary>
            Called whenever the user changes the error selection in the detail list.
            This method is called to allow the display to update its content according
            the given stack trace.
            </summary>
            <param name="stackTrace"></param>
        </member>
        <member name="P:NUnit.UiException.Controls.IErrorDisplay.PluginItem">
            <summary>
            Gives access to the ToolStripButton that enables this display.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.IErrorDisplay.OptionItems">
            <summary>
            Gives access to a possibly null collection of option controls that will
            be shown when this display has the focus.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.IErrorDisplay.Content">
            <summary>
            Gives access to the content control of this display.
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.ErrorListOrderPolicy">
            <summary>
            This enum defines indicators telling how instances of IStackTraceView
            should deal with item order in their list.
            </summary>
        </member>
        <member name="F:NUnit.UiException.Controls.ErrorListOrderPolicy.InitialOrder">
            <summary>
            Tells IStackTraceView to order items in the list in the same
            order they appear in the stack trace.
            </summary>
        </member>
        <member name="F:NUnit.UiException.Controls.ErrorListOrderPolicy.ReverseOrder">
            <summary>
            Tells IStackTraceView to order items in the list in the reverse
            order they appear in the stack trace. At Test Driven Development time
            this value is useful to point out the location where a test is expected
            to fail.
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.PaintLineLocation">
            <summary>
            Encapsulate data to draw a line of text.
            </summary>
        </member>
        <member name="F:NUnit.UiException.Controls.PaintLineLocation._lineIndex">
            <summary>
            Index of the current line.
            </summary>
        </member>
        <member name="F:NUnit.UiException.Controls.PaintLineLocation._text">
            <summary>
            The string value at this line.
            </summary>
        </member>
        <member name="F:NUnit.UiException.Controls.PaintLineLocation._location">
            <summary>
            A client coordinate from where beginning the drawing.
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.PaintLineLocation.#ctor(System.Int32,System.String,System.Drawing.PointF)">
            <summary>
            Build a new instance of this object given some data.
            </summary>
            <param name="lineIndex">Index of the current line.</param>
            <param name="text">String value at this line.</param>
            <param name="location">Client coordinate where beginning the drawing.</param>
        </member>
        <member name="P:NUnit.UiException.Controls.PaintLineLocation.LineIndex">
            <summary>
            Index of the current line.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.PaintLineLocation.Text">
            <summary>
            String value at this line.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.PaintLineLocation.Location">
            <summary>
            Client coordinate where to beginning the drawing.
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.SourceCodeDisplay">
            <summary>
            Implements IErrorDisplay and displays data about failures and error
            after a test suite run. SourceCodeDisplay is a control composed of two
            views. 
            
            The first view displays the stack trace in an ordered list of items
            where each item contains the context about a specific failure (file, class
            method, line number).
            
            The second view displays a CodeBox control and shows the source code
            of one element in this list when the localization is available.
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.SourceCodeDisplay.#ctor">
            <summary>
            Builds a new instance of SourceCodeDisplay.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.SourceCodeDisplay.AutoSelectFirstItem">
            <summary>
            Gets or sets a value telling whether or not to select automatically
            the first localizable item each time the stack trace changes.
              When set to true, the first localizable item will be selected 
            and the source code context for this item displayed automatically.
            Default is True.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.SourceCodeDisplay.ListOrderPolicy">
            <summary>
            Gets or sets a value defining the order of the item in the error list.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.SourceCodeDisplay.SplitOrientation">
            <summary>
            Gets or sets the splitter orientation in the SourceCodeDisplay.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.SourceCodeDisplay.SplitterDistance">
            <summary>
            Gets or sets the splitter distance in the SourceCodeDisplay.
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.SplitterBox">
            <summary>
            Implements a place holder that can be splitted either horizontally or vertically.
            The SplitterBox is layouted with two place holders, respectively named Control1
            and Control2 where clients can put their controls.
            
            Unlike SplitContainer, the place holders in SplitterBox are the client controls
            itself. The direct consequence is the layout policy will be to dock the client
            controls in filling the maximum possible space.
            
            SplitterBox also add three buttons on the splitter bar that to change the split
            orientation and collapse either Control1 or Control2. The example below shows
            how to intialize and set up SplitterBox with two controls.
            <code>
            // creates a new SplitterBox, with a vertical split
            // and position splitter to appear in the middle of the window
            SplitterBox splitter = new SplitterBox();
            splitter.Orientation = Orientation.Vertical;
            splitter.SplitterDistance = 0.5f;
            splitter.Control1 = oneControl;
            splitter.Control2 = anotherControl;
            </code>
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.SplitterBox.#ctor">
            <summary>
            Creates a new SplitterBox.
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.SplitterBox.PointToSplit(System.Int32,System.Int32)">
            <summary>
            Sets a new location for the splitter expressed as client coordinate.
            </summary>
            <param name="x">The new location in pixels when orientation is set to Vertical.</param>
            <param name="y">The new location in pixels when orientation is set to Horizontal.</param>
        </member>
        <member name="M:NUnit.UiException.Controls.SplitterBox.CollapseControl1">
            <summary>
            Collapses Control1.
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.SplitterBox.CollapseControl2">
            <summary>
            Collapses Control2.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.SplitterBox.Orientation">
            <summary>
            Gets or sets the orientation of the splitter in the SplitterBox.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.SplitterBox.SplitterDistance">
            <summary>
            Gets or sets the splitter distance expressed as a float number in the
            range [0 - 1]. A value of 0 collapses Control1 and makes Control2 take
            the whole space in the window. A value of 1 collapses Control2 and makes
            Control1 take the whole space in the window. A value of 0.5 makes the
            splitter appear in the middle of the window.
            
            Values that don't fall in [0 - 1] are automatically clipped to this range.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.SplitterBox.Control1">
            <summary>
            Gets or sets the "first" control to be shown. This control will appear
            either at the top or on the left when the orientation is respectively
            vertical or horizontal.
              If the value is not null, the control will automatically be added
            to the SplitterBox's hierarchy of controls.
              If the value is null, the former control is removed and replaced
            by a default and empty area.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.SplitterBox.Control2">
            <summary>
            Gets or sets the "second" control to be shown. This control will appear
            either at the bottom or on the right when the orientation is respectively
            vertical or horizontal.
              If the value is not null, the control will automatically be added
            to the SplitterBox's hierarchy of controls.
              If the value is null, the former control is removed and replaced
            by a default and empty area.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Controls.SplitterBox.SplitterRectangle">
            <summary>
            Gets the rectangle occupied with the splitter.
            </summary>
        </member>
        <member name="T:NUnit.UiException.Controls.StackTraceDisplay">
            <summary>
            Implements IErrorDisplay to show the actual stack trace in a TextBox control.
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.StackTraceDisplay.#ctor">
            <summary>
            Builds a new instance of StackTraceDisplay.
            </summary>
        </member>
        <member name="M:NUnit.UiException.Controls.StackTraceDisplay.CopyToClipBoard">
            <summary>
            Copies the actual stack trace to the clipboard.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.FormattedCode">
            <summary>
            (Formerly named CSCode)
            
            Implements ITextManager and adds new behaviors to provide support for basic
            syntax coloring. 
            </summary>
        </member>
        <member name="T:NUnit.UiException.ITextManager">
            <summary>
            Provides an abstract way to manipulate a text as a whole and as separate
            sequences that can randomly be accessed one line at a time.
            </summary>
        </member>
        <member name="M:NUnit.UiException.ITextManager.GetTextAt(System.Int32)">
            <summary>
            Gets a string filled with all characters in the line
            at the specified startingPosition without the trailing '\r\n' characters.
            </summary>
            <param name="lineIndex"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.UiException.ITextManager.LineCount">
            <summary>
            Gets the number of line in text managed by this object.
            </summary>
        </member>
        <member name="P:NUnit.UiException.ITextManager.MaxLength">
            <summary>
            Gets the character count of the longest line in the text managed
            by this object.
            </summary>
        </member>
        <member name="P:NUnit.UiException.ITextManager.Text">
            <summary>
            Gets the complete text managed by this object.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.FormattedCode._codeInfo">
            <summary>
            Keeps tracks of the text and the data used by the syntax coloring feature.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.FormattedCode._maxLength">
            <summary>
            Stores the character count of the longest line in this text.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.FormattedCode.#ctor">
            <summary>
            Builds a new instance of FormattedCode.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.FormattedCode.NewCodeInfo">
            <summary>
            Builds a new instance of CodeInfo.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.FormattedCode.GetTextAt(System.Int32)">
            <summary>
            Gets the text at the specified line.
            </summary>
            <param name="lineIndex">A zero based startingPosition.</param>
            <returns>The text at the specified line startingPosition.</returns>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.FormattedCode.CheckData(NUnit.UiException.CodeFormatters.FormattedCode)">
            <summary>
            An utility method that check data consistency. The operation
            raises an exception if an error is found.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.FormattedCode.Text">
            <summary>
            Gets the text currently managed by this object.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.FormattedCode.LineCount">
            <summary>
            Gets the line count in the text currently
            managed by this object.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.FormattedCode.MaxLength">
            <summary>
            Gets the character count of the longest line
            in this text.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.FormattedCode.Item(System.Int32)">
            <summary>
            Gives access to the collection of ClassifiedToken at the specified lineIndex.
            </summary>
            <param name="lineIndex">A zero based startingPosition.</param>
            <returns>The ClassifiedTokenCollection instance at this startingPosition.</returns>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.FormattedCode.CodeInfo">
            <summary>
            A naive attempt to modelize a structure of data that manages the text to be
            displayed and extra data to make basic syntax coloring at rendering time,
            while keeping a low memory footprint.
            
            At rendering time, CodeInfo is used to make a link between the text to be drawn
            and the brush color to be used during the process. So it is possible to distinguishes
            code, comments, keywords and strings.
              Currently, CodeInfo is used to split the text into a collection of couple of data,
            where each couple is composed of:
                - a string of characters
                - a value (called tag) that classifies this string from 0 to 3.
                  Where 0 corresponds to 'Code', 1 to 'Keyword' and so on.
             These couples are named 'ClassifiedToken'. At rendering time, the process can link each
             of these values to a particular System.Drawing.Brush instance and display text
             differently.
             
             However, keeping track of all these couples at any time could have a significative
             impact on memory especially for big files. Therefore, instead of storing all theses couples,
             CodeInfo stores just primitive information that allow to build ClassifiedToken instances on the fly.        
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.FormattedCode.CodeInfo.Text">
            <summary>
            Holds the entire text as a simple string.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.FormattedCode.CodeInfo.IndexArray">
            <summary>
            Array of character indexes that refers to
            the field "Text". Each value in this array
            must be interpreted as the starting index position
            in the string into Text.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.FormattedCode.CodeInfo.TagArray">
            <summary>
            Array of ClassificationTag values held as a
            byte array. There is a one-to-one correspondance
            with 'IndexArray'. i.e.: TagArray[0] refers to the
            ClassificationTag value for string sequence at
            IndexArray[0]. TagArray[1] refers value to IndexArray[1] and
            so on... Hence, the following condition:
              - IndexArray.Count == TagArray.Count must be verified.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.FormattedCode.CodeInfo.LineArray">
            <summary>
            This index_array is used to easily locate the start of each
            line of text, for instance: startingPosition[0] refers to line startingPosition 0,
            startingPosition[1] refers to line startingPosition 1 and so on...
               However, there is a small indirection in that this index_array
            doesn't directly hold string indexes but refers to the startingPosition
            of the item to be used in 'IndexArray'.
               Therefore, LineArray[0] gives access to the startingPosition of the
            IndexArray's item to be used to get the corresponding character
            position. Hence, line 0 starts at: IndexArray[LineArray[0]]
            line 1: IndexArray[LineArray[1]] and so on...
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.ClassifiedTokenCollection">
            <summary>
            (formerly named CSTokenCollection)
            
            Manages an ordered collection of ClassifiedToken present in one line of text.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.ClassifiedTokenCollection._token">
            <summary>
            Target location when building a ClassifiedToken instance on the fly.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.ClassifiedTokenCollection._info">
            <summary>
            Keeps tracks of the data source.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.ClassifiedTokenCollection._lineIndex">
            <summary>
            Store the current line startingPosition.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.ClassifiedTokenCollection.#ctor">
            <summary>
            This class requires subclassing.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.ClassifiedTokenCollection._populateToken(System.Int32,System.Int32,NUnit.UiException.CodeFormatters.ClassifiedTokenCollection.InternalToken)">
            <summary>
            Gets the part of the text at the given position.
            The returned string can be composed of one or severals words 
            all with the same style.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.ClassifiedTokenCollection._getTagFromByteValue(System.Byte)">
            <summary>
            Converts the given value into the matching ClassificationTag.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.ClassifiedTokenCollection.Count">
            <summary>
            Gets the number of ClassifiedToken present in this line of text.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.ClassifiedTokenCollection.Item(System.Int32)">
            <summary>
            Gets the ClassifiedToken instance at the specified startingPosition.
            Warning: this indexer always return the same instance.
            To keep data safe, it is strongly recommanded to make
            a deep copy of the returned ClassifiedToken.
            </summary>
            <param name="startingPosition">A zero based value in the range: [0 - Count[</param>
            <returns>The ClassifiedToken at this startingPosition.</returns>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.ClassifiedTokenCollection.Text">
            <summary>
            Return a string filled with the text present at the current line startingPosition.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.ClassifiedToken">
            <summary>
            (formerly named CSToken)
            
            Classifies a string and make it falls into one of the categories below:
              - Code (the value should be interpreted as regular code)
              - Keyword (the value should be interpreted as a language keyword)
              - Comment (the value should be interpreted as comments)
              - String (the value should be interpreted as a string)
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.ClassifiedToken._text">
            <summary>
            The string held by this token.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.ClassifiedToken._tag">
            <summary>
            The matching tag.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.ClassifiedToken._indexStart">
            <summary>
            Starting startingPosition of the string.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.ClassifiedToken.#ctor">
            <summary>
            This class cannot be build directly.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.ClassifiedToken.Equals(System.Object)">
            <summary>
            Returns true if 'obj' is an instance of ClassifiedToken 
            that contains same data that the current instance.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.ClassifiedToken.Text">
            <summary>
            Gets the string value.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.ClassifiedToken.Tag">
            <summary>
            Gets the classification value for the string in Text.
              - Code:  Text should be interpreted as regular code,
              - Keyword: Text should be interpreted as a language keyword,
              - Comments: Text should be interpreted as comments,
              - String: Text should be interpreted as a string.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.ClassifiedToken.IndexStart">
            <summary>
            Gets the string's starting startingPosition.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.CSharpCodeFormatter">
            <summary>
            (formerly named CSParser)
            
            Helper class to build and setup FormattedCode instances from formatted C# texts.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.CSharpCodeFormatter._info">
            <summary>
            The underlying data object of a FormattedCode instance.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CSharpCodeFormatter.#ctor">
            <summary>
            Builds a new instance of CSharpCodeFormatter.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CSharpCodeFormatter.Format(System.String)">
            <summary>
            Interprets and highlight the given string as C# code
            and return the resulting FormattedCode instance.
            </summary>
            <param name="csharpCode">A string read as C# code.
            This parameter must not be null.</param>
            <returns>A FormattedCode instance containing data
            to highlight the text with basic syntax coloring.</returns>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CSharpCodeFormatter.PreProcess(System.String)">
            <summary>
            Prepare input text for the parsing stage.
            </summary>
            <param name="text">The text to be pre-processed.</param>
            <returns>A string ready to be parsed.</returns>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CSharpCodeFormatter.Parse(System.String)">
            <summary>
            Analyzes the input text as C# code. This method doesn't return anything.
            Callers may retrieve the result of this process by querying the FormattedCode property.
              Passing null results in raising an exception.
            </summary>
            <param name="csharp">The text to be analyzed.</param>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CSharpCodeFormatter._flushToken(NUnit.UiException.CodeFormatters.ClassifiedToken,NUnit.UiException.CodeFormatters.FormattedCode.CodeInfo)">
            <summary>
            Appends data in token at the end of output.
            </summary>
            <param name="token">Token to be merged with output.</param>
            <param name="output">Target location.</param>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.CSharpCodeFormatter.CSCode">
            <summary>
            Gets a new instance of FormattedCode.
            To get useful FormattedCode instances, caller should ensure
            that TryParse() was invoked first.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.CSharpCodeFormatter.Language">
            <summary>
            Returns "C#"
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.CSharpCodeFormatter.InternalFormattedCode">
            <summary>
            Implements FormattedCode.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.CSharpCodeFormatter.ConcreteToken">
            <summary>
            Implements ClassifiedToken.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CSharpCodeFormatter.ConcreteToken.#ctor(System.String,NUnit.UiException.CodeFormatters.ClassificationTag,System.Int32,System.Int32)">
            <summary>
            Builds and setup a new instance of ClassifiedToken.
            </summary>
            <param name="text">The text in this token.</param>
            <param name="tag">The smState tag.</param>
            <param name="indexStart">Starting startingPosition of the string from the beginning of the text.</param>
            <param name="lineIndex">The line startingPosition.</param>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.CSharpCodeFormatter.ConcreteToken.CanMerge(System.Int32,NUnit.UiException.CodeFormatters.ClassificationTag)">
            <summary>
            Tests whether or not the given lineIndex and tag are compatible with
            the ones in the current Token.
            </summary>
            <param name="lineIndex">A line startingPosition.</param>
            <param name="tag">A smState tag.</param>
            <returns>A boolean that says whether these data are compatible.</returns>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.ClassificationTag">
            <summary>
            This enum indicate the kind of a string sequence.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.ClassificationTag.Code">
            <summary>
            The string refer to C# source code.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.ClassificationTag.Keyword">
            <summary>
            The string refers to C# keywords.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.ClassificationTag.Comment">
            <summary>
            The string refers to C# comments.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.ClassificationTag.String">
            <summary>
            The string refers to a string/char value.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.Lexer">
            <summary>
            Splits a text formatted as C# code into a list of identified tokens.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.Lexer._position">
            <summary>
            Reading position in the current text.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.Lexer._text">
            <summary>
            Text where to fetch tokens.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.Lexer._token">
            <summary>
            Last identified token.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.Lexer._dictionary">
            <summary>
            Holds pre-defined sequences.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.Lexer.#ctor">
            <summary>
            Builds a new instance of Lexer.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.Lexer.Clear">
            <summary>
            Clear all previously defined sequences.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.Lexer.Parse(System.String)">
            <summary>
            Setup the text to be splitted in tokens. 
            
            Client code must call Next() first before getting
            the first available token (if any).
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.Lexer.HasNext">
            <summary>
            Checks whether there are none visited tokens.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.Lexer.Next">
            <summary>
            Call this method to visit iteratively all tokens in the source text.
            Each time a token has been identifier, the method returns true and the
            identified Token is place under the CurrentToken property.
              When there is not more token to visit, the method returns false
            and null is set in CurrentToken property.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.Lexer.CurrentToken">
            <summary>
            Gets the token identifed after a call to Next().
            The value may be null if the end of the text has been reached.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.LexToken">
            <summary>
            This class is used to make the link between a string and a LexerTag value.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.LexToken._text">
            <summary>
            The string in this token.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.LexToken._tag">
            <summary>
            The current tag.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.LexToken._start">
            <summary>
            The starting startingPosition.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.LexToken.Text">
            <summary>
            Gets the string value.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.LexToken.Tag">
            <summary>
            Gets the tag value
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.LexToken.IndexStart">
            <summary>
            Gets the starting startingPosition of the string.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.Lexer.InternalToken.#ctor(System.Int32)">
            <summary>
            Builds a concrete instance of LexToken. By default, created instance
            are setup with LexerTag.Text value.
            </summary>
            <param name="startingPosition">The starting startingPosition of this token in the text.</param>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.Lexer.InternalToken.AppendsChar(System.Char)">
            <summary>
            Appends this character to this token.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.Lexer.InternalToken.PopChars(System.Int32)">
            <summary>
            Removes the "count" ending character of this token.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.Lexer.InternalToken.SetLexerTag(NUnit.UiException.CodeFormatters.LexerTag)">
            <summary>
            Set a new value to the Tag property.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.LexerTag">
            <summary>
            This enum defines the list of all tags
            that can be assigned to a particular string.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.LexerTag.Text">
            <summary>
            All sequences but the ones below
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.LexerTag.Separator">
            <summary>
            White characters: ' ' \t \n
            and other separators like:
                - '[' ']' '(' ')' ';'
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.LexerTag.EndOfLine">
            <summary>
            Char: \n
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.LexerTag.CommentC_Open">
            <summary>
            string: /*
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.LexerTag.CommentC_Close">
            <summary>
            string: */
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.LexerTag.CommentCpp">
            <summary>
            string: //
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.LexerTag.SingleQuote">
            <summary>
            Char: '
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.LexerTag.DoubleQuote">
            <summary>
            Char: "
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.TokenClassifier">
            <summary>
            Used at an internal stage to convert LexToken into ClassifiedToken. This class provides
            a very basic semantic analysis to make text following in one the categories below:
                - regular code,
                - developper comments,
                - strings / character.
            The output of this class is used by CSharpCodeFormatter to achieve the basic syntax coloring.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.TokenClassifier.SMSTATE_CODE">
            <summary>
            State code for the smState machine.
            State when reaching a code block.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.TokenClassifier.SMSTATE_CCOMMENT">
            <summary>
            State code for the smState machine.
            State when reaching a C comment block.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.TokenClassifier.SMSTATE_CPPCOMMENT">
            <summary>
            State code for the smState machine.
            State when reaching a C++ comment block.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.TokenClassifier.SMSTATE_CHAR">
            <summary>
            State code for the smState machine.
            State when reaching a char surrounded by single quotes.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.TokenClassifier.SMSTATE_STRING">
            <summary>
            State code for the smState machine.
            State when reaching a string surrounded by double quotes.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.TokenClassifier._sm">
            <summary>
            A finite smState machine where states are: SMSTATE values and
            transitions are LexToken.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.TokenClassifier._sm_output">
            <summary>
            The current StateMachine's SMTATE code.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.TokenClassifier._tags">
            <summary>
            Makes a link between SMSTATE code and ClassificationTag.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.TokenClassifier._keywords">
            <summary>
            Contains the list of C# keywords.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.TokenClassifier._escaping">
            <summary>
            Indicate whether Lexer is in escaping mode.
            This flag is set to true when parsing "\\" and
            can influate on the following LexerTag value.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.TokenClassifier.#ctor">
            <summary>
            Build a new instance of TokenClassifier.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.TokenClassifier.Reset">
            <summary>
            Reset the StateMachine to default value. (code block).
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.TokenClassifier.Classify(NUnit.UiException.CodeFormatters.LexToken)">
            <summary>
            Classify the given LexToken into a ClassificationTag.
            </summary>
            <param name="token">The token to be classified.</param>
            <returns>The smState value.</returns>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.TokenClassifier.AcceptLexToken(NUnit.UiException.CodeFormatters.LexToken)">
            <summary>
            Classify the given token and get its corresponding SMSTATE value.
            </summary>
            <param name="token">The LexToken to be classified.</param>
            <returns>An SMSTATE value.</returns>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.TokenClassifier.GetSMSTATE(System.Int32,NUnit.UiException.CodeFormatters.LexerTag)">
            <summary>
            Gets the SMSTATE under the "transition" going from "smState".
            </summary>
            <param name="smState">The current smState.</param>
            <param name="transition">The current LexerTag.</param>
            <returns>The new smState.</returns>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.TokenClassifier.GetTokenSMSTATE(System.Int32,NUnit.UiException.CodeFormatters.LexerTag)">
            <summary>
            Gets a token SMSTATE under the "transition" going from "smState".
            </summary>
            <param name="smState">The current smState machine.</param>
            <param name="transition">The LexerTag to be classified.</param>
            <returns>The LexerTag's classification.</returns>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.TokenClassifier.Escaping">
            <summary>
            Tells whether TokenClassifier is currently in escaping mode. When true,
            this flag causes TokenClassifier to override the final classification
            of a basic entity (such as: ") to be treated as normal text instead of
            being interpreted as a string delimiter.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.TokenClassifier.TransitionData">
            <summary>
            Defines a transition (of a state machine).
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.TokenClassifier.TransitionData.Transition">
            <summary>
            The current transition.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.TokenClassifier.TransitionData.SMSTATE">
            <summary>
            The SMSTATE code reached when following that transition.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.TokenClassifier.TransitionData.TokenSMSTATE">
            <summary>
            The TokenSMSTATE reached when following that transition.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.TokenClassifier.State">
            <summary>
            Defines a state (of a state machine) and its associated transitions.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.TokenClassifier.StateMachine">
            <summary>
            A finite state machine. Where states are SMSTATE codes and
            transitions are LexTokens.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.TokenClassifier.StateMachine.GetSMSTATE(System.Int32,NUnit.UiException.CodeFormatters.LexerTag)">
            <summary>
            Follow "transition" going from "smState" and returns reached SMSTATE.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.TokenClassifier.StateMachine.GetTokenSMSTATE(System.Int32,NUnit.UiException.CodeFormatters.LexerTag)">
            <summary>
            Follow "transition" going from "smState" and returns reached TokenSMSTATE.
            </summary>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.TokenDictionary">
             <summary>
             TokenDictionary is responsible for defining and identifying a set of basic
             strings in a given text that have a particular meaning. For instance:
              - Separator, (ex: "{" ";" "]" ...)
              - comment markers, (ex: "//" "/*" "*/")
              - string markers, (ex: '"' '\'')
              - Other -&gt; "Text" (all other strings but the ones aboves).
             To achieve this, TokenDictionary firstly defines methods to register and query which
             strings have been registered. Secondly it defines a convenient method: TryMatch()
             responsible for splitting a given string in one or two parts where the first one will
             fall in one of the above categories. When calling TryMatch() iteratively --see Lexer--,
             one can tag a text into a list of tokens that might server for a semantic analysis.
            
             TokenDictionary and Lexer are both responsible for dealing with the lexical analysis
             job that is the first step to make basic syntax coloring. 
             </summary>
             <see cref="T:NUnit.UiException.CodeFormatters.Lexer">Front class for the lexical analysis.</see>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.TokenDictionary.#ctor">
            <summary>
            Build an empty instance of TokenDictionary.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.TokenDictionary.Add(System.String,NUnit.UiException.CodeFormatters.LexerTag)">
            <summary>
            Build a new token and add it to the list of tokens known by TokenDictionary.
            Tokens must be added from the longest text value to the shortest otherwise
            an exception will be raised.
            </summary>
            <param name="value">
            The token's text value. It must not be null nor empty. It must not be already
            defined neither. If there are tokens already defined, value's length must not
            be longer than the previous added token.
            </param>
            <param name="tag">The token's tag value.</param>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.TokenDictionary.Contains(System.String)">
            <summary>
            Tests whether the given string matches a token known by this instance.
            </summary>
            <param name="value">
                A string to be identify with a token in this instance.
            </param>
            <returns>
                True if the string matches a token's text
                value in this instance, false otherwise.
            </returns>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.TokenDictionary.TryMatch(System.String,System.String)">
             <summary>
             Try to match in "text" + "prediction" a token previously defined with the Add() method.
             Since TryMatch() may return null, it should be called from a loop that scans iteratively
             all characters of an input text.
            
             TryMatch() can put the caller in the two following situations: 
             1) if parameters "text"+"prediction" don't hold any token, null will be returned. In this
                case caller is expected to append to "text" one character more and to shift "prediction"
                by one character ahead before calling TryMatch() again.
             2) if parameters "text"+"prediction" look like [data]TOKEN --where [data] is any other string
                but the ones in tokens-- TryMatch() will return an instance of LexToken which LexToken.Text
                and LexToken.Tag properties will be setup with identified data. In this case caller is
                expected to shift its reading position by the lenght of text put in LexToken.Text. Besides
                "text" parameter should reset its length to 1 again.
             </summary>
             <param name="text">
             At the very beginning, text should be of size 1 and set up with the first character from the
             input text. Each time TryMatch() return null, the following character from the input text
             should be appended to "text". Once a token is returned, this parameter should reset its size
             to 1 and be filled with the character coming just after the identified string.
             This parameter cannot be null.
             </param>
             <param name="prediction">
             This parameter represents a constant sized string that goes just before the data in "text".
             If the caller reach the end of the text and there are not enough character to fill "prediction"
             completely this parameter can be filled with remaining character and eventually becoming empty.
             The size of this string should be equal to the lenght of the longest token defined in
             this instance of TokenDictionary.
             This parameter cannot be null.
             </param>
             <returns>
             The first identifiable LexToken in "text"+"prediction". Returns may be null.
             </returns>
             <see cref="M:NUnit.UiException.CodeFormatters.Lexer.Next">
             To have a look on the loop implementation..
             </see>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.TokenDictionary.PopulateTokenStartingWith(NUnit.UiException.CodeFormatters.LexToken,System.Collections.Generic.List{NUnit.UiException.CodeFormatters.LexToken})">
            <summary>
            Builds the list of all LexToken which text value starts with the one in starter.
            </summary>
            <param name="starter">The token that the reference text.</param>
            <param name="output">The list of tokens which text starts with the one in starter.</param>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.TokenDictionary.Count">
            <summary>
            Gets the token count defined in this instance.
            </summary>
        </member>
        <member name="P:NUnit.UiException.CodeFormatters.TokenDictionary.Item(System.Int32)">
            <summary>
            Gets the token at the given index.
            </summary>
            <param name="index">Index of the token to be returned.</param>
            <returns>The token at the specified index.</returns>
        </member>
        <member name="T:NUnit.UiException.CodeFormatters.TokenDictionary.InternalLexToken">
            <summary>
            Inherits of LexToken and add a public array that holds the list of all other tokens
            which text values start with the one in the current instance.
            </summary>
        </member>
        <member name="F:NUnit.UiException.CodeFormatters.TokenDictionary.InternalLexToken.StartingWith">
            <summary>
            Holds the list of all other tokens which text values start like the one
            in this instance. This array is used to solve ambiguity when finding a
            string that could possibly represents more than one token.
            </summary>
        </member>
        <member name="M:NUnit.UiException.CodeFormatters.TokenDictionary.InternalLexToken.#ctor(System.String,NUnit.UiException.CodeFormatters.LexerTag)">
            <summary>
            Build a new instance of InternalLexToken with the given data.
            </summary>
            <param name="value">The token's text value.</param>
            <param name="tag">The token's tag value.</param>
        </member>
        <member name="T:NUnit.UiException.Properties.Resources">
            <summary>
              Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Properties.Resources.ResourceManager">
            <summary>
              Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
            </summary>
        </member>
        <member name="P:NUnit.UiException.Properties.Resources.Culture">
            <summary>
              Remplace la propriété CurrentUICulture du thread actuel pour toutes
              les recherches de ressources à l'aide de cette classe de ressource fortement typée.
            </summary>
        </member>
        <member name="T:NUnit.UiException.StackTraceAnalysers.FunctionParser">
            <summary>
            This class is responsible for locating and initializing
            RawError.Function property with the function name as it
            is mentioned in the stack trace line.
              To work correclty, the class makes some
            assumptions concerning the function format.
              A function name is made of two parts: [name][args]
            where [name] refers to a string of characters that doesn't
            contain ' ' and [args] refers to a string delimited by
            '(' and ')'.
            </summary>
        </member>
        <member name="M:NUnit.UiException.StackTraceAnalysers.FunctionParser.TryParse(NUnit.UiException.StackTraceParser,NUnit.UiException.StackTraceAnalyzers.RawError)">
            <summary>
            Try to match a function name by reading RawError.Input.
            If a match is found, the method outputs the result into
            RawError.Function and returns true.
            </summary>
            <param name="parser">An instance of parser, this parameter
            cannot be null.</param>
            <param name="args">An instance of RawError. This parameter
            cannot be null.</param>
            <returns>True if a match occurs, false otherwise.</returns>
        </member>
        <member name="T:NUnit.UiException.StackTraceAnalysers.LineNumberParser">
            <summary>
            LineNumberParser tries to match a line number information
            given in a stack trace line. It relies on the following
            assumptions:
                - the line number is located after the last ':' character,
                - the line number is not part of a word,
                - there cannot be more than one line number after the last ':'
                - the line number must be > 0
            </summary>
        </member>
        <member name="M:NUnit.UiException.StackTraceAnalysers.LineNumberParser.TryParse(NUnit.UiException.StackTraceParser,NUnit.UiException.StackTraceAnalyzers.RawError)">
            <summary>
            Reads args.Input and try to locate a line number information.
            If a match occurs the method fills args.Line with the identified
            integer.
            </summary>
            <param name="parser">The StackTraceParser instance. The
            parameter cannot be null.</param>
            <param name="args">The RawError instance from where read and
            write Input and Line properties. The parameter cannot be null.</param>
            <returns>True if a match occurs, false otherwise.</returns>
        </member>
        <member name="T:NUnit.UiException.StackTraceAnalysers.PathCompositeParser">
            <summary>
            Encapsulates a set of algorithms that try to match and locate
            a path value coming from a raw stack trace line.
            </summary>
        </member>
        <member name="F:NUnit.UiException.StackTraceAnalysers.PathCompositeParser._array">
            <summary>
            This array encapsulates a list of classes that inherit from
            IErrorParser. Each instance is made for handling a path from
            a specific file system such as: Windows or UNIX.
            </summary>
        </member>
        <member name="M:NUnit.UiException.StackTraceAnalysers.PathCompositeParser.#ctor">
            <summary>
            Build a new instance of PathParser.
            </summary>
        </member>
        <member name="M:NUnit.UiException.StackTraceAnalysers.PathCompositeParser.TryParse(NUnit.UiException.StackTraceParser,NUnit.UiException.StackTraceAnalyzers.RawError)">
            <summary>
            Try to read from a stack trace line a path value given either
            under the form of a Windows path or a UNIX path. If a match occurs
            the method fills args.Function with the identified data.
            </summary>
            <param name="parser">The instance of StackTraceParser, this parameter
            cannot be null.</param>
            <param name="args">The instance of RawError from where read and write
            RawError.Input and RawError.Function properties. This parameter
            cannot be null.</param>
            <returns>True if a match occurs, false otherwise.</returns>
        </member>
        <member name="M:NUnit.UiException.StackTraceAnalysers.PathCompositeParser.IndexOfTrailingColon(System.String,System.Int32)">
            <summary>
            Helper method that locate the trailing ':' in a stack trace row.
            </summary>
            <returns>The index position of ':' in the string or -1 if not found.</returns>
        </member>
        <member name="P:NUnit.UiException.StackTraceAnalysers.PathCompositeParser.WindowsPathParser">
            <summary>
            Gives access to the IErrorParser instance that handles
            Windows like path values.
            </summary>
        </member>
        <member name="P:NUnit.UiException.StackTraceAnalysers.PathCompositeParser.UnixPathParser">
            <summary>
            Gives access to the IErrorParser instance that handles
            Unix like path values.
            </summary>
        </member>
        <member name="T:NUnit.UiException.StackTraceAnalysers.UnixPathParser">
            <summary>
            This class is responsible for extracting a Unix like path value
            from a line of the given stack trace. This class bases its work
            on the following assumptions:
            - paths are supposed to be absolute,
            - paths are supposed to be made of two parts: [/][path]
            Where [/] refers to the Unix mount point 
            and [path] a non empty string of characters that extends to the
            trailing ':' (as given in stack trace).
            </summary>
        </member>
        <member name="M:NUnit.UiException.StackTraceAnalysers.UnixPathParser.TryParse(NUnit.UiException.StackTraceParser,NUnit.UiException.StackTraceAnalyzers.RawError)">
            <summary>
            Locates and fills RawError.Path property with the first
            Unix path values found from RawError.Input property.
            </summary>
            <param name="parser">The stack trace parser. This parameter
            must not be null.</param>
            <param name="args">The RawError from which retrieving and
            filling Input and Path properties. This parameter cannot not
            be null.</param>
            <returns>True if a match occured, false otherwise.</returns>
        </member>
        <member name="T:NUnit.UiException.StackTraceAnalysers.WindowsPathParser">
            <summary>
            This class is responsible for extracting a Windows like path value
            from a line of the given stack trace. This class bases its work
            on the following assumptions:
            - paths are supposed to be absolute,
            - paths are supposed to be made of two parts: [drive][path]
            Where [drive] refers to a sequence like: "C:\\"
            and [path] a non empty string of characters that extends to the
            trailing ':' (as given in stack trace).
            </summary>
        </member>
        <member name="M:NUnit.UiException.StackTraceAnalysers.WindowsPathParser.TryParse(NUnit.UiException.StackTraceParser,NUnit.UiException.StackTraceAnalyzers.RawError)">
            <summary>
            Locates and fills RawError.Path property with the first
            Windows path values found from RawError.Input property.
            </summary>
            <param name="parser">The stack trace parser. This parameter
            must not be null.</param>
            <param name="args">The RawError from which retrieving and
            filling Input and Path properties. This parameter cannot not
            be null.</param>
            <returns>True if a match occured, false otherwise.</returns>
        </member>
        <member name="T:NUnit.UiException.DefaultTextManager">
            <summary>
            This is a default implementation of ITextManager interface.
            </summary>
        </member>
        <member name="F:NUnit.UiException.DefaultTextManager._text">
            <summary>
            Hold the text to be managed by this instance.
            </summary>
        </member>
        <member name="F:NUnit.UiException.DefaultTextManager._lines">
            <summary>
            Array of strings where each string is a line in this text.
            </summary>
        </member>
        <member name="F:NUnit.UiException.DefaultTextManager._maxLength">
            <summary>
            Stores the character count of the longest line in this text.
            </summary>
        </member>
        <member name="M:NUnit.UiException.DefaultTextManager.#ctor">
            <summary>
            Builds a new instance of TextManager.
            </summary>
        </member>
        <member name="M:NUnit.UiException.DefaultTextManager.GetTextAt(System.Int32)">
            <summary>
            Gets the line of text at the specified startingPosition.
            (zero based startingPosition).
            </summary>
            <param name="lineIndex">The startingPosition of the line to get.</param>
            <returns>A string that represents the content of the specified line without
            the trailing characters.</returns>
        </member>
        <member name="M:NUnit.UiException.DefaultTextManager._populateLineCollection(System.String)">
            <summary>
            setup member data with the input text.
            </summary>
        </member>
        <member name="M:NUnit.UiException.DefaultTextManager.GetEnumerator">
            <summary>
            Gets an IEnumerator that iterate through each line of the
            current text. 
            </summary>
            <returns>An IEnumerator that iterate through each line of this text.</returns>
        </member>
        <member name="P:NUnit.UiException.DefaultTextManager.LineCount">
            <summary>
            Gets the number of lines in the text.
            </summary>
        </member>
        <member name="P:NUnit.UiException.DefaultTextManager.Text">
            <summary>
            Gets or sets the text to be managed by this object.
            </summary>
        </member>
        <member name="P:NUnit.UiException.DefaultTextManager.MaxLength">
            <summary>
            Gets the character count of the longest line in this text.
            </summary>
        </member>
        <member name="T:NUnit.UiException.ErrorItem">
            <summary>
            (Formerly named ExceptionItem)
            
            This is the output analysis of one error line coming from
            a stack trace that still gathers the same data but in more
            convenient way to be read from.
              An ErrorItem represents one error with possible location
            informations such as:
              - filename where the error has occured
              - file's line number
              - method name
            </summary>
        </member>
        <member name="F:NUnit.UiException.ErrorItem._path">
            <summary>
            An access path to the source file referred by this item.
            </summary>
        </member>
        <member name="F:NUnit.UiException.ErrorItem._fullyQualifiedMethodName">
            <summary>
            The full qualified name of the member method referred by this item.
            </summary>
        </member>
        <member name="F:NUnit.UiException.ErrorItem._line">
            <summary>
            The line index where the exception occured.
            </summary>
        </member>
        <member name="F:NUnit.UiException.ErrorItem._text">
            <summary>
            Store the content of the file pointed by _path.
            </summary>
        </member>
        <member name="M:NUnit.UiException.ErrorItem.#ctor(System.String,System.Int32)">
            <summary>
            Create an instance of ErrorItem that
            has source code attachments.
            </summary>
        </member>
        <member name="M:NUnit.UiException.ErrorItem.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new exception item.
            </summary>
            <param name="path">An absolute path to the source code file.</param>
            <param name="fullMethodName">A full qualified name of a member method.</param>
            <param name="lineNumber">A line index where the exception occured.</param>
        </member>
        <member name="M:NUnit.UiException.ErrorItem.#ctor">
            <summary>
            Create an instance of ErrorItem that doesn't have
            any source code attachments.
            </summary>
        </member>
        <member name="M:NUnit.UiException.ErrorItem.ReadFile">
            <summary>
            Read and return the content of the underlying file. If the file
            cannot be found or read an exception is raised.
            </summary>
        </member>
        <member name="P:NUnit.UiException.ErrorItem.FileName">
            <summary>
            Reads and returns the part of Path that contains the filename
            of the source code file.
            </summary>
        </member>
        <member name="P:NUnit.UiException.ErrorItem.Path">
            <summary>
            Gets the absolute path to the source code file.
            </summary>
        </member>
        <member name="P:NUnit.UiException.ErrorItem.FileExtension">
            <summary>
            Returns the file language - e.g.: the string after
            the last dot or null -
            </summary>
        </member>
        <member name="P:NUnit.UiException.ErrorItem.FullyQualifiedMethodName">
            <summary>
            Gets the full qualified name of the member method.
            </summary>
        </member>
        <member name="P:NUnit.UiException.ErrorItem.MethodName">
            <summary>
            Reads and return the method part from the FullyQualifiedMethodName.
            The value contains the signature of the method.
            </summary>
        </member>
        <member name="P:NUnit.UiException.ErrorItem.BaseMethodName">
            <summary>
            Gets the method name without the argument list.
            </summary>
        </member>
        <member name="P:NUnit.UiException.ErrorItem.ClassName">
            <summary>
            Reads and returns the class part from the FullyQualifiedMethodName.
            </summary>
        </member>
        <member name="P:NUnit.UiException.ErrorItem.LineNumber">
            <summary>
            Gets the line number where the exception occured.
            </summary>
        </member>
        <member name="P:NUnit.UiException.ErrorItem.HasSourceAttachment">
            <summary>
            Gets a boolean that says whether this item has source
            code localization attachments.
            </summary>
        </member>
        <member name="T:NUnit.UiException.ErrorItemCollection">
            <summary>
            (formerly named ExceptionItemCollection)
            
            Manages an ordered set of ErrorItem.
            </summary>
        </member>
        <member name="F:NUnit.UiException.ErrorItemCollection._items">
            <summary>
            The underlying item list.
            </summary>
        </member>
        <member name="M:NUnit.UiException.ErrorItemCollection.#ctor">
            <summary>
            Build a new ErrorItemCollection.
            </summary>
        </member>
        <member name="M:NUnit.UiException.ErrorItemCollection.Add(NUnit.UiException.ErrorItem)">
            <summary>
            Appends the given item to the end of the collection.
            </summary>
            <param name="item">The ErrorItem to be added to the collection.</param>
        </member>
        <member name="M:NUnit.UiException.ErrorItemCollection.Clear">
            <summary>
            Clears all items from this collection.
            </summary>
        </member>
        <member name="M:NUnit.UiException.ErrorItemCollection.Contains(NUnit.UiException.ErrorItem)">
            <summary>
            Checks whether the given item belongs to this collection.
            </summary>
            <param name="item">The item to be checked.</param>
            <returns>True if the item belongs to this collection.</returns>
        </member>
        <member name="M:NUnit.UiException.ErrorItemCollection.Reverse">
            <summary>
            Reverses the sequence order of this collection.
            </summary>
        </member>
        <member name="M:NUnit.UiException.ErrorItemCollection.GetEnumerator">
            <summary>
            Gets an IEnumerator able to iterate through all ExceptionItems
            managed by this collection.
            </summary>
            <returns>An iterator to be used to iterator through all items
            in this collection.</returns>
        </member>
        <member name="P:NUnit.UiException.ErrorItemCollection.Count">
            <summary>
            Gets the number of item in this collection.
            </summary>
        </member>
        <member name="P:NUnit.UiException.ErrorItemCollection.Item(System.Int32)">
            <summary>
            Gets the ErrorItem at the specified index.
            </summary>
            <param name="index">The index of the wanted ErrorItem.</param>
            <returns>The ErrorItem.</returns>
        </member>
        <member name="T:NUnit.UiException.StackTraceParser">
            <summary>
            StackTraceParser is the entry class for analyzing and converting a stack
            trace - as given by .NET - into a manageable and ordered set of ErrorItem
            instances.
              StackTraceParser contains internaly a set of autonom, independent and
            interchangeable algorithms that makes the analysis of the stack robust and
            opened to changes. Its architecture is designed to abstract callers from
            secondary details such as the type of culture or file system that can
            both affect the format of the final stack as provided by .NET.
              In the future, this class could easily be extended by exposing a
            kind of register() method that would allow client code to append
            new algorithms of analysis in its internal list.
            </summary>
        </member>
        <member name="F:NUnit.UiException.StackTraceParser._items">
            <summary>
            Output list build from the StackTrace analyze .
            </summary>
        </member>
        <member name="F:NUnit.UiException.StackTraceParser._functionParsers">
            <summary>
            One or more algorithms designed to locate function names
            inside a stack trace line.
            </summary>
        </member>
        <member name="F:NUnit.UiException.StackTraceParser._pathParsers">
            <summary>
            One or more algorithms designed to locate path names
            inside a stack strace line.
            </summary>
        </member>
        <member name="F:NUnit.UiException.StackTraceParser._lineNumberParsers">
            <summary>
            One or more algorithms designed to locate line number
            information inside a stack strace line.
            </summary>
        </member>
        <member name="M:NUnit.UiException.StackTraceParser.#ctor">
            <summary>
            Build a new instance of StackTraceParser.
            </summary>
        </member>
        <member name="M:NUnit.UiException.StackTraceParser.Parse(System.String)">
            <summary>
            Reads and transforms the given stack trace into a manageable and ordered
            set of ErrorItem instances. The resulting set is stored into Items property.
            </summary>
            <param name="stackTrace">A string value that should contain a .Net stack trace.</param>
        </member>
        <member name="P:NUnit.UiException.StackTraceParser.Items">
            <summary>
            Gives access to the collection of ErrorItem
            build during the analyze of the StackTrace.
            </summary>
        </member>
        <member name="T:NUnit.UiException.UiExceptionHelper">
            <summary>
            (formerly named TraceExceptionHelper)
            
            Exposes static methods to assert predicates and throw exceptions
            as needed.
            </summary>
        </member>
        <member name="M:NUnit.UiException.UiExceptionHelper.CheckNotNull(System.Object,System.String)">
            <summary>
            Asserts that reference is not null; otherwise throws an
            ArgumentNullException.
            </summary>
            <param name="value">The reference to be tested.</param>
            <param name="paramName">The name of this reference</param>
        </member>
        <member name="M:NUnit.UiException.UiExceptionHelper.CheckTrue(System.Boolean,System.String,System.String)">
            <summary>
            Asserts that 'test' is true or throws an ArgumentException.
            </summary>
            <param name="test">The boolean to be tested.</param>
            <param name="message">The error message.</param>
            <param name="paramName">The parameter name to be passed to ArgumentException.</param>
        </member>
        <member name="M:NUnit.UiException.UiExceptionHelper.CheckFalse(System.Boolean,System.String,System.String)">
            <summary>
            Asserts that 'test' is false or throws an ArgumentException.
            </summary>
            <param name="test">The boolean to be tested.</param>
            <param name="message">The error message.</param>
            <param name="paramName">The parameter name to be passed to ArgumentException.</param>
        </member>
        <member name="M:NUnit.UiException.UiExceptionHelper.Fail(System.String)">
            <summary>
            Throws an ApplicationException with the given message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:NUnit.UiKit.AddConfigurationDialog">
            <summary>
            Displays a dialog for creation of a new configuration.
            The dialog collects and validates the name and the
            name of a configuration to be copied and then adds the
            new configuration to the project.
            
            A DialogResult of DialogResult.OK indicates that the
            configuration was added successfully.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.AddConfigurationDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.AddConfigurationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.AddConfigurationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.AddTabPageDialog">
            <summary>
            Summary description for NewTabPageDialog.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.AddTabPageDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.AddTabPageDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.AddTabPageDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.AppContainer">
            <summary>
            AppContainer acts as the container nunit components, providing 
            them with a Site from which services may be acquired.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.ConfigurationEditor">
            <summary>
            ConfigurationEditor form is designed for adding, deleting
            and renaming configurations from a project.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.ConfigurationEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.ConfigurationEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.ConfigurationEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.EditTabPagesDialog">
            <summary>
            Summary description for EditTabPagesDialog.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.EditTabPagesDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.EditTabPagesDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.EditTabPagesDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.ErrorDisplay">
            <summary>
            Summary description for ErrorDisplay.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.ErrorDisplay.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.ErrorDisplay.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.ErrorDisplay.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.ErrorDisplay.detailList_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            When one of the detail failure items is selected, display
            the stack trace and set up the tool tip for that item.
            </summary>
        </member>
        <member name="T:CP.Windows.Forms.ExpandingLabel">
            <summary>
            A special type of label which can display a tooltip-like
            window to show the full extent of any text which doesn't 
            fit. The window may be placed directly over the label
            or immediately beneath it and will expand to fit in
            a horizontal, vertical or both directions as needed.
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingLabel.tipWindow">
            <summary>
            Our window for displaying expanded text
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingLabel.expansion">
            <summary>
            Direction of expansion
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingLabel.overlay">
            <summary>
            True if tipWindow may overlay the label
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingLabel.autoCloseDelay">
            <summary>
            Time in milliseconds that the tip window
            will remain displayed.
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingLabel.mouseLeaveDelay">
            <summary>
            Time in milliseconds that the window stays
            open after the mouse leaves the control.
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingLabel.copySupported">
            <summary>
            If true, a context menu with Copy is displayed which
            allows copying contents to the clipboard.
            </summary>
        </member>
        <member name="M:CP.Windows.Forms.ExpandingLabel.CopyToClipboard(System.Object,System.EventArgs)">
            <summary>
            Copy contents to clipboard
            </summary>
        </member>
        <member name="P:CP.Windows.Forms.ExpandingLabel.AutoCloseDelay">
            <summary>
            Time in milliseconds that the tip window
            will remain displayed.
            </summary>
        </member>
        <member name="P:CP.Windows.Forms.ExpandingLabel.MouseLeaveDelay">
            <summary>
            Time in milliseconds that the window stays
            open after the mouse leaves the control.
            Reentering the control resets this.
            </summary>
        </member>
        <member name="P:CP.Windows.Forms.ExpandingLabel.Text">
            <summary>
            Override Text property to set up copy menu if
            the value is non-empty.
            </summary>
        </member>
        <member name="T:CP.Windows.Forms.ExpandingTextBox">
            <summary>
            A special type of textbox which can display a tooltip-like
            window to show the full extent of any text which doesn't 
            fit. The window may be placed directly over the label
            or immediately beneath it and will expand to fit in
            a horizontal, vertical or both directions as needed.
            
            TODO: This control is virtually identical to ExpandingLabel.
            We need to have an extension provider that works like a 
            ToolTip in order to eliminate the duplication.
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingTextBox.tipWindow">
            <summary>
            Our window for displaying expanded text
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingTextBox.expansion">
            <summary>
            Direction of expansion
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingTextBox.mouseHoverDelay">
            <summary>
            Time in milliseconds that the mouse must
            be stationary over an item before the
            tip window will display.
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingTextBox.overlay">
            <summary>
            True if tipWindow may overlay the label
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingTextBox.autoCloseDelay">
            <summary>
            Time in milliseconds that the tip window
            will remain displayed.
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingTextBox.mouseLeaveDelay">
            <summary>
            Time in milliseconds that the window stays
            open after the mouse leaves the control.
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingTextBox.copySupported">
            <summary>
            If true, a context menu with Copy is displayed which
            allows copying contents to the clipboard.
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingTextBox.hoverTimer">
            <summary>
            Timer used to control display behavior on hover.
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.ExpandingTextBox.autoExpand">
            <summary>
            True if control should expand automatically on hover.
            </summary>
        </member>
        <member name="M:CP.Windows.Forms.ExpandingTextBox.CopyToClipboard(System.Object,System.EventArgs)">
            <summary>
            Copy contents to clipboard
            </summary>
        </member>
        <member name="P:CP.Windows.Forms.ExpandingTextBox.MouseHoverDelay">
            <summary>
            Time in milliseconds that the mouse must
            be stationary over an item before the
            tip window will display.
            </summary>
        </member>
        <member name="P:CP.Windows.Forms.ExpandingTextBox.AutoCloseDelay">
            <summary>
            Time in milliseconds that the tip window
            will remain displayed.
            </summary>
        </member>
        <member name="P:CP.Windows.Forms.ExpandingTextBox.MouseLeaveDelay">
            <summary>
            Time in milliseconds that the window stays
            open after the mouse leaves the control.
            Reentering the control resets this.
            </summary>
        </member>
        <member name="P:CP.Windows.Forms.ExpandingTextBox.Text">
            <summary>
            Override Text property to set up copy menu if
            the value is non-empty.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.GuiAttachedConsole">
            <summary>
            Summary description for GuiAttachedConsole.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.GuiTestEventDispatcher">
            <summary>
            Summary description for GuiTestEventDispatcher.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.LongRunningOperationDisplay">
            <summary>
            LongRunningOperationDisplay shows an overlay message block 
            that describes the operation in progress.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.LongRunningOperationDisplay.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.LongRunningOperationDisplay.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.LongRunningOperationDisplay.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.MessageDisplay">
            <summary>
            Summary description for MessageDisplay.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.NotRunTree">
            <summary>
            Summary description for NotRunTree.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.ColorProgressBar">
            <summary>
            ColorProgressBar provides a custom progress bar with the
            ability to control the color of the bar and to render itself
            in either solid or segmented style. The bar can be updated
            on the fly and has code to avoid repainting the entire bar
            when that occurs.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.ColorProgressBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.ColorProgressBar.val">
            <summary>
            The current progress value
            </summary>
        </member>
        <member name="F:NUnit.UiKit.ColorProgressBar.min">
            <summary>
            The minimum value allowed
            </summary>
        </member>
        <member name="F:NUnit.UiKit.ColorProgressBar.max">
            <summary>
            The maximum value allowed
            </summary>
        </member>
        <member name="F:NUnit.UiKit.ColorProgressBar.step">
            <summary>
            Amount to advance for each step
            </summary>
        </member>
        <member name="F:NUnit.UiKit.ColorProgressBar.lastSegmentCount">
            <summary>
            Last segment displayed when displaying asynchronously rather 
            than through OnPaint calls.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.ColorProgressBar.foreBrush">
            <summary>
            The brush to use in painting the progress bar
            </summary>
        </member>
        <member name="F:NUnit.UiKit.ColorProgressBar.backBrush">
            <summary>
            The brush to use in painting the background of the bar
            </summary>
        </member>
        <member name="F:NUnit.UiKit.ColorProgressBar.segmented">
            <summary>
            Indicates whether to draw the bar in segments or not
            </summary>
        </member>
        <member name="M:NUnit.UiKit.ColorProgressBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.ColorProgressBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.RenameConfigurationDialog">
            <summary>
            Displays a dialog for entry of a new name for an
            existing configuration. This dialog collects and
            validates the name. The caller is responsible for
            actually renaming the cofiguration.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.RenameConfigurationDialog.project">
            <summary>
             The project in which we are renaming a configuration
            </summary>
        </member>
        <member name="F:NUnit.UiKit.RenameConfigurationDialog.configurationName">
            <summary>
            The new name to give the configuration
            </summary>
        </member>
        <member name="F:NUnit.UiKit.RenameConfigurationDialog.originalName">
            <summary>
            The original name of the configuration
            </summary>
        </member>
        <member name="F:NUnit.UiKit.RenameConfigurationDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.RenameConfigurationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.RenameConfigurationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.ResultTabs">
            <summary>
            Summary description for ResultTabs.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.ResultTabs.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.ResultTabs.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.ResultTabs.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.SettingsDialogBase">
            <summary>
            Summary description for OptionsDialogBase.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.SettingsDialogBase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.SettingsDialogBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.SettingsDialogBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.SimpleSettingsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.SimpleSettingsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TabbedSettingsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TabbedSettingsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.TestPropertiesDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestPropertiesDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NUnit.UiKit.TestPropertiesDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.TestSuiteTreeNode">
            <summary>
            Type safe TreeNode for use in the TestSuiteTreeView. 
            NOTE: Hides some methods and properties of base class.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.TestSuiteTreeNode.test">
            <summary>
            The testcase or testsuite represented by this node
            </summary>
        </member>
        <member name="F:NUnit.UiKit.TestSuiteTreeNode.result">
            <summary>
            The result from the last run of the test
            </summary>
        </member>
        <member name="F:NUnit.UiKit.TestSuiteTreeNode.included">
            <summary>
            Private field used for inclusion by category
            </summary>
        </member>
        <member name="F:NUnit.UiKit.TestSuiteTreeNode.InitIndex">
            <summary>
            Image indices for various test states - the values 
            must match the indices of the image list used
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeNode.#ctor(NUnit.Core.TestInfo)">
            <summary>
            Construct a TestNode given a test
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeNode.#ctor(NUnit.Core.TestResult)">
            <summary>
            Construct a TestNode given a TestResult
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeNode.UpdateImageIndex">
            <summary>
            UPdate the image index based on the result field
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeNode.ClearResults">
            <summary>
            Clear the result of this node and all its children
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeNode.GetTheoryNode">
            <summary>
            Gets the Theory node associated with the current
            node. If the current node is a Theory, then the
            current node is returned. Otherwise, if the current
            node is a test case under a theory node, then that
            node is returned. Otherwise, null is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeNode.RepopulateTheoryNode">
            <summary>
            Regenerate the test cases under a theory, respecting
            the current setting for ShowFailedAssumptions
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeNode.CalcImageIndex">
            <summary>
            Calculate the image index based on the node contents
            </summary>
            <returns>Image index for this node</returns>
        </member>
        <member name="P:NUnit.UiKit.TestSuiteTreeNode.Test">
            <summary>
            Test represented by this node
            </summary>
        </member>
        <member name="P:NUnit.UiKit.TestSuiteTreeNode.Result">
            <summary>
            Test result for this node
            </summary>
        </member>
        <member name="P:NUnit.UiKit.TestSuiteTreeNode.HasResult">
            <summary>
            Return true if the node has a result, otherwise false.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.TestSuiteTreeView">
            <summary>
            TestSuiteTreeView is a tree view control
            specialized for displaying the tests
            in an assembly. Clients should always
            use TestNode rather than TreeNode when
            dealing with this class to be sure of
            calling the proper methods.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.TestSuiteTreeView.treeMap">
            <summary>
            Hashtable provides direct access to TestNodes
            </summary>
        </member>
        <member name="F:NUnit.UiKit.TestSuiteTreeView.contextNode">
            <summary>
            The TestNode on which a right click was done
            </summary>
        </member>
        <member name="F:NUnit.UiKit.TestSuiteTreeView.runCommandSupported">
            <summary>
            Whether the browser supports running tests,
            or just loading and examining them
            </summary>
        </member>
        <member name="F:NUnit.UiKit.TestSuiteTreeView.displayProgress">
            <summary>
            Whether or not we track progress of tests visibly in the tree
            </summary>
        </member>
        <member name="F:NUnit.UiKit.TestSuiteTreeView.propertiesDialog">
            <summary>
            The properties dialog if displayed
            </summary>
        </member>
        <member name="F:NUnit.UiKit.TestSuiteTreeView.loader">
            <summary>
            Source of events that the tree responds to and
            target for the run command.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.TestSuiteTreeView.runCommandEnabled">
            <summary>
            True if the UI should allow a run command to be selected
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles right mouse button down by
            remembering the proper context item
            and implements multiple select with the left button.
            </summary>
            <param name="e">MouseEventArgs structure with information about the mouse position and button state</param>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.ContextMenu_Popup(System.Object,System.EventArgs)">
            <summary>
            Build treeview context menu dynamically on popup
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.expandMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            When Expand context menu item is clicked, expand the node
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.collapseMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            When Collapse context menu item is clicked, collapse the node
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.runMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            When Run context menu item is clicked, run the test that
            was selected when the right click was done.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.IsValidFileDrop(System.Windows.Forms.IDataObject)">
            <summary>
            Helper method to determine if an IDataObject is valid
            for dropping on the tree view. It must be a the drop
            of a single file with a valid assembly file type.
            </summary>
            <param name="data">IDataObject to be tested</param>
            <returns>True if dropping is allowed</returns>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.ClearAllResults">
            <summary>
            Clear all the results in the tree.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.Load(NUnit.Core.TestNode)">
            <summary>
            Load the tree with a test hierarchy
            </summary>
            <param name="test">Test to be loaded</param>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.Load(NUnit.Core.TestResult)">
            <summary>
            Load the tree from a test result
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.Reload(NUnit.Core.TestNode)">
            <summary>
            Reload the tree with a changed test hierarchy
            while maintaining as much gui state as possible.
            </summary>
            <param name="test">Test suite to be loaded</param>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.Clear">
            <summary>
            Clear all the info in the tree.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.SetTestResult(NUnit.Core.TestResult)">
            <summary>
            Add the result of a test to the tree
            </summary>
            <param name="result">The result of the test</param>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.AddTreeNodes(System.Collections.IList,NUnit.Core.TestNode,System.Boolean)">
            <summary>
            Add nodes to the tree constructed from a test
            </summary>
            <param name="nodes">The TreeNodeCollection to which the new node should  be added</param>
            <param name="rootTest">The test for which a node is to be built</param>
            <param name="highlight">If true, highlight the text for this node in the tree</param>
            <returns>A newly constructed TestNode, possibly with descendant nodes</returns>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.RemoveNode(NUnit.UiKit.TestSuiteTreeNode)">
            <summary>
            Remove a node from the tree itself and the hashtable
            </summary>
            <param name="node">Node to remove</param>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.HideTestsUnderNode(NUnit.UiKit.TestSuiteTreeNode)">
            <summary>
            Helper collapses all fixtures under a node
            </summary>
            <param name="node">Node under which to collapse fixtures</param>
        </member>
        <member name="M:NUnit.UiKit.TestSuiteTreeView.GetDisplayStyle">
            <summary>
            Helper used to figure out the display style
            to use when the setting is Auto
            </summary>
            <returns>DisplayStyle to be used</returns>
        </member>
        <member name="P:NUnit.UiKit.TestSuiteTreeView.RunCommandSupported">
            <summary>
            Property determining whether the run command
            is supported from the tree context menu and
            by double-clicking test cases.
            </summary>
        </member>
        <member name="P:NUnit.UiKit.TestSuiteTreeView.DisplayTestProgress">
            <summary>
            Property determining whether tree should reDraw nodes
            as tests are complete in order to show progress.
            </summary>
        </member>
        <member name="P:NUnit.UiKit.TestSuiteTreeView.SelectedTest">
            <summary>
            The currently selected test.
            </summary>
        </member>
        <member name="P:NUnit.UiKit.TestSuiteTreeView.SelectedTestResult">
            <summary>
            The currently selected test result or null
            </summary>
        </member>
        <member name="P:NUnit.UiKit.TestSuiteTreeView.Item(NUnit.Core.ITest)">
            <summary>
            Test node corresponding to a test
            </summary>
        </member>
        <member name="P:NUnit.UiKit.TestSuiteTreeView.Item(NUnit.Core.TestResult)">
            <summary>
            Test node corresponding to a TestResultInfo
            </summary>
        </member>
        <member name="T:NUnit.UiKit.TestSuiteTreeView.DisplayStyle">
            <summary>
            Indicates how a tree should be displayed
            </summary>
        </member>
        <member name="T:NUnit.UiKit.TestSuiteTreeView.LoadHandler">
            <summary>
            Delegate for use in invoking the tree loader
            from the watcher thread.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.TestTree">
            <summary>
            Summary description for TestTree.
            </summary>
        </member>
        <member name="F:NUnit.UiKit.TestTree.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestTree.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TestTree.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.TextBoxDisplay">
            <summary>
            TextBoxDisplay is an adapter that allows accessing a 
            System.Windows.Forms.TextBox using the TextDisplay interface.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.TextDisplay">
            <summary>
            The TextDisplay interface is implemented by object - generally
            controls - that display text.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TextDisplay.Clear">
            <summary>
            Clears the display
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TextDisplay.Write(System.String)">
            <summary>
            Appends text to the display
            </summary>
            <param name="text">The text to append</param>
        </member>
        <member name="M:NUnit.UiKit.TextDisplay.WriteLine(System.String)">
            <summary>
            Appends text to the display followed by a newline
            </summary>
            <param name="text">The text to append</param>
        </member>
        <member name="M:NUnit.UiKit.TextDisplay.GetText">
            <summary>
            Gets the current text - used mainly for testing
            </summary>
        </member>
        <member name="P:NUnit.UiKit.TextDisplay.Content">
            <summary>
             The output types handled by this display
            </summary>
        </member>
        <member name="T:NUnit.UiKit.TextDisplayTabPage">
            <summary>
            Summary description for TextDisplayTabPage.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.TextDisplayWriter">
            <summary>
            Summary description for TextDisplayWriter.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TextDisplayWriter.Write(System.Char)">
            <summary>
            Write a single char
            </summary>
            <param name="c">The char to write</param>
        </member>
        <member name="M:NUnit.UiKit.TextDisplayWriter.Write(System.String)">
            <summary>
            Write a string
            </summary>
            <param name="s">The string to write</param>
        </member>
        <member name="M:NUnit.UiKit.TextDisplayWriter.WriteLine(System.String)">
            <summary>
            Write a string followed by a newline.
            </summary>
            <param name="s">The string to write</param>
        </member>
        <member name="P:NUnit.UiKit.TextDisplayWriter.Encoding">
            <summary>
            The encoding in use for this TextWriter.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TextOutputSettingsPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TextOutputSettingsPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.TipWindow.tipText">
            <summary>
            Text we are displaying
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.TipWindow.control">
            <summary>
            The control for which we are showing expanded text
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.TipWindow.itemBounds">
            <summary>
            Rectangle representing bounds to overlay. For a listbox, this
            is a single item rectangle. For other controls, it is usually
            the entire client area.
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.TipWindow.overlay">
            <summary>
            True if we may overlay control or item
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.TipWindow.expansion">
            <summary>
            Directions we are allowed to expand
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.TipWindow.autoCloseDelay">
            <summary>
            Time before automatically closing
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.TipWindow.autoCloseTimer">
            <summary>
            Timer used for auto-close
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.TipWindow.mouseLeaveDelay">
            <summary>
            Time to wait for after mouse leaves
            the window or the label before closing.
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.TipWindow.mouseLeaveTimer">
            <summary>
            Timer used for mouse leave delay
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.TipWindow.textRect">
            <summary>
            Rectangle used to display text
            </summary>
        </member>
        <member name="F:CP.Windows.Forms.TipWindow.wantClicks">
            <summary>
            Indicates whether any clicks should be passed to the underlying control
            </summary>
        </member>
        <member name="M:CP.Windows.Forms.TipWindow.control_FormClosed(System.Object,System.EventArgs)">
            <summary>
            The form our label is on closed, so we should. 
            </summary>
        </member>
        <member name="M:CP.Windows.Forms.TipWindow.control_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            The mouse left the label. We ignore if we are
            overlaying the label but otherwise start a
            delay for closing the window
            </summary>
        </member>
        <member name="T:CP.Windows.Forms.TipWindow.ExpansionStyle">
            <summary>
            Direction in which to expand
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TreeBasedSettingsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NUnit.UiKit.TreeBasedSettingsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NUnit.UiKit.VisualState">
            <summary>
            The VisualState class holds the latest visual state for a project.
            </summary>
        </member>
        <member name="T:CP.Windows.Forms.WaitCursor">
            <summary>
            Utility class used to display a wait cursor
            while a long operation takes place and
            guarantee that it will be removed on exit.
            
            Use as follows:
            
            	using ( new WaitCursor() )
            	{
            		// Long running operation goes here
            	}
            	
            </summary>
        </member>
    </members>
</doc>
