//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by:
// TextMetal 4.3.0.27741;
// 		Copyright ©2002-2011 Daniel Bullington (dpbullington@gmail.com)
//		Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
//		Project URL: http://code.google.com/p/textmetal/
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------

/*
	Copyright ©2002-2011 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

using TextMetal.Core.Plumbing;

using TextMetal.WebHostSample.Objects.Model.Tables;

namespace TextMetal.WebHostSample.Objects.Model
{
	public partial class Repository
	{		
		#region Methods/Operators
		
		protected bool PersistModel<TModel>(UnitOfWorkContext unitOfWorkContext, TModel model, CommandType commandType, string commandText, IEnumerable<IDataParameter> commandParameters, int persistNotExpectedRecordsAffected, Action<IDictionary<string, object>, TModel> mapToCallback)
			where TModel : class, new()
		{
			int recordsAffected;
			IList<IDictionary<string, object>> results;

			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			if ((object)model == null)
				throw new ArgumentNullException("model");

			if ((object)commandText == null)
				throw new ArgumentNullException("commandText");

			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			if ((object)mapToCallback == null)
				throw new ArgumentNullException("mapToCallback");

			if (DataType.IsNullOrWhiteSpace(commandText))
				throw new ArgumentOutOfRangeException("commandText");
			
			results = unitOfWorkContext.ExecuteDictionary(commandType, commandText, commandParameters, out recordsAffected);

			if (recordsAffected <= persistNotExpectedRecordsAffected)
			{
				// concurrency failure
				unitOfWorkContext.Divergent();
				return false;
			}

			if ((object)results == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			if (results.Count == 1)
				mapToCallback(results[0], model);
			
			return true;
		}
		
		protected IList<TModel> QueryModel<TModel>(UnitOfWorkContext unitOfWorkContext, CommandType commandType, string commandText, IEnumerable<IDataParameter> commandParameters, int queryExpectedRecordsAffected, Action<IDictionary<string, object>, TModel> mapToCallback)
			where TModel : class, new()
		{
			IList<TModel> models;
			TModel model;
			int recordsAffected;
			IList<IDictionary<string, object>> results;

			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			if ((object)commandText == null)
				throw new ArgumentNullException("commandText");

			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			if ((object)mapToCallback == null)
				throw new ArgumentNullException("mapToCallback");

			if (DataType.IsNullOrWhiteSpace(commandText))
				throw new ArgumentOutOfRangeException("commandText");

			results = unitOfWorkContext.ExecuteDictionary(commandType, commandText, commandParameters, out recordsAffected);

			if (recordsAffected != queryExpectedRecordsAffected)
			{
				// idempotency failure
				unitOfWorkContext.Divergent();
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}

			if ((object)results == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			models = new List<TModel>();

			foreach (IDictionary<string, object> result in results)
			{
				model = new TModel();
				mapToCallback(result, model);
				models.Add(model);
			}

			return models;
		}
		
		protected TModel FetchModel<TModel>(UnitOfWorkContext unitOfWorkContext, CommandType commandType, string commandText, IEnumerable<IDataParameter> commandParameters, int queryExpectedRecordsAffected, Action<IDictionary<string, object>, TModel> mapToCallback)
			where TModel: class, new()
		{
			TModel model;
			int recordsAffected;
			IList<IDictionary<string, object>> results;
						
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandText == null)
				throw new ArgumentNullException("commandText");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			if ((object)mapToCallback == null)
				throw new ArgumentNullException("mapToCallback");

			if (DataType.IsNullOrWhiteSpace(commandText))
				throw new ArgumentOutOfRangeException("commandText");
				
			results = unitOfWorkContext.ExecuteDictionary(commandType, commandText, commandParameters, out recordsAffected);
			
			if (recordsAffected != queryExpectedRecordsAffected)
			{
				// idempotency failure
				unitOfWorkContext.Divergent();
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
				
			if ((object)results == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			if (results.Count != 1)
				return null;

			model = new TModel();

			mapToCallback(results[0], model);

			return model;
		}
		
		protected void FillModel<TModel>(UnitOfWorkContext unitOfWorkContext, TModel model, CommandType commandType, string commandText, IEnumerable<IDataParameter> commandParameters, int queryExpectedRecordsAffected, Action<IDictionary<string, object>, TModel> mapToCallback)
			where TModel: class, new()
		{
			int recordsAffected;
			IList<IDictionary<string, object>> results;
						
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)model == null)
				throw new ArgumentNullException("model");
				
			if ((object)commandText == null)
				throw new ArgumentNullException("commandText");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			if ((object)mapToCallback == null)
				throw new ArgumentNullException("mapToCallback");

			if (DataType.IsNullOrWhiteSpace(commandText))
				throw new ArgumentOutOfRangeException("commandText");
				
			results = unitOfWorkContext.ExecuteDictionary(commandType, commandText, commandParameters, out recordsAffected);
			
			if (recordsAffected != queryExpectedRecordsAffected)
			{
				// idempotency failure
				unitOfWorkContext.Divergent();
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
				
			if ((object)results == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			if (results.Count != 1)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			mapToCallback(results[0], model);
		}
		
		public EmailAttachment LoadEmailAttachment(Int32 emailAttachmentId)
		{
			EmailAttachment retval;
						
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, p1) => this.LoadEmailAttachment(uowc, p1), emailAttachmentId);
			
			return retval;
		}
		
		public EmailAttachment LoadEmailAttachment(UnitOfWorkContext unitOfWorkContext, Int32 emailAttachmentId)
		{			
			EmailAttachment emailAttachment;			
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int queryExpectedRecordsAffected;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			commandParameters = new List<IDataParameter>();
			
			commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, "@EmailAttachmentId", emailAttachmentId);
			commandParameters.Add(commandParameter);			
			
			ConnectionSpecificEmailAttachmentSelectOneCommandMagic(unitOfWorkContext, commandParameters, out commandText, out queryExpectedRecordsAffected);
			
			emailAttachment = this.FetchModel<EmailAttachment>(unitOfWorkContext, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEmailAttachment);
							
			this.OnSelectEmailAttachment(unitOfWorkContext, emailAttachment);

			return emailAttachment;
		}
		
		public IList<EmailAttachment> FindEmailAttachments(EmailAttachment_Query emailAttachmentQuery)
		{
			IList<EmailAttachment> retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.FindEmailAttachments(uowc, e), emailAttachmentQuery);
			
			return retval;
		}
		
		public IList<EmailAttachment> FindEmailAttachments(UnitOfWorkContext unitOfWorkContext, EmailAttachment_Query emailAttachmentQuery)
		{
			IList<EmailAttachment> emailAttachments;			
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int queryExpectedRecordsAffected;
			object value;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			commandParameters = new List<IDataParameter>();
			
			if ((object)emailAttachmentQuery == null)			
			{
				ConnectionSpecificEmailAttachmentSelectAllCommandMagic(unitOfWorkContext, commandParameters, out commandText, out queryExpectedRecordsAffected);
			}
			else
			{
				value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.EmailMessageId, default(Nullable<Int32>)) ? emailAttachmentQuery.EmailMessageId : null;
				
				if ((object)value != null && (object)emailAttachmentQuery.IsNullEmailMessageId == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, "@EmailMessageId", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.MimeType, default(String)) ? emailAttachmentQuery.MimeType : null;
				
				if ((object)value != null && (object)emailAttachmentQuery.IsNullMimeType == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, "@MimeType", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.AttachmentBits, default(Byte[])) ? emailAttachmentQuery.AttachmentBits : null;
				
				if ((object)value != null && (object)emailAttachmentQuery.IsNullAttachmentBits == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Binary, 0, 0, 0, false, "@AttachmentBits", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.CreationTimestamp, default(Nullable<DateTime>)) ? emailAttachmentQuery.CreationTimestamp : null;
				
				if ((object)value != null && (object)emailAttachmentQuery.IsNullCreationTimestamp == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@CreationTimestamp", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.ModificationTimestamp, default(Nullable<DateTime>)) ? emailAttachmentQuery.ModificationTimestamp : null;
				
				if ((object)value != null && (object)emailAttachmentQuery.IsNullModificationTimestamp == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@ModificationTimestamp", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.LogicalDelete, default(Nullable<Boolean>)) ? emailAttachmentQuery.LogicalDelete : null;
				
				if ((object)value != null && (object)emailAttachmentQuery.IsNullLogicalDelete == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@LogicalDelete", value);
					commandParameters.Add(commandParameter);
				}
				
				ConnectionSpecificEmailAttachmentSelectForCommandMagic(unitOfWorkContext, emailAttachmentQuery, commandParameters, out commandText, out queryExpectedRecordsAffected);
			}
			
			emailAttachments = this.QueryModel<EmailAttachment>(unitOfWorkContext, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEmailAttachment);			
			
			foreach (EmailAttachment emailAttachment in emailAttachments)
				this.OnSelectEmailAttachment(unitOfWorkContext, emailAttachment);
							
			return emailAttachments;
		}
		
		public bool SaveEmailAttachment(EmailAttachment emailAttachment)
		{
			bool retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.SaveEmailAttachment(uowc, e), emailAttachment);
			
			return retval;
		}
		
		public bool SaveEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment)
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected, queryExpectedRecordsAffected;
			bool wasNew, retval;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)emailAttachment == null)
				throw new ArgumentNullException("emailAttachment");
			
			wasNew = emailAttachment.IsNew;
			
			commandParameters = new List<IDataParameter>();
			
			if (wasNew)
			{	
				this.OnPreInsertEmailAttachment(unitOfWorkContext, emailAttachment);
				
				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, "@EmailMessageId", emailAttachment.EmailMessageId);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, "@MimeType", emailAttachment.MimeType);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Binary, 0, 0, 0, false, "@AttachmentBits", emailAttachment.AttachmentBits);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@CreationTimestamp", emailAttachment.CreationTimestamp);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@ModificationTimestamp", emailAttachment.ModificationTimestamp);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@LogicalDelete", emailAttachment.LogicalDelete);
				commandParameters.Add(commandParameter);		

				ConnectionSpecificEmailAttachmentInsertCommandMagic(unitOfWorkContext, commandParameters, out commandText, out persistNotExpectedRecordsAffected);
			}
			else
			{
				this.OnPreUpdateEmailAttachment(unitOfWorkContext, emailAttachment);
				
				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, "@EmailMessageId", emailAttachment.EmailMessageId);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, "@MimeType", emailAttachment.MimeType);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Binary, 0, 0, 0, false, "@AttachmentBits", emailAttachment.AttachmentBits);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@CreationTimestamp", emailAttachment.CreationTimestamp);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@ModificationTimestamp", emailAttachment.ModificationTimestamp);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@LogicalDelete", emailAttachment.LogicalDelete);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, "@EmailAttachmentId", emailAttachment.EmailAttachmentId);
				commandParameters.Add(commandParameter);		

				ConnectionSpecificEmailAttachmentUpdateCommandMagic(unitOfWorkContext, commandParameters, out commandText, out persistNotExpectedRecordsAffected);		
			}			
			
			retval = this.PersistModel<EmailAttachment>(unitOfWorkContext, emailAttachment, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapToEmailAttachment);
		
			if (!retval)
				return retval;
				
			ConnectionSpecificEmailAttachmentIdentityCommandMagic(unitOfWorkContext, commandParameters, out commandText, out queryExpectedRecordsAffected);
				
			if (wasNew && !DataType.IsNullOrWhiteSpace(commandText))
			{
				// select the identity on the same connection
				this.FillModel<EmailAttachment>(unitOfWorkContext, emailAttachment, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEmailAttachment);
			}
			
			if (wasNew)
			{
				this.OnPostInsertEmailAttachment(unitOfWorkContext, emailAttachment);
			}
			else
			{
				this.OnPostUpdateEmailAttachment(unitOfWorkContext, emailAttachment);
			}			

			return retval;
		}
		
		public bool DiscardEmailAttachment(EmailAttachment emailAttachment)
		{
			bool retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.DiscardEmailAttachment(uowc, e), emailAttachment);
			
			return retval;
		}
		
		public bool DiscardEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment)
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected;
			bool retval;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)emailAttachment == null)
				throw new ArgumentNullException("emailAttachment");
			
			if (emailAttachment.IsNew)
				return true;
				
			commandParameters = new List<IDataParameter>();			
						
			commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, "@EmailAttachmentId", emailAttachment.EmailAttachmentId);
			commandParameters.Add(commandParameter);

			this.OnPreDeleteEmailAttachment(unitOfWorkContext, emailAttachment);
		
			ConnectionSpecificEmailAttachmentDeleteCommandMagic(unitOfWorkContext, commandParameters, out commandText, out persistNotExpectedRecordsAffected);
			
			retval = this.PersistModel<EmailAttachment>(unitOfWorkContext, emailAttachment, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapToEmailAttachment);

			this.OnPostDeleteEmailAttachment(unitOfWorkContext, emailAttachment);
						
			emailAttachment.IsNew = false;

			return retval;
		}
		
		private static void MapToEmailAttachment(IDictionary<string, object> result, EmailAttachment emailAttachment)
		{
			object value;
			
			if ((object)result == null)
				throw new ArgumentNullException("result");
				
			if ((object)emailAttachment == null)
				throw new ArgumentNullException("emailAttachment");
			
			if (result.TryGetValue("EmailAttachmentId", out value))
				emailAttachment.EmailAttachmentId = value.ChangeType<Nullable<Int32>>();

			if (result.TryGetValue("EmailMessageId", out value))
				emailAttachment.EmailMessageId = value.ChangeType<Nullable<Int32>>();

			if (result.TryGetValue("MimeType", out value))
				emailAttachment.MimeType = value.ChangeType<String>();

			if (result.TryGetValue("AttachmentBits", out value))
				emailAttachment.AttachmentBits = value.ChangeType<Byte[]>();

			if (result.TryGetValue("CreationTimestamp", out value))
				emailAttachment.CreationTimestamp = value.ChangeType<Nullable<DateTime>>();

			if (result.TryGetValue("ModificationTimestamp", out value))
				emailAttachment.ModificationTimestamp = value.ChangeType<Nullable<DateTime>>();

			if (result.TryGetValue("LogicalDelete", out value))
				emailAttachment.LogicalDelete = value.ChangeType<Nullable<Boolean>>();
		}
		
		private static void ConnectionSpecificEmailAttachmentInsertCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEmailAttachmentInsertCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEmailAttachmentInsertCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEmailAttachmentInsertCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEmailAttachmentInsertCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EmailMessageId");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@MimeType");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@AttachmentBits");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Image", true));

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@CreationTimestamp");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@ModificationTimestamp");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@LogicalDelete");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandText = @"INSERT INTO [dbo].[EmailAttachment] ([EmailMessageId], [MimeType], [AttachmentBits], [CreationTimestamp], [ModificationTimestamp], [LogicalDelete]) VALUES (@EmailMessageId, @MimeType, @AttachmentBits, @CreationTimestamp, @ModificationTimestamp, @LogicalDelete);	SELECT SCOPE_IDENTITY() as [EmailAttachmentId];";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEmailAttachmentInsertCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"INSERT INTO [EmailAttachment] ([EmailMessageId], [MimeType], [AttachmentBits], [CreationTimestamp], [ModificationTimestamp], [LogicalDelete]) VALUES (@EmailMessageId, @MimeType, @AttachmentBits, @CreationTimestamp, @ModificationTimestamp, @LogicalDelete);";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEmailAttachmentInsertCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"INSERT INTO EmailAttachment (EmailMessageId, MimeType, AttachmentBits, CreationTimestamp, ModificationTimestamp, LogicalDelete) VALUES (@EmailMessageId, @MimeType, @AttachmentBits, @CreationTimestamp, @ModificationTimestamp, @LogicalDelete);";
			persistNotExpectedRecordsAffected = SQLITE_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEmailAttachmentIdentityCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEmailAttachmentIdentityCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEmailAttachmentIdentityCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEmailAttachmentIdentityCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEmailAttachmentIdentityCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

		

			commandText = @"";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEmailAttachmentIdentityCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT @@IDENTITY AS [EmailAttachmentId]";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEmailAttachmentIdentityCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT LAST_INSERT_ROWID() AS EmailAttachmentId";
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEmailAttachmentUpdateCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEmailAttachmentUpdateCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEmailAttachmentUpdateCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEmailAttachmentUpdateCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEmailAttachmentUpdateCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EmailMessageId");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@MimeType");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@AttachmentBits");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Image", true));

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@CreationTimestamp");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@ModificationTimestamp");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@LogicalDelete");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EmailAttachmentId");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandText = @"UPDATE [dbo].[EmailAttachment] SET [EmailMessageId] = @EmailMessageId, [MimeType] = @MimeType, [AttachmentBits] = @AttachmentBits, [CreationTimestamp] = @CreationTimestamp, [ModificationTimestamp] = @ModificationTimestamp, [LogicalDelete] = @LogicalDelete WHERE [EmailAttachmentId] = @EmailAttachmentId";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEmailAttachmentUpdateCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"UPDATE [EmailAttachment] SET [EmailMessageId] = @EmailMessageId, [MimeType] = @MimeType, [AttachmentBits] = @AttachmentBits, [CreationTimestamp] = @CreationTimestamp, [ModificationTimestamp] = @ModificationTimestamp, [LogicalDelete] = @LogicalDelete WHERE [EmailAttachmentId] = @EmailAttachmentId";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEmailAttachmentUpdateCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"UPDATE EmailAttachment SET EmailMessageId = @EmailMessageId, MimeType = @MimeType, AttachmentBits = @AttachmentBits, CreationTimestamp = @CreationTimestamp, ModificationTimestamp = @ModificationTimestamp, LogicalDelete = @LogicalDelete WHERE EmailAttachmentId = @EmailAttachmentId";
			persistNotExpectedRecordsAffected = SQLITE_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEmailAttachmentDeleteCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEmailAttachmentDeleteCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEmailAttachmentDeleteCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEmailAttachmentDeleteCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEmailAttachmentDeleteCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EmailAttachmentId");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandText = @"DELETE FROM [dbo].[EmailAttachment] WHERE [EmailAttachmentId] = @EmailAttachmentId";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEmailAttachmentDeleteCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"DELETE FROM [EmailAttachment] WHERE [EmailAttachmentId] = @EmailAttachmentId";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEmailAttachmentDeleteCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"DELETE FROM EmailAttachment WHERE EmailAttachmentId = @EmailAttachmentId";
			persistNotExpectedRecordsAffected = SQLITE_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEmailAttachmentSelectOneCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEmailAttachmentSelectOneCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEmailAttachmentSelectOneCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEmailAttachmentSelectOneCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEmailAttachmentSelectOneCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EmailAttachmentId");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandText = @"SELECT t.[EmailAttachmentId], t.[EmailMessageId], t.[MimeType], t.[AttachmentBits], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [dbo].[EmailAttachment] t WHERE t.[EmailAttachmentId] = @EmailAttachmentId ORDER BY t.[EmailAttachmentId] ASC";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEmailAttachmentSelectOneCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.[EmailAttachmentId], t.[EmailMessageId], t.[MimeType], t.[AttachmentBits], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [EmailAttachment] t WHERE t.[EmailAttachmentId] = @EmailAttachmentId ORDER BY t.[EmailAttachmentId] ASC";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEmailAttachmentSelectOneCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.EmailAttachmentId AS EmailAttachmentId, t.EmailMessageId AS EmailMessageId, t.MimeType AS MimeType, t.AttachmentBits AS AttachmentBits, t.CreationTimestamp AS CreationTimestamp, t.ModificationTimestamp AS ModificationTimestamp, t.LogicalDelete AS LogicalDelete FROM EmailAttachment t WHERE t.EmailAttachmentId = @EmailAttachmentId ORDER BY t.EmailAttachmentId ASC";
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEmailAttachmentSelectAllCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEmailAttachmentSelectAllCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEmailAttachmentSelectAllCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEmailAttachmentSelectAllCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEmailAttachmentSelectAllCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");



			commandText = @"SELECT t.[EmailAttachmentId], t.[EmailMessageId], t.[MimeType], t.[AttachmentBits], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [dbo].[EmailAttachment] t ORDER BY t.[EmailAttachmentId] ASC";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEmailAttachmentSelectAllCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.[EmailAttachmentId], t.[EmailMessageId], t.[MimeType], t.[AttachmentBits], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [EmailAttachment] t ORDER BY t.[EmailAttachmentId] ASC";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEmailAttachmentSelectAllCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.EmailAttachmentId AS EmailAttachmentId, t.EmailMessageId AS EmailMessageId, t.MimeType AS MimeType, t.AttachmentBits AS AttachmentBits, t.CreationTimestamp AS CreationTimestamp, t.ModificationTimestamp AS ModificationTimestamp, t.LogicalDelete AS LogicalDelete FROM EmailAttachment t ORDER BY t.EmailAttachmentId ASC";
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEmailAttachmentSelectForCommandMagic(UnitOfWorkContext unitOfWorkContext, EmailAttachment_Query emailAttachmentQuery, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)emailAttachmentQuery == null)
				throw new ArgumentNullException("emailAttachmentQuery");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEmailAttachmentSelectForCommandMagic(emailAttachmentQuery, commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEmailAttachmentSelectForCommandMagic(emailAttachmentQuery, commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEmailAttachmentSelectForCommandMagic(emailAttachmentQuery, commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEmailAttachmentSelectForCommandMagic(EmailAttachment_Query emailAttachmentQuery, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;			
			string predicateFragment = "", sortFragment = "";
			object value;
			
			if ((object)emailAttachmentQuery == null)
				throw new ArgumentNullException("emailAttachmentQuery");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EmailMessageId");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@MimeType");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@AttachmentBits");

			if ((object)commandParameter != null) // OK here to be NULL
			{

				Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Image", true));
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@CreationTimestamp");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@ModificationTimestamp");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@LogicalDelete");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandText = @"SELECT t.[EmailAttachmentId], t.[EmailMessageId], t.[MimeType], t.[AttachmentBits], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [dbo].[EmailAttachment] t WHERE (1 = 1) {0}";

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.EmailMessageId, default(Nullable<Int32>)) ? emailAttachmentQuery.EmailMessageId : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullEmailMessageId == null)												
			{
				predicateFragment += " AND [EmailMessageId] = @EmailMessageId";
			}
			else if ((object)emailAttachmentQuery.IsNullEmailMessageId != null)
			{
				predicateFragment += string.Format(" AND [EmailMessageId] IS {0} NULL", (bool)emailAttachmentQuery.IsNullEmailMessageId ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.MimeType, default(String)) ? emailAttachmentQuery.MimeType : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullMimeType == null)												
			{
				predicateFragment += " AND [MimeType] = @MimeType";
			}
			else if ((object)emailAttachmentQuery.IsNullMimeType != null)
			{
				predicateFragment += string.Format(" AND [MimeType] IS {0} NULL", (bool)emailAttachmentQuery.IsNullMimeType ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.AttachmentBits, default(Byte[])) ? emailAttachmentQuery.AttachmentBits : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullAttachmentBits == null)												
			{
				predicateFragment += " AND [AttachmentBits] = @AttachmentBits";
			}
			else if ((object)emailAttachmentQuery.IsNullAttachmentBits != null)
			{
				predicateFragment += string.Format(" AND [AttachmentBits] IS {0} NULL", (bool)emailAttachmentQuery.IsNullAttachmentBits ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.CreationTimestamp, default(Nullable<DateTime>)) ? emailAttachmentQuery.CreationTimestamp : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullCreationTimestamp == null)												
			{
				predicateFragment += " AND [CreationTimestamp] = @CreationTimestamp";
			}
			else if ((object)emailAttachmentQuery.IsNullCreationTimestamp != null)
			{
				predicateFragment += string.Format(" AND [CreationTimestamp] IS {0} NULL", (bool)emailAttachmentQuery.IsNullCreationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.ModificationTimestamp, default(Nullable<DateTime>)) ? emailAttachmentQuery.ModificationTimestamp : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullModificationTimestamp == null)												
			{
				predicateFragment += " AND [ModificationTimestamp] = @ModificationTimestamp";
			}
			else if ((object)emailAttachmentQuery.IsNullModificationTimestamp != null)
			{
				predicateFragment += string.Format(" AND [ModificationTimestamp] IS {0} NULL", (bool)emailAttachmentQuery.IsNullModificationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.LogicalDelete, default(Nullable<Boolean>)) ? emailAttachmentQuery.LogicalDelete : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullLogicalDelete == null)												
			{
				predicateFragment += " AND [LogicalDelete] = @LogicalDelete";
			}
			else if ((object)emailAttachmentQuery.IsNullLogicalDelete != null)
			{
				predicateFragment += string.Format(" AND [LogicalDelete] IS {0} NULL", (bool)emailAttachmentQuery.IsNullLogicalDelete ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				
			
			commandText = string.Format(commandText, predicateFragment, sortFragment);
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEmailAttachmentSelectForCommandMagic(EmailAttachment_Query emailAttachmentQuery, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;			
			string predicateFragment = "", sortFragment = "";
			object value;
			
			if ((object)emailAttachmentQuery == null)
				throw new ArgumentNullException("emailAttachmentQuery");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.[EmailAttachmentId], t.[EmailMessageId], t.[MimeType], t.[AttachmentBits], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [EmailAttachment] t WHERE (1 = 1) {0}";

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.EmailMessageId, default(Nullable<Int32>)) ? emailAttachmentQuery.EmailMessageId : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullEmailMessageId == null)												
			{
				predicateFragment += " AND [EmailMessageId] = @EmailMessageId";
			}
			else if ((object)emailAttachmentQuery.IsNullEmailMessageId != null)
			{
				predicateFragment += string.Format(" AND [EmailMessageId] IS {0} NULL", (bool)emailAttachmentQuery.IsNullEmailMessageId ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.MimeType, default(String)) ? emailAttachmentQuery.MimeType : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullMimeType == null)												
			{
				predicateFragment += " AND [MimeType] = @MimeType";
			}
			else if ((object)emailAttachmentQuery.IsNullMimeType != null)
			{
				predicateFragment += string.Format(" AND [MimeType] IS {0} NULL", (bool)emailAttachmentQuery.IsNullMimeType ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.AttachmentBits, default(Byte[])) ? emailAttachmentQuery.AttachmentBits : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullAttachmentBits == null)												
			{
				predicateFragment += " AND [AttachmentBits] = @AttachmentBits";
			}
			else if ((object)emailAttachmentQuery.IsNullAttachmentBits != null)
			{
				predicateFragment += string.Format(" AND [AttachmentBits] IS {0} NULL", (bool)emailAttachmentQuery.IsNullAttachmentBits ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.CreationTimestamp, default(Nullable<DateTime>)) ? emailAttachmentQuery.CreationTimestamp : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullCreationTimestamp == null)												
			{
				predicateFragment += " AND [CreationTimestamp] = @CreationTimestamp";
			}
			else if ((object)emailAttachmentQuery.IsNullCreationTimestamp != null)
			{
				predicateFragment += string.Format(" AND [CreationTimestamp] IS {0} NULL", (bool)emailAttachmentQuery.IsNullCreationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.ModificationTimestamp, default(Nullable<DateTime>)) ? emailAttachmentQuery.ModificationTimestamp : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullModificationTimestamp == null)												
			{
				predicateFragment += " AND [ModificationTimestamp] = @ModificationTimestamp";
			}
			else if ((object)emailAttachmentQuery.IsNullModificationTimestamp != null)
			{
				predicateFragment += string.Format(" AND [ModificationTimestamp] IS {0} NULL", (bool)emailAttachmentQuery.IsNullModificationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.LogicalDelete, default(Nullable<Boolean>)) ? emailAttachmentQuery.LogicalDelete : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullLogicalDelete == null)												
			{
				predicateFragment += " AND [LogicalDelete] = @LogicalDelete";
			}
			else if ((object)emailAttachmentQuery.IsNullLogicalDelete != null)
			{
				predicateFragment += string.Format(" AND [LogicalDelete] IS {0} NULL", (bool)emailAttachmentQuery.IsNullLogicalDelete ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				
			
			commandText = string.Format(commandText, predicateFragment, sortFragment);
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEmailAttachmentSelectForCommandMagic(EmailAttachment_Query emailAttachmentQuery, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;			
			string predicateFragment = "", sortFragment = "";
			object value;
			
			if ((object)emailAttachmentQuery == null)
				throw new ArgumentNullException("emailAttachmentQuery");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.EmailAttachmentId AS EmailAttachmentId, t.EmailMessageId AS EmailMessageId, t.MimeType AS MimeType, t.AttachmentBits AS AttachmentBits, t.CreationTimestamp AS CreationTimestamp, t.ModificationTimestamp AS ModificationTimestamp, t.LogicalDelete AS LogicalDelete FROM EmailAttachment t WHERE (1 = 1) {0}";

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.EmailMessageId, default(Nullable<Int32>)) ? emailAttachmentQuery.EmailMessageId : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullEmailMessageId == null)												
			{
				predicateFragment += " AND EmailMessageId = @EmailMessageId";
			}
			else if ((object)emailAttachmentQuery.IsNullEmailMessageId != null)
			{
				predicateFragment += string.Format(" AND EmailMessageId IS {0} NULL", (bool)emailAttachmentQuery.IsNullEmailMessageId ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.MimeType, default(String)) ? emailAttachmentQuery.MimeType : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullMimeType == null)												
			{
				predicateFragment += " AND MimeType = @MimeType";
			}
			else if ((object)emailAttachmentQuery.IsNullMimeType != null)
			{
				predicateFragment += string.Format(" AND MimeType IS {0} NULL", (bool)emailAttachmentQuery.IsNullMimeType ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.AttachmentBits, default(Byte[])) ? emailAttachmentQuery.AttachmentBits : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullAttachmentBits == null)												
			{
				predicateFragment += " AND AttachmentBits = @AttachmentBits";
			}
			else if ((object)emailAttachmentQuery.IsNullAttachmentBits != null)
			{
				predicateFragment += string.Format(" AND AttachmentBits IS {0} NULL", (bool)emailAttachmentQuery.IsNullAttachmentBits ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.CreationTimestamp, default(Nullable<DateTime>)) ? emailAttachmentQuery.CreationTimestamp : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullCreationTimestamp == null)												
			{
				predicateFragment += " AND CreationTimestamp = @CreationTimestamp";
			}
			else if ((object)emailAttachmentQuery.IsNullCreationTimestamp != null)
			{
				predicateFragment += string.Format(" AND CreationTimestamp IS {0} NULL", (bool)emailAttachmentQuery.IsNullCreationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.ModificationTimestamp, default(Nullable<DateTime>)) ? emailAttachmentQuery.ModificationTimestamp : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullModificationTimestamp == null)												
			{
				predicateFragment += " AND ModificationTimestamp = @ModificationTimestamp";
			}
			else if ((object)emailAttachmentQuery.IsNullModificationTimestamp != null)
			{
				predicateFragment += string.Format(" AND ModificationTimestamp IS {0} NULL", (bool)emailAttachmentQuery.IsNullModificationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailAttachmentQuery.LogicalDelete, default(Nullable<Boolean>)) ? emailAttachmentQuery.LogicalDelete : null;
			
			if ((object)value != null && (object)emailAttachmentQuery.IsNullLogicalDelete == null)												
			{
				predicateFragment += " AND LogicalDelete = @LogicalDelete";
			}
			else if ((object)emailAttachmentQuery.IsNullLogicalDelete != null)
			{
				predicateFragment += string.Format(" AND LogicalDelete IS {0} NULL", (bool)emailAttachmentQuery.IsNullLogicalDelete ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			commandText = string.Format(commandText, predicateFragment, sortFragment);
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		partial void OnPreInsertEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment);
		
		partial void OnPostInsertEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment);
		
		partial void OnPreUpdateEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment);
		
		partial void OnPostUpdateEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment);
		
		partial void OnPreDeleteEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment);
		
		partial void OnPostDeleteEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment);
		
		partial void OnSelectEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment);		

		public EventLog LoadEventLog(Int32 eventLogId)
		{
			EventLog retval;
						
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, p1) => this.LoadEventLog(uowc, p1), eventLogId);
			
			return retval;
		}
		
		public EventLog LoadEventLog(UnitOfWorkContext unitOfWorkContext, Int32 eventLogId)
		{			
			EventLog eventLog;			
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int queryExpectedRecordsAffected;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			commandParameters = new List<IDataParameter>();
			
			commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, "@EventLogId", eventLogId);
			commandParameters.Add(commandParameter);			
			
			ConnectionSpecificEventLogSelectOneCommandMagic(unitOfWorkContext, commandParameters, out commandText, out queryExpectedRecordsAffected);
			
			eventLog = this.FetchModel<EventLog>(unitOfWorkContext, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEventLog);
							
			this.OnSelectEventLog(unitOfWorkContext, eventLog);

			return eventLog;
		}
		
		public IList<EventLog> FindEventLogs(EventLog_Query eventLogQuery)
		{
			IList<EventLog> retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.FindEventLogs(uowc, e), eventLogQuery);
			
			return retval;
		}
		
		public IList<EventLog> FindEventLogs(UnitOfWorkContext unitOfWorkContext, EventLog_Query eventLogQuery)
		{
			IList<EventLog> eventLogs;			
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int queryExpectedRecordsAffected;
			object value;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			commandParameters = new List<IDataParameter>();
			
			if ((object)eventLogQuery == null)			
			{
				ConnectionSpecificEventLogSelectAllCommandMagic(unitOfWorkContext, commandParameters, out commandText, out queryExpectedRecordsAffected);
			}
			else
			{
				value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.EventText, default(String)) ? eventLogQuery.EventText : null;
				
				if ((object)value != null && (object)eventLogQuery.IsNullEventText == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 0, 0, 0, false, "@EventText", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.CreationTimestamp, default(Nullable<DateTime>)) ? eventLogQuery.CreationTimestamp : null;
				
				if ((object)value != null && (object)eventLogQuery.IsNullCreationTimestamp == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@CreationTimestamp", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.ModificationTimestamp, default(Nullable<DateTime>)) ? eventLogQuery.ModificationTimestamp : null;
				
				if ((object)value != null && (object)eventLogQuery.IsNullModificationTimestamp == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@ModificationTimestamp", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.LogicalDelete, default(Nullable<Boolean>)) ? eventLogQuery.LogicalDelete : null;
				
				if ((object)value != null && (object)eventLogQuery.IsNullLogicalDelete == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@LogicalDelete", value);
					commandParameters.Add(commandParameter);
				}
				
				ConnectionSpecificEventLogSelectForCommandMagic(unitOfWorkContext, eventLogQuery, commandParameters, out commandText, out queryExpectedRecordsAffected);
			}
			
			eventLogs = this.QueryModel<EventLog>(unitOfWorkContext, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEventLog);			
			
			foreach (EventLog eventLog in eventLogs)
				this.OnSelectEventLog(unitOfWorkContext, eventLog);
							
			return eventLogs;
		}
		
		public bool SaveEventLog(EventLog eventLog)
		{
			bool retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.SaveEventLog(uowc, e), eventLog);
			
			return retval;
		}
		
		public bool SaveEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog)
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected, queryExpectedRecordsAffected;
			bool wasNew, retval;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)eventLog == null)
				throw new ArgumentNullException("eventLog");
			
			wasNew = eventLog.IsNew;
			
			commandParameters = new List<IDataParameter>();
			
			if (wasNew)
			{	
				this.OnPreInsertEventLog(unitOfWorkContext, eventLog);
				
				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 0, 0, 0, false, "@EventText", eventLog.EventText);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@CreationTimestamp", eventLog.CreationTimestamp);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@ModificationTimestamp", eventLog.ModificationTimestamp);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@LogicalDelete", eventLog.LogicalDelete);
				commandParameters.Add(commandParameter);		

				ConnectionSpecificEventLogInsertCommandMagic(unitOfWorkContext, commandParameters, out commandText, out persistNotExpectedRecordsAffected);
			}
			else
			{
				this.OnPreUpdateEventLog(unitOfWorkContext, eventLog);
				
				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 0, 0, 0, false, "@EventText", eventLog.EventText);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@CreationTimestamp", eventLog.CreationTimestamp);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@ModificationTimestamp", eventLog.ModificationTimestamp);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@LogicalDelete", eventLog.LogicalDelete);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, "@EventLogId", eventLog.EventLogId);
				commandParameters.Add(commandParameter);		

				ConnectionSpecificEventLogUpdateCommandMagic(unitOfWorkContext, commandParameters, out commandText, out persistNotExpectedRecordsAffected);		
			}			
			
			retval = this.PersistModel<EventLog>(unitOfWorkContext, eventLog, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapToEventLog);
		
			if (!retval)
				return retval;
				
			ConnectionSpecificEventLogIdentityCommandMagic(unitOfWorkContext, commandParameters, out commandText, out queryExpectedRecordsAffected);
				
			if (wasNew && !DataType.IsNullOrWhiteSpace(commandText))
			{
				// select the identity on the same connection
				this.FillModel<EventLog>(unitOfWorkContext, eventLog, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEventLog);
			}
			
			if (wasNew)
			{
				this.OnPostInsertEventLog(unitOfWorkContext, eventLog);
			}
			else
			{
				this.OnPostUpdateEventLog(unitOfWorkContext, eventLog);
			}			

			return retval;
		}
		
		public bool DiscardEventLog(EventLog eventLog)
		{
			bool retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.DiscardEventLog(uowc, e), eventLog);
			
			return retval;
		}
		
		public bool DiscardEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog)
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected;
			bool retval;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)eventLog == null)
				throw new ArgumentNullException("eventLog");
			
			if (eventLog.IsNew)
				return true;
				
			commandParameters = new List<IDataParameter>();			
						
			commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, "@EventLogId", eventLog.EventLogId);
			commandParameters.Add(commandParameter);

			this.OnPreDeleteEventLog(unitOfWorkContext, eventLog);
		
			ConnectionSpecificEventLogDeleteCommandMagic(unitOfWorkContext, commandParameters, out commandText, out persistNotExpectedRecordsAffected);
			
			retval = this.PersistModel<EventLog>(unitOfWorkContext, eventLog, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapToEventLog);

			this.OnPostDeleteEventLog(unitOfWorkContext, eventLog);
						
			eventLog.IsNew = false;

			return retval;
		}
		
		private static void MapToEventLog(IDictionary<string, object> result, EventLog eventLog)
		{
			object value;
			
			if ((object)result == null)
				throw new ArgumentNullException("result");
				
			if ((object)eventLog == null)
				throw new ArgumentNullException("eventLog");
			
			if (result.TryGetValue("EventLogId", out value))
				eventLog.EventLogId = value.ChangeType<Nullable<Int32>>();

			if (result.TryGetValue("EventText", out value))
				eventLog.EventText = value.ChangeType<String>();

			if (result.TryGetValue("CreationTimestamp", out value))
				eventLog.CreationTimestamp = value.ChangeType<Nullable<DateTime>>();

			if (result.TryGetValue("ModificationTimestamp", out value))
				eventLog.ModificationTimestamp = value.ChangeType<Nullable<DateTime>>();

			if (result.TryGetValue("LogicalDelete", out value))
				eventLog.LogicalDelete = value.ChangeType<Nullable<Boolean>>();
		}
		
		private static void ConnectionSpecificEventLogInsertCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEventLogInsertCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEventLogInsertCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEventLogInsertCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEventLogInsertCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EventText");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@CreationTimestamp");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@ModificationTimestamp");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@LogicalDelete");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandText = @"INSERT INTO [dbo].[EventLog] ([EventText], [CreationTimestamp], [ModificationTimestamp], [LogicalDelete]) VALUES (@EventText, @CreationTimestamp, @ModificationTimestamp, @LogicalDelete);	SELECT SCOPE_IDENTITY() as [EventLogId];";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEventLogInsertCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"INSERT INTO [EventLog] ([EventText], [CreationTimestamp], [ModificationTimestamp], [LogicalDelete]) VALUES (@EventText, @CreationTimestamp, @ModificationTimestamp, @LogicalDelete);";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEventLogInsertCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"INSERT INTO EventLog (EventText, CreationTimestamp, ModificationTimestamp, LogicalDelete) VALUES (@EventText, @CreationTimestamp, @ModificationTimestamp, @LogicalDelete);";
			persistNotExpectedRecordsAffected = SQLITE_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEventLogIdentityCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEventLogIdentityCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEventLogIdentityCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEventLogIdentityCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEventLogIdentityCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

		

			commandText = @"";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEventLogIdentityCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT @@IDENTITY AS [EventLogId]";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEventLogIdentityCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT LAST_INSERT_ROWID() AS EventLogId";
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEventLogUpdateCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEventLogUpdateCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEventLogUpdateCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEventLogUpdateCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEventLogUpdateCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EventText");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@CreationTimestamp");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@ModificationTimestamp");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@LogicalDelete");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EventLogId");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandText = @"UPDATE [dbo].[EventLog] SET [EventText] = @EventText, [CreationTimestamp] = @CreationTimestamp, [ModificationTimestamp] = @ModificationTimestamp, [LogicalDelete] = @LogicalDelete WHERE [EventLogId] = @EventLogId";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEventLogUpdateCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"UPDATE [EventLog] SET [EventText] = @EventText, [CreationTimestamp] = @CreationTimestamp, [ModificationTimestamp] = @ModificationTimestamp, [LogicalDelete] = @LogicalDelete WHERE [EventLogId] = @EventLogId";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEventLogUpdateCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"UPDATE EventLog SET EventText = @EventText, CreationTimestamp = @CreationTimestamp, ModificationTimestamp = @ModificationTimestamp, LogicalDelete = @LogicalDelete WHERE EventLogId = @EventLogId";
			persistNotExpectedRecordsAffected = SQLITE_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEventLogDeleteCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEventLogDeleteCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEventLogDeleteCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEventLogDeleteCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEventLogDeleteCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EventLogId");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandText = @"DELETE FROM [dbo].[EventLog] WHERE [EventLogId] = @EventLogId";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEventLogDeleteCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"DELETE FROM [EventLog] WHERE [EventLogId] = @EventLogId";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEventLogDeleteCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"DELETE FROM EventLog WHERE EventLogId = @EventLogId";
			persistNotExpectedRecordsAffected = SQLITE_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEventLogSelectOneCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEventLogSelectOneCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEventLogSelectOneCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEventLogSelectOneCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEventLogSelectOneCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EventLogId");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandText = @"SELECT t.[EventLogId], t.[EventText], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [dbo].[EventLog] t WHERE t.[EventLogId] = @EventLogId ORDER BY t.[EventLogId] ASC";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEventLogSelectOneCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.[EventLogId], t.[EventText], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [EventLog] t WHERE t.[EventLogId] = @EventLogId ORDER BY t.[EventLogId] ASC";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEventLogSelectOneCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.EventLogId AS EventLogId, t.EventText AS EventText, t.CreationTimestamp AS CreationTimestamp, t.ModificationTimestamp AS ModificationTimestamp, t.LogicalDelete AS LogicalDelete FROM EventLog t WHERE t.EventLogId = @EventLogId ORDER BY t.EventLogId ASC";
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEventLogSelectAllCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEventLogSelectAllCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEventLogSelectAllCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEventLogSelectAllCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEventLogSelectAllCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");



			commandText = @"SELECT t.[EventLogId], t.[EventText], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [dbo].[EventLog] t ORDER BY t.[EventLogId] ASC";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEventLogSelectAllCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.[EventLogId], t.[EventText], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [EventLog] t ORDER BY t.[EventLogId] ASC";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEventLogSelectAllCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.EventLogId AS EventLogId, t.EventText AS EventText, t.CreationTimestamp AS CreationTimestamp, t.ModificationTimestamp AS ModificationTimestamp, t.LogicalDelete AS LogicalDelete FROM EventLog t ORDER BY t.EventLogId ASC";
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEventLogSelectForCommandMagic(UnitOfWorkContext unitOfWorkContext, EventLog_Query eventLogQuery, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)eventLogQuery == null)
				throw new ArgumentNullException("eventLogQuery");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEventLogSelectForCommandMagic(eventLogQuery, commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEventLogSelectForCommandMagic(eventLogQuery, commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEventLogSelectForCommandMagic(eventLogQuery, commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEventLogSelectForCommandMagic(EventLog_Query eventLogQuery, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;			
			string predicateFragment = "", sortFragment = "";
			object value;
			
			if ((object)eventLogQuery == null)
				throw new ArgumentNullException("eventLogQuery");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EventText");

			if ((object)commandParameter != null) // OK here to be NULL
			{			
			
				Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@CreationTimestamp");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@ModificationTimestamp");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@LogicalDelete");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandText = @"SELECT t.[EventLogId], t.[EventText], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [dbo].[EventLog] t WHERE (1 = 1) {0}";

			value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.EventText, default(String)) ? eventLogQuery.EventText : null;
			
			if ((object)value != null && (object)eventLogQuery.IsNullEventText == null)												
			{
				predicateFragment += " AND [EventText] = @EventText";
			}
			else if ((object)eventLogQuery.IsNullEventText != null)
			{
				predicateFragment += string.Format(" AND [EventText] IS {0} NULL", (bool)eventLogQuery.IsNullEventText ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.CreationTimestamp, default(Nullable<DateTime>)) ? eventLogQuery.CreationTimestamp : null;
			
			if ((object)value != null && (object)eventLogQuery.IsNullCreationTimestamp == null)												
			{
				predicateFragment += " AND [CreationTimestamp] = @CreationTimestamp";
			}
			else if ((object)eventLogQuery.IsNullCreationTimestamp != null)
			{
				predicateFragment += string.Format(" AND [CreationTimestamp] IS {0} NULL", (bool)eventLogQuery.IsNullCreationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.ModificationTimestamp, default(Nullable<DateTime>)) ? eventLogQuery.ModificationTimestamp : null;
			
			if ((object)value != null && (object)eventLogQuery.IsNullModificationTimestamp == null)												
			{
				predicateFragment += " AND [ModificationTimestamp] = @ModificationTimestamp";
			}
			else if ((object)eventLogQuery.IsNullModificationTimestamp != null)
			{
				predicateFragment += string.Format(" AND [ModificationTimestamp] IS {0} NULL", (bool)eventLogQuery.IsNullModificationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.LogicalDelete, default(Nullable<Boolean>)) ? eventLogQuery.LogicalDelete : null;
			
			if ((object)value != null && (object)eventLogQuery.IsNullLogicalDelete == null)												
			{
				predicateFragment += " AND [LogicalDelete] = @LogicalDelete";
			}
			else if ((object)eventLogQuery.IsNullLogicalDelete != null)
			{
				predicateFragment += string.Format(" AND [LogicalDelete] IS {0} NULL", (bool)eventLogQuery.IsNullLogicalDelete ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				
			
			commandText = string.Format(commandText, predicateFragment, sortFragment);
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEventLogSelectForCommandMagic(EventLog_Query eventLogQuery, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;			
			string predicateFragment = "", sortFragment = "";
			object value;
			
			if ((object)eventLogQuery == null)
				throw new ArgumentNullException("eventLogQuery");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.[EventLogId], t.[EventText], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [EventLog] t WHERE (1 = 1) {0}";

			value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.EventText, default(String)) ? eventLogQuery.EventText : null;
			
			if ((object)value != null && (object)eventLogQuery.IsNullEventText == null)												
			{
				predicateFragment += " AND [EventText] = @EventText";
			}
			else if ((object)eventLogQuery.IsNullEventText != null)
			{
				predicateFragment += string.Format(" AND [EventText] IS {0} NULL", (bool)eventLogQuery.IsNullEventText ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.CreationTimestamp, default(Nullable<DateTime>)) ? eventLogQuery.CreationTimestamp : null;
			
			if ((object)value != null && (object)eventLogQuery.IsNullCreationTimestamp == null)												
			{
				predicateFragment += " AND [CreationTimestamp] = @CreationTimestamp";
			}
			else if ((object)eventLogQuery.IsNullCreationTimestamp != null)
			{
				predicateFragment += string.Format(" AND [CreationTimestamp] IS {0} NULL", (bool)eventLogQuery.IsNullCreationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.ModificationTimestamp, default(Nullable<DateTime>)) ? eventLogQuery.ModificationTimestamp : null;
			
			if ((object)value != null && (object)eventLogQuery.IsNullModificationTimestamp == null)												
			{
				predicateFragment += " AND [ModificationTimestamp] = @ModificationTimestamp";
			}
			else if ((object)eventLogQuery.IsNullModificationTimestamp != null)
			{
				predicateFragment += string.Format(" AND [ModificationTimestamp] IS {0} NULL", (bool)eventLogQuery.IsNullModificationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.LogicalDelete, default(Nullable<Boolean>)) ? eventLogQuery.LogicalDelete : null;
			
			if ((object)value != null && (object)eventLogQuery.IsNullLogicalDelete == null)												
			{
				predicateFragment += " AND [LogicalDelete] = @LogicalDelete";
			}
			else if ((object)eventLogQuery.IsNullLogicalDelete != null)
			{
				predicateFragment += string.Format(" AND [LogicalDelete] IS {0} NULL", (bool)eventLogQuery.IsNullLogicalDelete ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				
			
			commandText = string.Format(commandText, predicateFragment, sortFragment);
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEventLogSelectForCommandMagic(EventLog_Query eventLogQuery, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;			
			string predicateFragment = "", sortFragment = "";
			object value;
			
			if ((object)eventLogQuery == null)
				throw new ArgumentNullException("eventLogQuery");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.EventLogId AS EventLogId, t.EventText AS EventText, t.CreationTimestamp AS CreationTimestamp, t.ModificationTimestamp AS ModificationTimestamp, t.LogicalDelete AS LogicalDelete FROM EventLog t WHERE (1 = 1) {0}";

			value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.EventText, default(String)) ? eventLogQuery.EventText : null;
			
			if ((object)value != null && (object)eventLogQuery.IsNullEventText == null)												
			{
				predicateFragment += " AND EventText = @EventText";
			}
			else if ((object)eventLogQuery.IsNullEventText != null)
			{
				predicateFragment += string.Format(" AND EventText IS {0} NULL", (bool)eventLogQuery.IsNullEventText ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.CreationTimestamp, default(Nullable<DateTime>)) ? eventLogQuery.CreationTimestamp : null;
			
			if ((object)value != null && (object)eventLogQuery.IsNullCreationTimestamp == null)												
			{
				predicateFragment += " AND CreationTimestamp = @CreationTimestamp";
			}
			else if ((object)eventLogQuery.IsNullCreationTimestamp != null)
			{
				predicateFragment += string.Format(" AND CreationTimestamp IS {0} NULL", (bool)eventLogQuery.IsNullCreationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.ModificationTimestamp, default(Nullable<DateTime>)) ? eventLogQuery.ModificationTimestamp : null;
			
			if ((object)value != null && (object)eventLogQuery.IsNullModificationTimestamp == null)												
			{
				predicateFragment += " AND ModificationTimestamp = @ModificationTimestamp";
			}
			else if ((object)eventLogQuery.IsNullModificationTimestamp != null)
			{
				predicateFragment += string.Format(" AND ModificationTimestamp IS {0} NULL", (bool)eventLogQuery.IsNullModificationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(eventLogQuery.LogicalDelete, default(Nullable<Boolean>)) ? eventLogQuery.LogicalDelete : null;
			
			if ((object)value != null && (object)eventLogQuery.IsNullLogicalDelete == null)												
			{
				predicateFragment += " AND LogicalDelete = @LogicalDelete";
			}
			else if ((object)eventLogQuery.IsNullLogicalDelete != null)
			{
				predicateFragment += string.Format(" AND LogicalDelete IS {0} NULL", (bool)eventLogQuery.IsNullLogicalDelete ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			commandText = string.Format(commandText, predicateFragment, sortFragment);
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		partial void OnPreInsertEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog);
		
		partial void OnPostInsertEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog);
		
		partial void OnPreUpdateEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog);
		
		partial void OnPostUpdateEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog);
		
		partial void OnPreDeleteEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog);
		
		partial void OnPostDeleteEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog);
		
		partial void OnSelectEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog);		

		public EmailMessage LoadEmailMessage(Int32 emailMessageId)
		{
			EmailMessage retval;
						
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, p1) => this.LoadEmailMessage(uowc, p1), emailMessageId);
			
			return retval;
		}
		
		public EmailMessage LoadEmailMessage(UnitOfWorkContext unitOfWorkContext, Int32 emailMessageId)
		{			
			EmailMessage emailMessage;			
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int queryExpectedRecordsAffected;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			commandParameters = new List<IDataParameter>();
			
			commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, "@EmailMessageId", emailMessageId);
			commandParameters.Add(commandParameter);			
			
			ConnectionSpecificEmailMessageSelectOneCommandMagic(unitOfWorkContext, commandParameters, out commandText, out queryExpectedRecordsAffected);
			
			emailMessage = this.FetchModel<EmailMessage>(unitOfWorkContext, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEmailMessage);
							
			this.OnSelectEmailMessage(unitOfWorkContext, emailMessage);

			return emailMessage;
		}
		
		public IList<EmailMessage> FindEmailMessages(EmailMessage_Query emailMessageQuery)
		{
			IList<EmailMessage> retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.FindEmailMessages(uowc, e), emailMessageQuery);
			
			return retval;
		}
		
		public IList<EmailMessage> FindEmailMessages(UnitOfWorkContext unitOfWorkContext, EmailMessage_Query emailMessageQuery)
		{
			IList<EmailMessage> emailMessages;			
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int queryExpectedRecordsAffected;
			object value;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			commandParameters = new List<IDataParameter>();
			
			if ((object)emailMessageQuery == null)			
			{
				ConnectionSpecificEmailMessageSelectAllCommandMagic(unitOfWorkContext, commandParameters, out commandText, out queryExpectedRecordsAffected);
			}
			else
			{
				value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.From, default(String)) ? emailMessageQuery.From : null;
				
				if ((object)value != null && (object)emailMessageQuery.IsNullFrom == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, "@From", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Sender, default(String)) ? emailMessageQuery.Sender : null;
				
				if ((object)value != null && (object)emailMessageQuery.IsNullSender == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, "@Sender", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.ReplyTo, default(String)) ? emailMessageQuery.ReplyTo : null;
				
				if ((object)value != null && (object)emailMessageQuery.IsNullReplyTo == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, "@ReplyTo", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.To, default(String)) ? emailMessageQuery.To : null;
				
				if ((object)value != null && (object)emailMessageQuery.IsNullTo == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, "@To", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Cc, default(String)) ? emailMessageQuery.Cc : null;
				
				if ((object)value != null && (object)emailMessageQuery.IsNullCc == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, "@Cc", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Bcc, default(String)) ? emailMessageQuery.Bcc : null;
				
				if ((object)value != null && (object)emailMessageQuery.IsNullBcc == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, "@Bcc", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Subject, default(String)) ? emailMessageQuery.Subject : null;
				
				if ((object)value != null && (object)emailMessageQuery.IsNullSubject == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, "@Subject", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.IsBodyHtml, default(Nullable<Boolean>)) ? emailMessageQuery.IsBodyHtml : null;
				
				if ((object)value != null && (object)emailMessageQuery.IsNullIsBodyHtml == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@IsBodyHtml", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Body, default(String)) ? emailMessageQuery.Body : null;
				
				if ((object)value != null && (object)emailMessageQuery.IsNullBody == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 0, 0, 0, false, "@Body", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Processed, default(Nullable<Boolean>)) ? emailMessageQuery.Processed : null;
				
				if ((object)value != null && (object)emailMessageQuery.IsNullProcessed == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@Processed", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.CreationTimestamp, default(Nullable<DateTime>)) ? emailMessageQuery.CreationTimestamp : null;
				
				if ((object)value != null && (object)emailMessageQuery.IsNullCreationTimestamp == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@CreationTimestamp", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.ModificationTimestamp, default(Nullable<DateTime>)) ? emailMessageQuery.ModificationTimestamp : null;
				
				if ((object)value != null && (object)emailMessageQuery.IsNullModificationTimestamp == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@ModificationTimestamp", value);
					commandParameters.Add(commandParameter);
				}

				value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.LogicalDelete, default(Nullable<Boolean>)) ? emailMessageQuery.LogicalDelete : null;
				
				if ((object)value != null && (object)emailMessageQuery.IsNullLogicalDelete == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@LogicalDelete", value);
					commandParameters.Add(commandParameter);
				}
				
				ConnectionSpecificEmailMessageSelectForCommandMagic(unitOfWorkContext, emailMessageQuery, commandParameters, out commandText, out queryExpectedRecordsAffected);
			}
			
			emailMessages = this.QueryModel<EmailMessage>(unitOfWorkContext, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEmailMessage);			
			
			foreach (EmailMessage emailMessage in emailMessages)
				this.OnSelectEmailMessage(unitOfWorkContext, emailMessage);
							
			return emailMessages;
		}
		
		public bool SaveEmailMessage(EmailMessage emailMessage)
		{
			bool retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.SaveEmailMessage(uowc, e), emailMessage);
			
			return retval;
		}
		
		public bool SaveEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage)
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected, queryExpectedRecordsAffected;
			bool wasNew, retval;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)emailMessage == null)
				throw new ArgumentNullException("emailMessage");
			
			wasNew = emailMessage.IsNew;
			
			commandParameters = new List<IDataParameter>();
			
			if (wasNew)
			{	
				this.OnPreInsertEmailMessage(unitOfWorkContext, emailMessage);
				
				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, "@From", emailMessage.From);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, "@Sender", emailMessage.Sender);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, "@ReplyTo", emailMessage.ReplyTo);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, "@To", emailMessage.To);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, "@Cc", emailMessage.Cc);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, "@Bcc", emailMessage.Bcc);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, "@Subject", emailMessage.Subject);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@IsBodyHtml", emailMessage.IsBodyHtml);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 0, 0, 0, false, "@Body", emailMessage.Body);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@Processed", emailMessage.Processed);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@CreationTimestamp", emailMessage.CreationTimestamp);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@ModificationTimestamp", emailMessage.ModificationTimestamp);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@LogicalDelete", emailMessage.LogicalDelete);
				commandParameters.Add(commandParameter);		

				ConnectionSpecificEmailMessageInsertCommandMagic(unitOfWorkContext, commandParameters, out commandText, out persistNotExpectedRecordsAffected);
			}
			else
			{
				this.OnPreUpdateEmailMessage(unitOfWorkContext, emailMessage);
				
				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, "@From", emailMessage.From);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, "@Sender", emailMessage.Sender);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, "@ReplyTo", emailMessage.ReplyTo);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, "@To", emailMessage.To);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, "@Cc", emailMessage.Cc);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, "@Bcc", emailMessage.Bcc);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, "@Subject", emailMessage.Subject);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@IsBodyHtml", emailMessage.IsBodyHtml);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 0, 0, 0, false, "@Body", emailMessage.Body);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@Processed", emailMessage.Processed);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@CreationTimestamp", emailMessage.CreationTimestamp);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, "@ModificationTimestamp", emailMessage.ModificationTimestamp);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, "@LogicalDelete", emailMessage.LogicalDelete);
				commandParameters.Add(commandParameter);

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, "@EmailMessageId", emailMessage.EmailMessageId);
				commandParameters.Add(commandParameter);		

				ConnectionSpecificEmailMessageUpdateCommandMagic(unitOfWorkContext, commandParameters, out commandText, out persistNotExpectedRecordsAffected);		
			}			
			
			retval = this.PersistModel<EmailMessage>(unitOfWorkContext, emailMessage, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapToEmailMessage);
		
			if (!retval)
				return retval;
				
			ConnectionSpecificEmailMessageIdentityCommandMagic(unitOfWorkContext, commandParameters, out commandText, out queryExpectedRecordsAffected);
				
			if (wasNew && !DataType.IsNullOrWhiteSpace(commandText))
			{
				// select the identity on the same connection
				this.FillModel<EmailMessage>(unitOfWorkContext, emailMessage, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEmailMessage);
			}
			
			if (wasNew)
			{
				this.OnPostInsertEmailMessage(unitOfWorkContext, emailMessage);
			}
			else
			{
				this.OnPostUpdateEmailMessage(unitOfWorkContext, emailMessage);
			}			

			return retval;
		}
		
		public bool DiscardEmailMessage(EmailMessage emailMessage)
		{
			bool retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.DiscardEmailMessage(uowc, e), emailMessage);
			
			return retval;
		}
		
		public bool DiscardEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage)
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected;
			bool retval;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)emailMessage == null)
				throw new ArgumentNullException("emailMessage");
			
			if (emailMessage.IsNew)
				return true;
				
			commandParameters = new List<IDataParameter>();			
						
			commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, "@EmailMessageId", emailMessage.EmailMessageId);
			commandParameters.Add(commandParameter);

			this.OnPreDeleteEmailMessage(unitOfWorkContext, emailMessage);
		
			ConnectionSpecificEmailMessageDeleteCommandMagic(unitOfWorkContext, commandParameters, out commandText, out persistNotExpectedRecordsAffected);
			
			retval = this.PersistModel<EmailMessage>(unitOfWorkContext, emailMessage, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapToEmailMessage);

			this.OnPostDeleteEmailMessage(unitOfWorkContext, emailMessage);
						
			emailMessage.IsNew = false;

			return retval;
		}
		
		private static void MapToEmailMessage(IDictionary<string, object> result, EmailMessage emailMessage)
		{
			object value;
			
			if ((object)result == null)
				throw new ArgumentNullException("result");
				
			if ((object)emailMessage == null)
				throw new ArgumentNullException("emailMessage");
			
			if (result.TryGetValue("EmailMessageId", out value))
				emailMessage.EmailMessageId = value.ChangeType<Nullable<Int32>>();

			if (result.TryGetValue("From", out value))
				emailMessage.From = value.ChangeType<String>();

			if (result.TryGetValue("Sender", out value))
				emailMessage.Sender = value.ChangeType<String>();

			if (result.TryGetValue("ReplyTo", out value))
				emailMessage.ReplyTo = value.ChangeType<String>();

			if (result.TryGetValue("To", out value))
				emailMessage.To = value.ChangeType<String>();

			if (result.TryGetValue("Cc", out value))
				emailMessage.Cc = value.ChangeType<String>();

			if (result.TryGetValue("Bcc", out value))
				emailMessage.Bcc = value.ChangeType<String>();

			if (result.TryGetValue("Subject", out value))
				emailMessage.Subject = value.ChangeType<String>();

			if (result.TryGetValue("IsBodyHtml", out value))
				emailMessage.IsBodyHtml = value.ChangeType<Nullable<Boolean>>();

			if (result.TryGetValue("Body", out value))
				emailMessage.Body = value.ChangeType<String>();

			if (result.TryGetValue("Processed", out value))
				emailMessage.Processed = value.ChangeType<Nullable<Boolean>>();

			if (result.TryGetValue("CreationTimestamp", out value))
				emailMessage.CreationTimestamp = value.ChangeType<Nullable<DateTime>>();

			if (result.TryGetValue("ModificationTimestamp", out value))
				emailMessage.ModificationTimestamp = value.ChangeType<Nullable<DateTime>>();

			if (result.TryGetValue("LogicalDelete", out value))
				emailMessage.LogicalDelete = value.ChangeType<Nullable<Boolean>>();
		}
		
		private static void ConnectionSpecificEmailMessageInsertCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEmailMessageInsertCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEmailMessageInsertCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEmailMessageInsertCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEmailMessageInsertCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@From");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Sender");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@ReplyTo");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@To");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Cc");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Bcc");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Subject");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@IsBodyHtml");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Body");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Processed");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@CreationTimestamp");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@ModificationTimestamp");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@LogicalDelete");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandText = @"INSERT INTO [dbo].[EmailMessage] ([From], [Sender], [ReplyTo], [To], [CC], [BCC], [Subject], [IsBodyHtml], [Body], [Processed], [CreationTimestamp], [ModificationTimestamp], [LogicalDelete]) VALUES (@From, @Sender, @ReplyTo, @To, @CC, @BCC, @Subject, @IsBodyHtml, @Body, @Processed, @CreationTimestamp, @ModificationTimestamp, @LogicalDelete);	SELECT SCOPE_IDENTITY() as [EmailMessageId];";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEmailMessageInsertCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"INSERT INTO [EmailMessage] ([From], [Sender], [ReplyTo], [To], [CC], [BCC], [Subject], [IsBodyHtml], [Body], [Processed], [CreationTimestamp], [ModificationTimestamp], [LogicalDelete]) VALUES (@From, @Sender, @ReplyTo, @To, @CC, @BCC, @Subject, @IsBodyHtml, @Body, @Processed, @CreationTimestamp, @ModificationTimestamp, @LogicalDelete);";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEmailMessageInsertCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"INSERT INTO EmailMessage (From, Sender, ReplyTo, To, CC, BCC, Subject, IsBodyHtml, Body, Processed, CreationTimestamp, ModificationTimestamp, LogicalDelete) VALUES (@From, @Sender, @ReplyTo, @To, @CC, @BCC, @Subject, @IsBodyHtml, @Body, @Processed, @CreationTimestamp, @ModificationTimestamp, @LogicalDelete);";
			persistNotExpectedRecordsAffected = SQLITE_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEmailMessageIdentityCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEmailMessageIdentityCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEmailMessageIdentityCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEmailMessageIdentityCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEmailMessageIdentityCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

		

			commandText = @"";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEmailMessageIdentityCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT @@IDENTITY AS [EmailMessageId]";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEmailMessageIdentityCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT LAST_INSERT_ROWID() AS EmailMessageId";
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEmailMessageUpdateCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEmailMessageUpdateCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEmailMessageUpdateCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEmailMessageUpdateCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEmailMessageUpdateCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@From");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Sender");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@ReplyTo");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@To");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Cc");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Bcc");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Subject");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@IsBodyHtml");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Body");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Processed");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@CreationTimestamp");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@ModificationTimestamp");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@LogicalDelete");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EmailMessageId");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandText = @"UPDATE [dbo].[EmailMessage] SET [From] = @From, [Sender] = @Sender, [ReplyTo] = @ReplyTo, [To] = @To, [CC] = @CC, [BCC] = @BCC, [Subject] = @Subject, [IsBodyHtml] = @IsBodyHtml, [Body] = @Body, [Processed] = @Processed, [CreationTimestamp] = @CreationTimestamp, [ModificationTimestamp] = @ModificationTimestamp, [LogicalDelete] = @LogicalDelete WHERE [EmailMessageId] = @EmailMessageId";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEmailMessageUpdateCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"UPDATE [EmailMessage] SET [From] = @From, [Sender] = @Sender, [ReplyTo] = @ReplyTo, [To] = @To, [CC] = @CC, [BCC] = @BCC, [Subject] = @Subject, [IsBodyHtml] = @IsBodyHtml, [Body] = @Body, [Processed] = @Processed, [CreationTimestamp] = @CreationTimestamp, [ModificationTimestamp] = @ModificationTimestamp, [LogicalDelete] = @LogicalDelete WHERE [EmailMessageId] = @EmailMessageId";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEmailMessageUpdateCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"UPDATE EmailMessage SET From = @From, Sender = @Sender, ReplyTo = @ReplyTo, To = @To, CC = @CC, BCC = @BCC, Subject = @Subject, IsBodyHtml = @IsBodyHtml, Body = @Body, Processed = @Processed, CreationTimestamp = @CreationTimestamp, ModificationTimestamp = @ModificationTimestamp, LogicalDelete = @LogicalDelete WHERE EmailMessageId = @EmailMessageId";
			persistNotExpectedRecordsAffected = SQLITE_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEmailMessageDeleteCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEmailMessageDeleteCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEmailMessageDeleteCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEmailMessageDeleteCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEmailMessageDeleteCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EmailMessageId");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandText = @"DELETE FROM [dbo].[EmailMessage] WHERE [EmailMessageId] = @EmailMessageId";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEmailMessageDeleteCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"DELETE FROM [EmailMessage] WHERE [EmailMessageId] = @EmailMessageId";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEmailMessageDeleteCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"DELETE FROM EmailMessage WHERE EmailMessageId = @EmailMessageId";
			persistNotExpectedRecordsAffected = SQLITE_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEmailMessageSelectOneCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEmailMessageSelectOneCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEmailMessageSelectOneCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEmailMessageSelectOneCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEmailMessageSelectOneCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@EmailMessageId");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandText = @"SELECT t.[EmailMessageId], t.[From], t.[Sender], t.[ReplyTo], t.[To], t.[CC], t.[BCC], t.[Subject], t.[IsBodyHtml], t.[Body], t.[Processed], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [dbo].[EmailMessage] t WHERE t.[EmailMessageId] = @EmailMessageId ORDER BY t.[EmailMessageId] ASC";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEmailMessageSelectOneCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.[EmailMessageId], t.[From], t.[Sender], t.[ReplyTo], t.[To], t.[CC], t.[BCC], t.[Subject], t.[IsBodyHtml], t.[Body], t.[Processed], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [EmailMessage] t WHERE t.[EmailMessageId] = @EmailMessageId ORDER BY t.[EmailMessageId] ASC";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEmailMessageSelectOneCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.EmailMessageId AS EmailMessageId, t.From AS From, t.Sender AS Sender, t.ReplyTo AS ReplyTo, t.To AS To, t.CC AS CC, t.BCC AS BCC, t.Subject AS Subject, t.IsBodyHtml AS IsBodyHtml, t.Body AS Body, t.Processed AS Processed, t.CreationTimestamp AS CreationTimestamp, t.ModificationTimestamp AS ModificationTimestamp, t.LogicalDelete AS LogicalDelete FROM EmailMessage t WHERE t.EmailMessageId = @EmailMessageId ORDER BY t.EmailMessageId ASC";
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEmailMessageSelectAllCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEmailMessageSelectAllCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEmailMessageSelectAllCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEmailMessageSelectAllCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEmailMessageSelectAllCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");



			commandText = @"SELECT t.[EmailMessageId], t.[From], t.[Sender], t.[ReplyTo], t.[To], t.[CC], t.[BCC], t.[Subject], t.[IsBodyHtml], t.[Body], t.[Processed], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [dbo].[EmailMessage] t ORDER BY t.[EmailMessageId] ASC";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEmailMessageSelectAllCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.[EmailMessageId], t.[From], t.[Sender], t.[ReplyTo], t.[To], t.[CC], t.[BCC], t.[Subject], t.[IsBodyHtml], t.[Body], t.[Processed], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [EmailMessage] t ORDER BY t.[EmailMessageId] ASC";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEmailMessageSelectAllCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.EmailMessageId AS EmailMessageId, t.From AS From, t.Sender AS Sender, t.ReplyTo AS ReplyTo, t.To AS To, t.CC AS CC, t.BCC AS BCC, t.Subject AS Subject, t.IsBodyHtml AS IsBodyHtml, t.Body AS Body, t.Processed AS Processed, t.CreationTimestamp AS CreationTimestamp, t.ModificationTimestamp AS ModificationTimestamp, t.LogicalDelete AS LogicalDelete FROM EmailMessage t ORDER BY t.EmailMessageId ASC";
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecificEmailMessageSelectForCommandMagic(UnitOfWorkContext unitOfWorkContext, EmailMessage_Query emailMessageQuery, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)emailMessageQuery == null)
				throw new ArgumentNullException("emailMessageQuery");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecificEmailMessageSelectForCommandMagic(emailMessageQuery, commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecificEmailMessageSelectForCommandMagic(emailMessageQuery, commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecificEmailMessageSelectForCommandMagic(emailMessageQuery, commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecificEmailMessageSelectForCommandMagic(EmailMessage_Query emailMessageQuery, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;			
			string predicateFragment = "", sortFragment = "";
			object value;
			
			if ((object)emailMessageQuery == null)
				throw new ArgumentNullException("emailMessageQuery");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@From");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Sender");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@ReplyTo");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@To");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Cc");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Bcc");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Subject");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@IsBodyHtml");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Body");

			if ((object)commandParameter != null) // OK here to be NULL
			{			
			
				Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@Processed");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@CreationTimestamp");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@ModificationTimestamp");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@LogicalDelete");

			if ((object)commandParameter != null) // OK here to be NULL
			{
			}

			commandText = @"SELECT t.[EmailMessageId], t.[From], t.[Sender], t.[ReplyTo], t.[To], t.[CC], t.[BCC], t.[Subject], t.[IsBodyHtml], t.[Body], t.[Processed], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [dbo].[EmailMessage] t WHERE (1 = 1) {0}";

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.From, default(String)) ? emailMessageQuery.From : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullFrom == null)												
			{
				predicateFragment += " AND [From] = @From";
			}
			else if ((object)emailMessageQuery.IsNullFrom != null)
			{
				predicateFragment += string.Format(" AND [From] IS {0} NULL", (bool)emailMessageQuery.IsNullFrom ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Sender, default(String)) ? emailMessageQuery.Sender : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullSender == null)												
			{
				predicateFragment += " AND [Sender] = @Sender";
			}
			else if ((object)emailMessageQuery.IsNullSender != null)
			{
				predicateFragment += string.Format(" AND [Sender] IS {0} NULL", (bool)emailMessageQuery.IsNullSender ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.ReplyTo, default(String)) ? emailMessageQuery.ReplyTo : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullReplyTo == null)												
			{
				predicateFragment += " AND [ReplyTo] = @ReplyTo";
			}
			else if ((object)emailMessageQuery.IsNullReplyTo != null)
			{
				predicateFragment += string.Format(" AND [ReplyTo] IS {0} NULL", (bool)emailMessageQuery.IsNullReplyTo ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.To, default(String)) ? emailMessageQuery.To : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullTo == null)												
			{
				predicateFragment += " AND [To] = @To";
			}
			else if ((object)emailMessageQuery.IsNullTo != null)
			{
				predicateFragment += string.Format(" AND [To] IS {0} NULL", (bool)emailMessageQuery.IsNullTo ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Cc, default(String)) ? emailMessageQuery.Cc : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullCc == null)												
			{
				predicateFragment += " AND [CC] = @Cc";
			}
			else if ((object)emailMessageQuery.IsNullCc != null)
			{
				predicateFragment += string.Format(" AND [CC] IS {0} NULL", (bool)emailMessageQuery.IsNullCc ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Bcc, default(String)) ? emailMessageQuery.Bcc : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullBcc == null)												
			{
				predicateFragment += " AND [BCC] = @Bcc";
			}
			else if ((object)emailMessageQuery.IsNullBcc != null)
			{
				predicateFragment += string.Format(" AND [BCC] IS {0} NULL", (bool)emailMessageQuery.IsNullBcc ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Subject, default(String)) ? emailMessageQuery.Subject : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullSubject == null)												
			{
				predicateFragment += " AND [Subject] = @Subject";
			}
			else if ((object)emailMessageQuery.IsNullSubject != null)
			{
				predicateFragment += string.Format(" AND [Subject] IS {0} NULL", (bool)emailMessageQuery.IsNullSubject ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.IsBodyHtml, default(Nullable<Boolean>)) ? emailMessageQuery.IsBodyHtml : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullIsBodyHtml == null)												
			{
				predicateFragment += " AND [IsBodyHtml] = @IsBodyHtml";
			}
			else if ((object)emailMessageQuery.IsNullIsBodyHtml != null)
			{
				predicateFragment += string.Format(" AND [IsBodyHtml] IS {0} NULL", (bool)emailMessageQuery.IsNullIsBodyHtml ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Body, default(String)) ? emailMessageQuery.Body : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullBody == null)												
			{
				predicateFragment += " AND [Body] = @Body";
			}
			else if ((object)emailMessageQuery.IsNullBody != null)
			{
				predicateFragment += string.Format(" AND [Body] IS {0} NULL", (bool)emailMessageQuery.IsNullBody ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Processed, default(Nullable<Boolean>)) ? emailMessageQuery.Processed : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullProcessed == null)												
			{
				predicateFragment += " AND [Processed] = @Processed";
			}
			else if ((object)emailMessageQuery.IsNullProcessed != null)
			{
				predicateFragment += string.Format(" AND [Processed] IS {0} NULL", (bool)emailMessageQuery.IsNullProcessed ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.CreationTimestamp, default(Nullable<DateTime>)) ? emailMessageQuery.CreationTimestamp : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullCreationTimestamp == null)												
			{
				predicateFragment += " AND [CreationTimestamp] = @CreationTimestamp";
			}
			else if ((object)emailMessageQuery.IsNullCreationTimestamp != null)
			{
				predicateFragment += string.Format(" AND [CreationTimestamp] IS {0} NULL", (bool)emailMessageQuery.IsNullCreationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.ModificationTimestamp, default(Nullable<DateTime>)) ? emailMessageQuery.ModificationTimestamp : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullModificationTimestamp == null)												
			{
				predicateFragment += " AND [ModificationTimestamp] = @ModificationTimestamp";
			}
			else if ((object)emailMessageQuery.IsNullModificationTimestamp != null)
			{
				predicateFragment += string.Format(" AND [ModificationTimestamp] IS {0} NULL", (bool)emailMessageQuery.IsNullModificationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.LogicalDelete, default(Nullable<Boolean>)) ? emailMessageQuery.LogicalDelete : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullLogicalDelete == null)												
			{
				predicateFragment += " AND [LogicalDelete] = @LogicalDelete";
			}
			else if ((object)emailMessageQuery.IsNullLogicalDelete != null)
			{
				predicateFragment += string.Format(" AND [LogicalDelete] IS {0} NULL", (bool)emailMessageQuery.IsNullLogicalDelete ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				
			
			commandText = string.Format(commandText, predicateFragment, sortFragment);
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecificEmailMessageSelectForCommandMagic(EmailMessage_Query emailMessageQuery, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;			
			string predicateFragment = "", sortFragment = "";
			object value;
			
			if ((object)emailMessageQuery == null)
				throw new ArgumentNullException("emailMessageQuery");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.[EmailMessageId], t.[From], t.[Sender], t.[ReplyTo], t.[To], t.[CC], t.[BCC], t.[Subject], t.[IsBodyHtml], t.[Body], t.[Processed], t.[CreationTimestamp], t.[ModificationTimestamp], t.[LogicalDelete] FROM [EmailMessage] t WHERE (1 = 1) {0}";

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.From, default(String)) ? emailMessageQuery.From : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullFrom == null)												
			{
				predicateFragment += " AND [From] = @From";
			}
			else if ((object)emailMessageQuery.IsNullFrom != null)
			{
				predicateFragment += string.Format(" AND [From] IS {0} NULL", (bool)emailMessageQuery.IsNullFrom ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Sender, default(String)) ? emailMessageQuery.Sender : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullSender == null)												
			{
				predicateFragment += " AND [Sender] = @Sender";
			}
			else if ((object)emailMessageQuery.IsNullSender != null)
			{
				predicateFragment += string.Format(" AND [Sender] IS {0} NULL", (bool)emailMessageQuery.IsNullSender ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.ReplyTo, default(String)) ? emailMessageQuery.ReplyTo : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullReplyTo == null)												
			{
				predicateFragment += " AND [ReplyTo] = @ReplyTo";
			}
			else if ((object)emailMessageQuery.IsNullReplyTo != null)
			{
				predicateFragment += string.Format(" AND [ReplyTo] IS {0} NULL", (bool)emailMessageQuery.IsNullReplyTo ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.To, default(String)) ? emailMessageQuery.To : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullTo == null)												
			{
				predicateFragment += " AND [To] = @To";
			}
			else if ((object)emailMessageQuery.IsNullTo != null)
			{
				predicateFragment += string.Format(" AND [To] IS {0} NULL", (bool)emailMessageQuery.IsNullTo ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Cc, default(String)) ? emailMessageQuery.Cc : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullCc == null)												
			{
				predicateFragment += " AND [CC] = @Cc";
			}
			else if ((object)emailMessageQuery.IsNullCc != null)
			{
				predicateFragment += string.Format(" AND [CC] IS {0} NULL", (bool)emailMessageQuery.IsNullCc ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Bcc, default(String)) ? emailMessageQuery.Bcc : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullBcc == null)												
			{
				predicateFragment += " AND [BCC] = @Bcc";
			}
			else if ((object)emailMessageQuery.IsNullBcc != null)
			{
				predicateFragment += string.Format(" AND [BCC] IS {0} NULL", (bool)emailMessageQuery.IsNullBcc ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Subject, default(String)) ? emailMessageQuery.Subject : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullSubject == null)												
			{
				predicateFragment += " AND [Subject] = @Subject";
			}
			else if ((object)emailMessageQuery.IsNullSubject != null)
			{
				predicateFragment += string.Format(" AND [Subject] IS {0} NULL", (bool)emailMessageQuery.IsNullSubject ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.IsBodyHtml, default(Nullable<Boolean>)) ? emailMessageQuery.IsBodyHtml : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullIsBodyHtml == null)												
			{
				predicateFragment += " AND [IsBodyHtml] = @IsBodyHtml";
			}
			else if ((object)emailMessageQuery.IsNullIsBodyHtml != null)
			{
				predicateFragment += string.Format(" AND [IsBodyHtml] IS {0} NULL", (bool)emailMessageQuery.IsNullIsBodyHtml ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Body, default(String)) ? emailMessageQuery.Body : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullBody == null)												
			{
				predicateFragment += " AND [Body] = @Body";
			}
			else if ((object)emailMessageQuery.IsNullBody != null)
			{
				predicateFragment += string.Format(" AND [Body] IS {0} NULL", (bool)emailMessageQuery.IsNullBody ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Processed, default(Nullable<Boolean>)) ? emailMessageQuery.Processed : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullProcessed == null)												
			{
				predicateFragment += " AND [Processed] = @Processed";
			}
			else if ((object)emailMessageQuery.IsNullProcessed != null)
			{
				predicateFragment += string.Format(" AND [Processed] IS {0} NULL", (bool)emailMessageQuery.IsNullProcessed ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.CreationTimestamp, default(Nullable<DateTime>)) ? emailMessageQuery.CreationTimestamp : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullCreationTimestamp == null)												
			{
				predicateFragment += " AND [CreationTimestamp] = @CreationTimestamp";
			}
			else if ((object)emailMessageQuery.IsNullCreationTimestamp != null)
			{
				predicateFragment += string.Format(" AND [CreationTimestamp] IS {0} NULL", (bool)emailMessageQuery.IsNullCreationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.ModificationTimestamp, default(Nullable<DateTime>)) ? emailMessageQuery.ModificationTimestamp : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullModificationTimestamp == null)												
			{
				predicateFragment += " AND [ModificationTimestamp] = @ModificationTimestamp";
			}
			else if ((object)emailMessageQuery.IsNullModificationTimestamp != null)
			{
				predicateFragment += string.Format(" AND [ModificationTimestamp] IS {0} NULL", (bool)emailMessageQuery.IsNullModificationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.LogicalDelete, default(Nullable<Boolean>)) ? emailMessageQuery.LogicalDelete : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullLogicalDelete == null)												
			{
				predicateFragment += " AND [LogicalDelete] = @LogicalDelete";
			}
			else if ((object)emailMessageQuery.IsNullLogicalDelete != null)
			{
				predicateFragment += string.Format(" AND [LogicalDelete] IS {0} NULL", (bool)emailMessageQuery.IsNullLogicalDelete ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				
			
			commandText = string.Format(commandText, predicateFragment, sortFragment);
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecificEmailMessageSelectForCommandMagic(EmailMessage_Query emailMessageQuery, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;			
			string predicateFragment = "", sortFragment = "";
			object value;
			
			if ((object)emailMessageQuery == null)
				throw new ArgumentNullException("emailMessageQuery");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"SELECT t.EmailMessageId AS EmailMessageId, t.From AS From, t.Sender AS Sender, t.ReplyTo AS ReplyTo, t.To AS To, t.CC AS CC, t.BCC AS BCC, t.Subject AS Subject, t.IsBodyHtml AS IsBodyHtml, t.Body AS Body, t.Processed AS Processed, t.CreationTimestamp AS CreationTimestamp, t.ModificationTimestamp AS ModificationTimestamp, t.LogicalDelete AS LogicalDelete FROM EmailMessage t WHERE (1 = 1) {0}";

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.From, default(String)) ? emailMessageQuery.From : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullFrom == null)												
			{
				predicateFragment += " AND From = @From";
			}
			else if ((object)emailMessageQuery.IsNullFrom != null)
			{
				predicateFragment += string.Format(" AND From IS {0} NULL", (bool)emailMessageQuery.IsNullFrom ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Sender, default(String)) ? emailMessageQuery.Sender : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullSender == null)												
			{
				predicateFragment += " AND Sender = @Sender";
			}
			else if ((object)emailMessageQuery.IsNullSender != null)
			{
				predicateFragment += string.Format(" AND Sender IS {0} NULL", (bool)emailMessageQuery.IsNullSender ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.ReplyTo, default(String)) ? emailMessageQuery.ReplyTo : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullReplyTo == null)												
			{
				predicateFragment += " AND ReplyTo = @ReplyTo";
			}
			else if ((object)emailMessageQuery.IsNullReplyTo != null)
			{
				predicateFragment += string.Format(" AND ReplyTo IS {0} NULL", (bool)emailMessageQuery.IsNullReplyTo ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.To, default(String)) ? emailMessageQuery.To : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullTo == null)												
			{
				predicateFragment += " AND To = @To";
			}
			else if ((object)emailMessageQuery.IsNullTo != null)
			{
				predicateFragment += string.Format(" AND To IS {0} NULL", (bool)emailMessageQuery.IsNullTo ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Cc, default(String)) ? emailMessageQuery.Cc : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullCc == null)												
			{
				predicateFragment += " AND CC = @Cc";
			}
			else if ((object)emailMessageQuery.IsNullCc != null)
			{
				predicateFragment += string.Format(" AND CC IS {0} NULL", (bool)emailMessageQuery.IsNullCc ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Bcc, default(String)) ? emailMessageQuery.Bcc : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullBcc == null)												
			{
				predicateFragment += " AND BCC = @Bcc";
			}
			else if ((object)emailMessageQuery.IsNullBcc != null)
			{
				predicateFragment += string.Format(" AND BCC IS {0} NULL", (bool)emailMessageQuery.IsNullBcc ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Subject, default(String)) ? emailMessageQuery.Subject : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullSubject == null)												
			{
				predicateFragment += " AND Subject = @Subject";
			}
			else if ((object)emailMessageQuery.IsNullSubject != null)
			{
				predicateFragment += string.Format(" AND Subject IS {0} NULL", (bool)emailMessageQuery.IsNullSubject ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.IsBodyHtml, default(Nullable<Boolean>)) ? emailMessageQuery.IsBodyHtml : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullIsBodyHtml == null)												
			{
				predicateFragment += " AND IsBodyHtml = @IsBodyHtml";
			}
			else if ((object)emailMessageQuery.IsNullIsBodyHtml != null)
			{
				predicateFragment += string.Format(" AND IsBodyHtml IS {0} NULL", (bool)emailMessageQuery.IsNullIsBodyHtml ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Body, default(String)) ? emailMessageQuery.Body : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullBody == null)												
			{
				predicateFragment += " AND Body = @Body";
			}
			else if ((object)emailMessageQuery.IsNullBody != null)
			{
				predicateFragment += string.Format(" AND Body IS {0} NULL", (bool)emailMessageQuery.IsNullBody ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.Processed, default(Nullable<Boolean>)) ? emailMessageQuery.Processed : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullProcessed == null)												
			{
				predicateFragment += " AND Processed = @Processed";
			}
			else if ((object)emailMessageQuery.IsNullProcessed != null)
			{
				predicateFragment += string.Format(" AND Processed IS {0} NULL", (bool)emailMessageQuery.IsNullProcessed ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.CreationTimestamp, default(Nullable<DateTime>)) ? emailMessageQuery.CreationTimestamp : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullCreationTimestamp == null)												
			{
				predicateFragment += " AND CreationTimestamp = @CreationTimestamp";
			}
			else if ((object)emailMessageQuery.IsNullCreationTimestamp != null)
			{
				predicateFragment += string.Format(" AND CreationTimestamp IS {0} NULL", (bool)emailMessageQuery.IsNullCreationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.ModificationTimestamp, default(Nullable<DateTime>)) ? emailMessageQuery.ModificationTimestamp : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullModificationTimestamp == null)												
			{
				predicateFragment += " AND ModificationTimestamp = @ModificationTimestamp";
			}
			else if ((object)emailMessageQuery.IsNullModificationTimestamp != null)
			{
				predicateFragment += string.Format(" AND ModificationTimestamp IS {0} NULL", (bool)emailMessageQuery.IsNullModificationTimestamp ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			value = !DataType.ObjectsEqualValueSemantics(emailMessageQuery.LogicalDelete, default(Nullable<Boolean>)) ? emailMessageQuery.LogicalDelete : null;
			
			if ((object)value != null && (object)emailMessageQuery.IsNullLogicalDelete == null)												
			{
				predicateFragment += " AND LogicalDelete = @LogicalDelete";
			}
			else if ((object)emailMessageQuery.IsNullLogicalDelete != null)
			{
				predicateFragment += string.Format(" AND LogicalDelete IS {0} NULL", (bool)emailMessageQuery.IsNullLogicalDelete ? "" : "NOT");
			}
			else
			{
				predicateFragment += "";
			}				

			commandText = string.Format(commandText, predicateFragment, sortFragment);
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		partial void OnPreInsertEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage);
		
		partial void OnPostInsertEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage);
		
		partial void OnPreUpdateEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage);
		
		partial void OnPostUpdateEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage);
		
		partial void OnPreDeleteEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage);
		
		partial void OnPostDeleteEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage);
		
		partial void OnSelectEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage);		

		#endregion
	}
}
