<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2012 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v4.4.0">

	<OutputScope name="${ClrNamespace}\Repository.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;

using TextMetal.Plumbing.CommonFacilities;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="#LoopCount" var-ix="#LoopIndex" var-item="#item">
					<ForEach.Body>
						<![CDATA[using ${#item};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>
				
		<![CDATA[
namespace ${ClrNamespace}
{
	public partial class Repository : IRepository
	{		
		#region Constructors/Destructors
		
		public Repository()
		{
		}
		
		#endregion
		
		#region Fields/Constants
		
		private const string CONNECTION_STRING_NAME = "${ClrNamespace}::ConnectionString";
						
		#endregion
		
		#region Properties/Indexers/Events
		
		public static string ConnectionString
		{
			get
			{
				string connectionString;

				connectionString = AppConfig.GetConnectionString(CONNECTION_STRING_NAME);

				OnPreProcessConnectionString(ref connectionString);
				
				return connectionString;
			}
		}
		
		public static Type ConnectionType
		{
			get
			{
				return Type.GetType(AppConfig.GetConnectionProvider(CONNECTION_STRING_NAME), true);
			}
		}
				
		#endregion
		
		#region Methods/Operators
		
		public static UnitOfWorkContext GetUnitOfWorkContext()
		{
			return UnitOfWorkContext.Create(ConnectionType, ConnectionString, true);
		}

		static partial void OnPreProcessConnectionString(ref string connectionString);
		
]]>
		<Alloc token="#LoopCount" />
		
		<Assign token="#LoopCount">
			<Assign.Expression>
				<Value data="16" type="System.Int32" />
			</Assign.Expression>
		</Assign>
		
		<For var-ix="#LoopIndex">
			<For.Intializer>
				<BinaryExpression operator="VarPut">
					<BinaryExpression.LeftExpression>
						<Aspect name="#LoopIndex" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Value data="1" type="System.Int32" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</For.Intializer>
			
			<For.Condition>
				<BinaryExpression operator="Le">
					<BinaryExpression.LeftExpression>
						<Facet name="#LoopIndex" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="#LoopCount" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</For.Condition>
			
			<For.Iterator>
				<BinaryExpression operator="VarPut">
					<BinaryExpression.LeftExpression>
						<Aspect name="#LoopIndex" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<UnaryExpression operator="Incr">
							<UnaryExpression.TheExpression>
								<Facet name="#LoopIndex" />
							</UnaryExpression.TheExpression>							
						</UnaryExpression>
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</For.Iterator>
			
			<For.Body>
			
<![CDATA[		protected delegate TResult Stank<]]>

				<For var-ix="#LoopIndex2">
					<For.Intializer>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value data="1" type="System.Int32" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Intializer>
					
					<For.Condition>
						<BinaryExpression operator="Le">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Condition>
					
					<For.Iterator>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<UnaryExpression operator="Incr">
									<UnaryExpression.TheExpression>
										<Facet name="#LoopIndex2" />
									</UnaryExpression.TheExpression>							
								</UnaryExpression>
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Iterator>
					
					<For.Body><![CDATA[T${#LoopIndex2}, ]]></For.Body>
				</For>				

<![CDATA[TResult>(]]>

				<For var-ix="#LoopIndex2">
					<For.Intializer>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value data="1" type="System.Int32" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Intializer>
					
					<For.Condition>
						<BinaryExpression operator="Le">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Condition>
					
					<For.Iterator>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<UnaryExpression operator="Incr">
									<UnaryExpression.TheExpression>
										<Facet name="#LoopIndex2" />
									</UnaryExpression.TheExpression>							
								</UnaryExpression>
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Iterator>
					
					<For.Body>
						<![CDATA[T${#LoopIndex2} p${#LoopIndex2}]]>
						
						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="#LoopIndex" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="#LoopIndex2" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
<![CDATA[, ]]>
							</If.True>
						</If>
					</For.Body>
				</For>				

<![CDATA[);
]]>
				<If>
					<If.Condition>
						<BinaryExpression operator="Ne">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopCount" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</If.Condition>
					<If.True>
<![CDATA[
]]>
					</If.True>
				</If>
			</For.Body>
		</For>
		
		<Assign token="#LoopCount">
			<Assign.Expression>
				<Value data="15" type="System.Int32" />
			</Assign.Expression>
		</Assign>
		
		<Write newline="true" />
		
		<For var-ix="#LoopIndex">
			<For.Intializer>
				<BinaryExpression operator="VarPut">
					<BinaryExpression.LeftExpression>
						<Aspect name="#LoopIndex" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Value data="1" type="System.Int32" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</For.Intializer>
			
			<For.Condition>
				<BinaryExpression operator="Le">
					<BinaryExpression.LeftExpression>
						<Facet name="#LoopIndex" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="#LoopCount" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</For.Condition>
			
			<For.Iterator>
				<BinaryExpression operator="VarPut">
					<BinaryExpression.LeftExpression>
						<Aspect name="#LoopIndex" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<UnaryExpression operator="Incr">
							<UnaryExpression.TheExpression>
								<Facet name="#LoopIndex" />
							</UnaryExpression.TheExpression>							
						</UnaryExpression>
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</For.Iterator>
			
			<For.Body>
			
<![CDATA[		protected TResult ExecuteAmbientUnitOfWorkAware<]]>

				<For var-ix="#LoopIndex2">
					<For.Intializer>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value data="1" type="System.Int32" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Intializer>
					
					<For.Condition>
						<BinaryExpression operator="Le">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Condition>
					
					<For.Iterator>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<UnaryExpression operator="Incr">
									<UnaryExpression.TheExpression>
										<Facet name="#LoopIndex2" />
									</UnaryExpression.TheExpression>							
								</UnaryExpression>
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Iterator>
					
					<For.Body><![CDATA[T${#LoopIndex2}, ]]></For.Body>
				</For>				

<![CDATA[TResult>(Stank<UnitOfWorkContext]]>

				<For var-ix="#LoopIndex2">
					<For.Intializer>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value data="1" type="System.Int32" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Intializer>
					
					<For.Condition>
						<BinaryExpression operator="Le">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Condition>
					
					<For.Iterator>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<UnaryExpression operator="Incr">
									<UnaryExpression.TheExpression>
										<Facet name="#LoopIndex2" />
									</UnaryExpression.TheExpression>							
								</UnaryExpression>
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Iterator>
					
					<For.Body><![CDATA[, T${#LoopIndex2}]]></For.Body>
				</For>				

<![CDATA[, TResult> callbackMethod]]>

				<For var-ix="#LoopIndex2">
					<For.Intializer>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value data="1" type="System.Int32" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Intializer>
					
					<For.Condition>
						<BinaryExpression operator="Le">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Condition>
					
					<For.Iterator>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<UnaryExpression operator="Incr">
									<UnaryExpression.TheExpression>
										<Facet name="#LoopIndex2" />
									</UnaryExpression.TheExpression>							
								</UnaryExpression>
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Iterator>
					
					<For.Body><![CDATA[, T${#LoopIndex2} p${#LoopIndex2}]]></For.Body>
				</For>				
				
<![CDATA[)
		{			
			TResult retval;
			
			if ((object)UnitOfWorkContext.Current == null)
			{
				try
				{
					using (UnitOfWorkContext.Current = Repository.GetUnitOfWorkContext())
					{
						retval = callbackMethod(UnitOfWorkContext.Current]]>

				<For var-ix="#LoopIndex2">
					<For.Intializer>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value data="1" type="System.Int32" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Intializer>
					
					<For.Condition>
						<BinaryExpression operator="Le">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Condition>
					
					<For.Iterator>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<UnaryExpression operator="Incr">
									<UnaryExpression.TheExpression>
										<Facet name="#LoopIndex2" />
									</UnaryExpression.TheExpression>							
								</UnaryExpression>
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Iterator>
					
					<For.Body><![CDATA[, p${#LoopIndex2}]]></For.Body>
				</For>				

<![CDATA[);
											
						UnitOfWorkContext.Current.Complete();
					
						return retval;
					}
				}
				finally
				{
					UnitOfWorkContext.Current = null;
				}
			}			
			else
			{
				return callbackMethod(UnitOfWorkContext.Current]]>

				<For var-ix="#LoopIndex2">
					<For.Intializer>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value data="1" type="System.Int32" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Intializer>
					
					<For.Condition>
						<BinaryExpression operator="Le">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Condition>
					
					<For.Iterator>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<UnaryExpression operator="Incr">
									<UnaryExpression.TheExpression>
										<Facet name="#LoopIndex2" />
									</UnaryExpression.TheExpression>							
								</UnaryExpression>
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Iterator>
					
					<For.Body><![CDATA[, p${#LoopIndex2}]]></For.Body>
				</For>				

<![CDATA[);
			}
		}
]]>
				<If>
					<If.Condition>
						<BinaryExpression operator="Ne">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopCount" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</If.Condition>
					<If.True>
<![CDATA[
]]>
					</If.True>
				</If>
			</For.Body>
		</For>
		
		<Free token="#LoopCount" />
<![CDATA[
		#endregion
	}
}
]]>
	</OutputScope>

</Template>