<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2012 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v4.4.0">

	<OutputScope name="${ClrNamespace}\Repository.tv.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Linq;
using System.Linq;
using System.Xml;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.LinqToSql;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="#LoopCount" var-ix="#LoopIndex" var-item="#item">
					<ForEach.Body>
						<![CDATA[using ${#item};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>

		<If>
			<If.Condition>
				<BinaryExpression operator="Or">
					<BinaryExpression.LeftExpression>
						<BinaryExpression operator="Eq">
							<BinaryExpression.LeftExpression>
								<Facet name="HasTables" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value type="System.Boolean" data="True" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<BinaryExpression operator="Eq">
							<BinaryExpression.LeftExpression>
								<Facet name="HasViews" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value type="System.Boolean" data="True" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[
]]>
			</If.True>
		</If>

		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasTables" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Tables;
]]>
			</If.True>
		</If>
		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasViews" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Views;
]]>
			</If.True>
		</If>
		<![CDATA[
namespace ${ClrNamespace}
{
	public partial class Repository
	{		
		#region Methods/Operators
		
]]>

		<ForEach in="Schemas" var-ct="#LoopCount" var-ix="#LoopIndex">			
			<ForEach.Body>
				
				<ForEach in="Tables" var-ct="#LoopCount" var-ix="#LoopIndex">
					<ForEach.Body>
						<![CDATA[		public ${TableNameSingularPascalCase} Load${TableNameSingularPascalCase}(]]>
						<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ColumnIsPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="HasNoDefinedPrimaryKeyColumns" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[${ColumnCSharpClrType} @${ColumnNameCamelCase}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="#LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="#LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[)
		{
			${TableNameSingularPascalCase} retval;
						
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, ]]>
						<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ColumnIsPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="HasNoDefinedPrimaryKeyColumns" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[p${#LoopIndex}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="#LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="#LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[) => this.Load${TableNameSingularPascalCase}(uowc, ]]>
						<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ColumnIsPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="HasNoDefinedPrimaryKeyColumns" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[p${#LoopIndex}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="#LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="#LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[), ]]>
						<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ColumnIsPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="HasNoDefinedPrimaryKeyColumns" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[@${ColumnNameCamelCase}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="#LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="#LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[);
			
			return retval;
		}
		
]]>
				
<![CDATA[		public ${TableNameSingularPascalCase} Load${TableNameSingularPascalCase}(IUnitOfWorkContext unitOfWorkContext, ]]>
						<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ColumnIsPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="HasNoDefinedPrimaryKeyColumns" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[${ColumnCSharpClrType} @${ColumnNameCamelCase}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="#LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="#LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[)
		{			
			${TableNameSingularPascalCase} @${TableNameSingularCamelCase};
			${LinqToSqlDataContextRootNamespace}.${TableNameSingularPascalCase} query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
										
			using (ContextWrapper<${LinqToSqlDataContextRootNamespace}.${LinqToSqlTargetDataContextName}> ctx = unitOfWorkContext.GetContext<${LinqToSqlDataContextRootNamespace}.${LinqToSqlTargetDataContextName}>())
			{					
				query = ctx.Context.${TableNamePluralPascalCase}.SingleOrDefault(lo => ]]>
					<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
						<ForEach.Filter>
							<BinaryExpression operator="Or">
								<BinaryExpression.LeftExpression>
									<BinaryExpression operator="Eq">
										<BinaryExpression.LeftExpression>
											<Facet name="ColumnIsPrimaryKey" />
										</BinaryExpression.LeftExpression>
										<BinaryExpression.RightExpression>
											<Value type="System.Boolean" data="True" />
										</BinaryExpression.RightExpression>
									</BinaryExpression>
								</BinaryExpression.LeftExpression>
								<BinaryExpression.RightExpression>
									<BinaryExpression operator="Eq">
										<BinaryExpression.LeftExpression>
											<Facet name="HasNoDefinedPrimaryKeyColumns" />
										</BinaryExpression.LeftExpression>
										<BinaryExpression.RightExpression>
											<Value type="System.Boolean" data="True" />
										</BinaryExpression.RightExpression>
									</BinaryExpression>
								</BinaryExpression.RightExpression>
							</BinaryExpression>
						</ForEach.Filter>
						<ForEach.Body>
							<![CDATA[lo.@${ColumnNamePascalCase} == @${ColumnNameCamelCase}]]>
							<If>
								<If.Condition>
									<BinaryExpression operator="Ne">
										<BinaryExpression.LeftExpression>
											<Facet name="#LoopCount" />
										</BinaryExpression.LeftExpression>
										<BinaryExpression.RightExpression>
											<Facet name="#LoopIndex" />
										</BinaryExpression.RightExpression>
									</BinaryExpression>
								</If.Condition>
								<If.True>
									<![CDATA[ && ]]>
								</If.True>
							</If>
						</ForEach.Body>
					</ForEach>
					<![CDATA[);

				if ((object)query == null)
					return null; // does not exist
				
				@${TableNameSingularCamelCase} = new ${TableNameSingularPascalCase}()
								{
									// map result to POCO from L2S object
]]>
	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>			
		</ForEach.Filter>
		<ForEach.Body>
<![CDATA[									@${ColumnNamePascalCase} = ]]>	

			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="image" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
					<![CDATA[(object)query.${ColumnNamePascalCase} != null ? query.@${ColumnNamePascalCase}.ToArray() : null]]>
				</If.True>
				<If.False>
					<![CDATA[query.@${ColumnNamePascalCase}]]>
				</If.False>
			</If>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[,
]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[
								};	

				this.OnSelect${TableNameSingularPascalCase}(unitOfWorkContext, @${TableNameSingularCamelCase});

				return @${TableNameSingularCamelCase};
			}
		}
		
		public IList<${TableNameSingularPascalCase}> Find${TableNamePluralPascalCase}(Func<IQueryable<${LinqToSqlDataContextRootNamespace}.${TableNameSingularPascalCase}>, IQueryable<${LinqToSqlDataContextRootNamespace}.${TableNameSingularPascalCase}>> callback)
		{
			IList<${TableNameSingularPascalCase}> @${TableNamePluralCamelCase};
			
			@${TableNamePluralCamelCase} = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.Find${TableNamePluralPascalCase}(uowc, e), callback);
			
			return @${TableNamePluralCamelCase};
		}
		
		public IList<${TableNameSingularPascalCase}> Find${TableNamePluralPascalCase}(IUnitOfWorkContext unitOfWorkContext, Func<IQueryable<${LinqToSqlDataContextRootNamespace}.${TableNameSingularPascalCase}>, IQueryable<${LinqToSqlDataContextRootNamespace}.${TableNameSingularPascalCase}>> callback)
		{
			IList<${TableNameSingularPascalCase}> @${TableNamePluralCamelCase};			
			IQueryable<${LinqToSqlDataContextRootNamespace}.${TableNameSingularPascalCase}> queryable;			
			
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)callback == null)
				throw new ArgumentNullException("callback");
				
			using (ContextWrapper<${LinqToSqlDataContextRootNamespace}.${LinqToSqlTargetDataContextName}> ctx = unitOfWorkContext.GetContext<${LinqToSqlDataContextRootNamespace}.${LinqToSqlTargetDataContextName}>())
			{
				queryable = callback(ctx.Context.@${TableNamePluralPascalCase});
				
				if ((object)queryable == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				@${TableNamePluralCamelCase} = queryable.Select(lo => new ${TableNameSingularPascalCase}()
												 {
													// map results to POCOs from L2S objects
]]>
	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>			
		</ForEach.Filter>
		<ForEach.Body>
<![CDATA[													@${ColumnNamePascalCase} = ]]>	

			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="image" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
					<![CDATA[(object)lo.@${ColumnNamePascalCase} != null ? lo.@${ColumnNamePascalCase}.ToArray() : null]]>
				</If.True>
				<If.False>
					<![CDATA[lo.@${ColumnNamePascalCase}]]>
				</If.False>
			</If>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[,
]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[
												 }).ToList(); // force execution against store

				foreach (${TableNameSingularPascalCase} @${TableNameSingularCamelCase} in @${TableNamePluralCamelCase})
					this.OnSelect${TableNameSingularPascalCase}(unitOfWorkContext, @${TableNameSingularCamelCase});
				
				return @${TableNamePluralCamelCase};
			}			
		}
		
		public bool Save${TableNameSingularPascalCase}(${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			bool retval;					
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.Save${TableNameSingularPascalCase}(uowc, e), @${TableNameSingularCamelCase});
			
			return retval;
		}
		
		public bool Save${TableNameSingularPascalCase}(IUnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			${LinqToSqlDataContextRootNamespace}.${TableNameSingularPascalCase} query;
			bool wasNew;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("${TableNameSingularCamelCase}");
				
			using (ContextWrapper<${LinqToSqlDataContextRootNamespace}.${LinqToSqlTargetDataContextName}> ctx = unitOfWorkContext.GetContext<${LinqToSqlDataContextRootNamespace}.${LinqToSqlTargetDataContextName}>())
			{
				wasNew = @${TableNameSingularCamelCase}.IsNew;

				if (wasNew)
				{
					this.OnPreInsert${TableNameSingularPascalCase}(unitOfWorkContext, @${TableNameSingularCamelCase});
					
					query = new ${LinqToSqlDataContextRootNamespace}.${TableNameSingularPascalCase}();

					ctx.Context.${TableNamePluralPascalCase}.InsertOnSubmit(query);
				}
				else
				{
					this.OnPreUpdate${TableNameSingularPascalCase}(unitOfWorkContext, @${TableNameSingularCamelCase});
					
					query = ctx.Context.${TableNamePluralPascalCase}.SingleOrDefault(lo => ]]>
						<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ColumnIsPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="HasNoDefinedPrimaryKeyColumns" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[lo.@${ColumnNamePascalCase} == @${TableNameSingularCamelCase}.@${ColumnNamePascalCase}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="#LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="#LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[ && ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[);

					if((object)query == null)
						throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				}

				// map caller POCO changes to L2S object
]]>
	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>						
			<BinaryExpression operator="Ne">
				<BinaryExpression.LeftExpression>
					<Facet name="ColumnIsComputed" />
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<Value type="System.Boolean" data="True" />
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
		
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="image" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
					<![CDATA[				if ((object)@${TableNameSingularCamelCase}.@${ColumnNamePascalCase} != null) // prevent implicit conversion of null -> exception
					query.@${ColumnNamePascalCase} = @${TableNameSingularCamelCase}.@${ColumnNamePascalCase};]]>
				</If.True>
				<If.False>
					<![CDATA[				query.@${ColumnNamePascalCase} = @${TableNameSingularCamelCase}.@${ColumnNamePascalCase};]]>
				</If.False>
			</If>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[
]]>
				</If.True>
			</If>
		</ForEach.Body>
	</ForEach>

<![CDATA[		
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnSaveConflict${TableNameSingularPascalCase}(unitOfWorkContext, @${TableNameSingularCamelCase});
					
					return false;
				}

				// map server changes back to POCO from L2S object
]]>
	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>						
			<!--<BinaryExpression operator="Eq">
				<BinaryExpression.LeftExpression>
					<Facet name="ColumnIsComputed" />
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<Value type="System.Boolean" data="True" />
				</BinaryExpression.RightExpression>
			</BinaryExpression>-->
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[				@${TableNameSingularCamelCase}.@${ColumnNamePascalCase} = ]]>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="image" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
					<![CDATA[(object)query.@${ColumnNamePascalCase} != null ? query.@${ColumnNamePascalCase}.ToArray() : null;]]>
				</If.True>
				<If.False>
					<![CDATA[query.@${ColumnNamePascalCase};]]>
				</If.False>
			</If>

			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[
]]>
				</If.True>
			</If>
			
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[
]]>
				</If.True>
			</If>
		</ForEach.Body>
	</ForEach>

<![CDATA[						
				if (wasNew)
				{
					this.OnPostInsert${TableNameSingularPascalCase}(unitOfWorkContext, @${TableNameSingularCamelCase});
				}
				else
				{
					this.OnPostUpdate${TableNameSingularPascalCase}(unitOfWorkContext, @${TableNameSingularCamelCase});
				}

				return true;
			}
		}
		
		public bool Discard${TableNameSingularPascalCase}(${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			bool retval;
			
			retval = Ambient.ExecuteAmbientUnitOfWorkAware(Repository.UowcFactory.Instance, (uowc, e) => this.Discard${TableNameSingularPascalCase}(uowc, e), @${TableNameSingularCamelCase});
			
			return retval;
		}
		
		public bool Discard${TableNameSingularPascalCase}(IUnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase})
		{
			${LinqToSqlDataContextRootNamespace}.${TableNameSingularPascalCase} query;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)@${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("${TableNameSingularCamelCase}");
				
			if (@${TableNameSingularCamelCase}.IsNew)
				return true;
				
			using (ContextWrapper<${LinqToSqlDataContextRootNamespace}.${LinqToSqlTargetDataContextName}> ctx = unitOfWorkContext.GetContext<${LinqToSqlDataContextRootNamespace}.${LinqToSqlTargetDataContextName}>())
			{				
				this.OnPreDelete${TableNameSingularPascalCase}(unitOfWorkContext, @${TableNameSingularCamelCase});
				
				query = ctx.Context.@${TableNamePluralPascalCase}.SingleOrDefault(lo => ]]>
					<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
						<ForEach.Filter>
							<BinaryExpression operator="Or">
								<BinaryExpression.LeftExpression>
									<BinaryExpression operator="Eq">
										<BinaryExpression.LeftExpression>
											<Facet name="ColumnIsPrimaryKey" />
										</BinaryExpression.LeftExpression>
										<BinaryExpression.RightExpression>
											<Value type="System.Boolean" data="True" />
										</BinaryExpression.RightExpression>
									</BinaryExpression>
								</BinaryExpression.LeftExpression>
								<BinaryExpression.RightExpression>
									<BinaryExpression operator="Eq">
										<BinaryExpression.LeftExpression>
											<Facet name="HasNoDefinedPrimaryKeyColumns" />
										</BinaryExpression.LeftExpression>
										<BinaryExpression.RightExpression>
											<Value type="System.Boolean" data="True" />
										</BinaryExpression.RightExpression>
									</BinaryExpression>
								</BinaryExpression.RightExpression>
							</BinaryExpression>
						</ForEach.Filter>
						<ForEach.Body>
							<![CDATA[lo.@${ColumnNamePascalCase} == @${TableNameSingularCamelCase}.@${ColumnNamePascalCase}]]>
							<If>
								<If.Condition>
									<BinaryExpression operator="Ne">
										<BinaryExpression.LeftExpression>
											<Facet name="#LoopCount" />
										</BinaryExpression.LeftExpression>
										<BinaryExpression.RightExpression>
											<Facet name="#LoopIndex" />
										</BinaryExpression.RightExpression>
									</BinaryExpression>
								</If.Condition>
								<If.True>
									<![CDATA[ && ]]>
								</If.True>
							</If>
						</ForEach.Body>
					</ForEach>
					<![CDATA[);

				if((object)query == null)
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
				
				ctx.Context.@${TableNamePluralPascalCase}.DeleteOnSubmit(query);
				
				try
				{
					ctx.Context.SubmitChanges(ConflictMode.FailOnFirstConflict);
				}
				catch (ChangeConflictException ccex)
				{
					this.OnDiscardConflict${TableNameSingularPascalCase}(unitOfWorkContext, @${TableNameSingularCamelCase});
					
					return false;
				}

				this.OnPostDelete${TableNameSingularPascalCase}(unitOfWorkContext, @${TableNameSingularCamelCase});
				
				@${TableNameSingularCamelCase}.IsNew = false;				

				return true;
			}
		}
		
		partial void OnPreInsert${TableNameSingularPascalCase}(IUnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnPostInsert${TableNameSingularPascalCase}(IUnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnPreUpdate${TableNameSingularPascalCase}(IUnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnPostUpdate${TableNameSingularPascalCase}(IUnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnSaveConflict${TableNameSingularPascalCase}(IUnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnDiscardConflict${TableNameSingularPascalCase}(IUnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
				
		partial void OnPreDelete${TableNameSingularPascalCase}(IUnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnPostDelete${TableNameSingularPascalCase}(IUnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase});
		
		partial void OnSelect${TableNameSingularPascalCase}(IUnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} @${TableNameSingularCamelCase});		
]]>
						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="#LoopCount" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="#LoopIndex" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
]]>
							</If.True>
						</If>
					</ForEach.Body>
				</ForEach>

			</ForEach.Body>
		</ForEach>

		<![CDATA[
		#endregion
	}
}
]]>
	</OutputScope>

</Template>