<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2013 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v5.0.0">

	<OutputScope name="${ClrNamespace}.IntegrationTests\RepositoryTests.tv.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Xml;

using NUnit.Framework;

using TestingFramework.Core.Customization;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="#LoopCount" var-ix="#LoopIndex" var-item="#item">
					<ForEach.Body>
						<![CDATA[using ${#item};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>
		<If>
			<If.Condition>
				<BinaryExpression operator="Or">
					<BinaryExpression.LeftExpression>
						<BinaryExpression operator="Eq">
							<BinaryExpression.LeftExpression>
								<Facet name="HasTables" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value type="System.Boolean" data="True" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<BinaryExpression operator="Eq">
							<BinaryExpression.LeftExpression>
								<Facet name="HasViews" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value type="System.Boolean" data="True" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[
]]>
			</If.True>
		</If>

		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasTables" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Tables;
]]>
			</If.True>
		</If>
		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasViews" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Views;
]]>
			</If.True>
		</If>
		<![CDATA[
namespace ${ClrNamespace}.IntegrationTests
{
	[TestFixture]
	public partial class RepositoryTests
	{		
		#region Methods/Operators
		
]]>

		<ForEach in="Schemas" var-ct="#LoopCount" var-ix="#LoopIndex">
			<ForEach.Filter></ForEach.Filter>
			<ForEach.Body>

				<ForEach in="Tables" var-ct="#LoopCount" var-ix="#LoopIndex">
					<ForEach.Filter></ForEach.Filter>
					<ForEach.Body>

						<If>
							<If.Condition>
								<UnaryExpression operator="Not">
									<UnaryExpression.TheExpression>
										<Facet name="IsView" />
									</UnaryExpression.TheExpression>
								</UnaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[		[Test]
		public void ShouldSave${TableNameSingularPascalCase}Test()
		{
			Repository repository;
			${TableNameSingularPascalCase} @${TableNameSingularCamelCase};
			bool result;
			
			Assert.IsNull(UnitOfWorkContext.Current);
			
			repository = new Repository();
				
			using (IUnitOfWorkContext unitOfWorkContext = Repository.GetUnitOfWorkContext())
			{
				try
				{
					UnitOfWorkContext.Current = unitOfWorkContext;
					
					Assert.IsNotNull(UnitOfWorkContext.Current);
					
					// do INSERT first
					
					@${TableNameSingularCamelCase} = new ${TableNameSingularPascalCase}();
					Assert.IsTrue(@${TableNameSingularCamelCase}.IsNew);
]]>

								<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
									<ForEach.Filter>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="IsColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</ForEach.Filter>
									<ForEach.Body>

<![CDATA[					@${TableNameSingularCamelCase}.@${ColumnNamePascalCase} = ValueGenerator.GetNextValue<${ColumnCSharpClrType}>();]]>

										<If>
											<If.Condition>
												<BinaryExpression operator="Ne">
													<BinaryExpression.LeftExpression>
														<Facet name="#LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="#LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
<![CDATA[
]]>
											</If.True>
										</If>
									</ForEach.Body>
								</ForEach>

<![CDATA[

					result = repository.Save${TableNameSingularPascalCase}(@${TableNameSingularCamelCase});

					Assert.IsTrue(result);
					
]]>

								<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
									<ForEach.Filter>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="IsColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</ForEach.Filter>
									<ForEach.Body>

<![CDATA[					${TableNameSingularCamelCase}.@${ColumnNamePascalCase} = ValueGenerator.GetNextValue<${ColumnCSharpClrType}>();]]>

										<If>
											<If.Condition>
												<BinaryExpression operator="Ne">
													<BinaryExpression.LeftExpression>
														<Facet name="#LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="#LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
<![CDATA[
]]>
											</If.True>
										</If>
									</ForEach.Body>
								</ForEach>

<![CDATA[

					// do UPDATE next
					Assert.IsFalse(@${TableNameSingularCamelCase}.IsNew);
					
					result = repository.Save${TableNameSingularPascalCase}(@${TableNameSingularCamelCase});

					Assert.IsTrue(result);
					
					unitOfWorkContext.Complete();
				}
				finally
				{
					UnitOfWorkContext.Current = null;
				}				
			}
			
			Assert.IsNull(UnitOfWorkContext.Current);
		}
		
]]>
							</If.True>
						</If>
						
						<![CDATA[		[Test]
		public void ShouldLoad${TableNameSingularPascalCase}Test()
		{
			throw new NotImplementedException();
		}
		
		[Test]
		public void ShouldFind${TableNamePluralPascalCase}Test()
		{
			throw new NotImplementedException();
		}
]]>
						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="#LoopCount" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="#LoopIndex" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
]]>
							</If.True>
						</If>
					</ForEach.Body>
				</ForEach>

			</ForEach.Body>
		</ForEach>

		<![CDATA[
		#endregion
	}
}
]]>
	</OutputScope>

</Template>