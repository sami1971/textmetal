<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2013 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v5.0.0">

	<OutputScope name="${ClrNamespace}\NetSqlServerSpecific.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Data;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.Advanced;
using TextMetal.Common.Expressions;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="#LoopCount" var-ix="#LoopIndex" var-item="#item">
					<ForEach.Body>
						<![CDATA[using ${#item};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>
				
		<![CDATA[
namespace ${ClrNamespace}
{
	internal class NetSqlServerSpecific : IDataSourceTagSpecific
	{
		#region Constructors/Destructors

		private NetSqlServerSpecific()
		{
		}

		#endregion

		#region Fields/Constants
		
		private const string NET_SQL_SERVER_DATA_SOURCE_TAG = "net.sqlserver";
		
		private const int NET_SQL_SERVER_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED = 0;
		private const int NET_SQL_SERVER_QUERY_EXPECTED_RECORDS_AFFECTED = -1;
		private const string NET_SQL_SERVER_IDENTITY_COMMAND = "@@IDENTITY"; // warning: 'SELECT SCOPE_IDENTITY() AS PK' should be used in the SAME BATCH if there is any chance of triggers on any tables causing identity creation

		private const string NET_SQL_SERVER_COLUMN_ALIASED_FORMAT = "{0}.[{1}]";
		private const string NET_SQL_SERVER_COLUMN_NAME_FORMAT = "[{0}]";
		private const string NET_SQL_SERVER_PARAMETER_NAME_FORMAT = "@{0}";
		private const string NET_SQL_SERVER_SCHEMA_TABLE_NAME_FORMAT = "[{0}].[{1}]";
		private const string NET_SQL_SERVER_TABLE_ALIAS_FORMAT = "{0}";
		private const string NET_SQL_SERVER_TABLE_NAME_FORMAT = "[{0}]";

		private static readonly NetSqlServerSpecific instance = new NetSqlServerSpecific();

		#endregion

		#region Properties/Indexers/Events

		public static NetSqlServerSpecific Instance
		{
			get
			{
				return instance;
			}
		}
		
		public string DataSourceTag
		{
			get
			{
				return NET_SQL_SERVER_DATA_SOURCE_TAG;
			}
		}

		#endregion

		#region Methods/Operators

		public void CommandMagic(IUnitOfWorkContext unitOfWorkContext, bool executeAsCud, out int thisOrThatRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if (executeAsCud)
				thisOrThatRecordsAffected = NET_SQL_SERVER_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
			else
				thisOrThatRecordsAffected = NET_SQL_SERVER_QUERY_EXPECTED_RECORDS_AFFECTED;
		}

		public string GetAliasedColumnName(string tableAlias, string columnName)
		{
			string retVal;

			retVal = string.Format(NET_SQL_SERVER_COLUMN_ALIASED_FORMAT, this.GetTableAlias(tableAlias), columnName);

			return retVal;
		}

		public string GetColumnName(string columnName)
		{
			string retVal;

			retVal = string.Format(NET_SQL_SERVER_COLUMN_NAME_FORMAT, columnName);

			return retVal;
		}

		public string GetIdentityCommand()
		{
			string retVal;

			retVal = NET_SQL_SERVER_IDENTITY_COMMAND;

			return retVal;
		}

		public string GetParameterName(string parameterName)
		{
			string retVal;

			retVal = string.Format(NET_SQL_SERVER_PARAMETER_NAME_FORMAT, parameterName);

			return retVal;
		}

		public string GetTableAlias(string tableAlias)
		{
			string retVal;

			retVal = string.Format(NET_SQL_SERVER_TABLE_ALIAS_FORMAT, tableAlias);

			return retVal;
		}

		public string GetTableName(string schemaName, string tableName)
		{
			string retVal;

			retVal = !DataType.IsNullOrWhiteSpace(schemaName) ?
				string.Format(NET_SQL_SERVER_SCHEMA_TABLE_NAME_FORMAT, schemaName, tableName) :
				string.Format(NET_SQL_SERVER_TABLE_NAME_FORMAT, tableName);

			return retVal;
		}

		public void ParameterMagic(IUnitOfWorkContext unitOfWorkContext, IDataParameter commandParameter, string generatedFromColumnNativeType)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			if ((object)commandParameter == null)
				throw new ArgumentNullException("commandParameter");

			if (generatedFromColumnNativeType.SafeToString().ToUpper() == "NTEXT")
				Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));
			else if (generatedFromColumnNativeType.SafeToString().ToUpper() == "TEXT")
				Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Text", true));
			else if (generatedFromColumnNativeType.SafeToString().ToUpper() == "IMAGE")
				Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Image", true));
		}

		#endregion
	}
}
]]>
	</OutputScope>

</Template>