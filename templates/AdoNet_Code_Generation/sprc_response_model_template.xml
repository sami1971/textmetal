<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2012 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v4.4.0">

	<Alloc token="FolderName" />

	<Assign token="FolderName">
		<Assign.Expression>
			<Value data="Procedures" />
		</Assign.Expression>
	</Assign>

	<ForEach in="Schemas" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter></ForEach.Filter>
		<ForEach.Body>

			<ForEach in="Procedures" var-ct="#LoopCount" var-ix="#LoopIndex">
				<ForEach.Filter></ForEach.Filter>
				<ForEach.Body>

					<OutputScope name="${ClrNamespace}\${FolderName}\${ProcedureNameSingularPascalCase}_Response.g.cs">
						<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
]]>
						<If>
							<If.Condition>
								<UnaryExpression operator="IsDef">
									<UnaryExpression.TheExpression>
										<Aspect name="ClrUsingNamespaces" />
									</UnaryExpression.TheExpression>
								</UnaryExpression>
							</If.Condition>
							<If.True>
								<ForEach in="ClrUsingNamespaces" var-ct="#LoopCount" var-ix="#LoopIndex" var-item="#item">
									<ForEach.Body>
										<![CDATA[using ${#item};
]]>
									</ForEach.Body>
								</ForEach>
							</If.True>
						</If>
						<![CDATA[
namespace ${ClrNamespace}.${FolderName}
{
	public sealed class ${ProcedureNameSingularPascalCase}_Response
	{		
		#region Constructors/Destructors
		
		public ${ProcedureNameSingularPascalCase}_Response()
		{
		}
		
		#endregion
		
		#region Fields/Constants
			
		private readonly IList<${ProcedureNameSingularPascalCase}_Result> results = new List<${ProcedureNameSingularPascalCase}_Result>();
]]>

						<ForEach in="Parameters" var-ct="#LoopCount" var-ix="#LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ParameterIsOutput" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ParameterIsReadOnly" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>

								<![CDATA[		private ${ParameterCSharpClrType} @${ParameterNameCamelCase};]]>

								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="#LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="#LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[
]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>

						<![CDATA[

		#endregion
			
		#region Properties/Indexers/Events
			
		public IList<${ProcedureNameSingularPascalCase}_Result> Results
		{
			get
			{
				return this.results;
			}
		}
]]>
						<ForEach in="Parameters" var-ct="#LoopCount" var-ix="#LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Or">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ParameterIsOutput" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="ParameterIsReadOnly" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>

								<![CDATA[
		public ${ParameterCSharpClrType} @${ParameterNamePascalCase}
		{
			get
			{
				return this.@${ParameterNameCamelCase};
			}
			set
			{
				this.@${ParameterNameCamelCase} = value;
			}
		}
		]]>
							</ForEach.Body>
						</ForEach>
						<![CDATA[
		#endregion		
	}
}
]]>
					</OutputScope>
				</ForEach.Body>
			</ForEach>

		</ForEach.Body>
	</ForEach>

</Template>