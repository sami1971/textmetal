<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2012 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v4.4.0">
	<Alloc token="FolderName" />

	<ForEach in="Schemas" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter></ForEach.Filter>
		<ForEach.Body>

			<ForEach in="Tables" var-ct="#LoopCount" var-ix="#LoopIndex">
				<ForEach.Filter></ForEach.Filter>
				<ForEach.Body>

					<If>
						<If.Condition>
							<UnaryExpression operator="Not">
								<UnaryExpression.TheExpression>
									<Facet name="IsView" />
								</UnaryExpression.TheExpression>
							</UnaryExpression>
						</If.Condition>
						<If.True>
							<Assign token="FolderName">
								<Assign.Expression>
									<Value data="Tables" />
								</Assign.Expression>
							</Assign>
						</If.True>
					</If>

					<If>
						<If.Condition>
							<Facet name="IsView" />
						</If.Condition>
						<If.True>
							<Assign token="FolderName">
								<Assign.Expression>
									<Value data="Views" />
								</Assign.Expression>
							</Assign>
						</If.True>
					</If>

					<OutputScope name="${ClrNamespace}\${FolderName}\${TableNameSingularPascalCase}.g.cs">
						<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Xml;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.Advanced;
using TextMetal.Common.Expressions;
]]>
						<If>
							<If.Condition>
								<UnaryExpression operator="IsDef">
									<UnaryExpression.TheExpression>
										<Aspect name="ClrUsingNamespaces" />
									</UnaryExpression.TheExpression>
								</UnaryExpression>
							</If.Condition>
							<If.True>
								<ForEach in="ClrUsingNamespaces" var-ct="#LoopCount" var-ix="#LoopIndex" var-item="#item">
									<ForEach.Body>
										<![CDATA[using ${#item};
]]>
									</ForEach.Body>
								</ForEach>
							</If.True>
						</If>
						<![CDATA[
namespace ${ClrNamespace}.${FolderName}
{
	public partial class ${TableNameSingularPascalCase} : ${ClrSuperType}
	{		
		#region Constructors/Destructors
		
		public ${TableNameSingularPascalCase}()
		{
		}
		
		#endregion
		
		#region Fields/Constants
		
		public const string SCHEMA_NAME = "${SchemaName}";
		public const string TABLE_NAME = "${TableName}";
]]>

					<If>
						<If.Condition>
							<BinaryExpression operator="Eq">
								<BinaryExpression.LeftExpression>
									<Value type="System.Boolean" data="true" />
								</BinaryExpression.LeftExpression>
								<BinaryExpression.RightExpression>
									<Facet name="HasSingleColumnServerGeneratedPrimaryKey" />
								</BinaryExpression.RightExpression>
							</BinaryExpression>
						</If.Condition>
						<If.True>
								<![CDATA[		public const bool HAS_SINGLE_COLUMN_SERVER_GENERATED_PRIMARY_KEY = true;
]]>
						</If.True>
						<If.False>
								<![CDATA[		public const bool HAS_SINGLE_COLUMN_SERVER_GENERATED_PRIMARY_KEY = false;
]]>
						</If.False>
					</If>

					<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">							
						<ForEach.Body>
							<![CDATA[		public const string COLUMN_NAME_${ColumnNameConstantCase} = "${ColumnName}";]]>
							
							<If>
								<If.Condition>
									<BinaryExpression operator="Ne">
										<BinaryExpression.LeftExpression>
											<Facet name="#LoopCount" />
										</BinaryExpression.LeftExpression>
										<BinaryExpression.RightExpression>
											<Facet name="#LoopIndex" />
										</BinaryExpression.RightExpression>
									</BinaryExpression>
								</If.Condition>
								<If.True>
<![CDATA[
]]>
								</If.True>
							</If>
						</ForEach.Body>
					</ForEach>
	
<![CDATA[
]]>

						<If>
							<If.Condition>
								<BinaryExpression operator="And">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="HasSingleColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsView" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
		private bool isNew = true;]]>
							</If.True>
						</If>

						<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">							
							<ForEach.Body>
								<![CDATA[
		private ${ColumnCSharpClrNullableType} @${ColumnNameCamelCase};]]>
							</ForEach.Body>
						</ForEach>
						<![CDATA[

		#endregion

		#region Properties/Indexers/Events
]]>
						<If>
							<If.Condition>
								<BinaryExpression operator="And">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="HasSingleColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsView" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[		
		public virtual bool IsNew
		{
			get
			{
				return this.isNew;
			}
			set
			{
				this.isNew = value;
			}
		}
		]]>
							</If.True>
						</If>

						<If>
							<If.Condition>
								<BinaryExpression operator="And">
									<BinaryExpression.LeftExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Value type="System.Boolean" data="true" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="HasSingleColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsView" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="false" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[		
		public virtual bool IsNew
		{
			get
			{
				return ]]>
				
								<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
									<ForEach.Filter>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</ForEach.Filter>
									<ForEach.Body>
										<![CDATA[this.@${ColumnNamePascalCase} == default(${ColumnCSharpClrNullableType})]]>
										<If>
											<If.Condition>
												<BinaryExpression operator="Ne">
													<BinaryExpression.LeftExpression>
														<Facet name="#LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="#LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[ && ]]>
											</If.True>
										</If>
										<If>
											<If.Condition>
												<BinaryExpression operator="Eq">
													<BinaryExpression.LeftExpression>
														<Facet name="#LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="#LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[;
]]>
											</If.True>
										</If>
									</ForEach.Body>
								</ForEach>

								<![CDATA[			}
			set
			{
				if(value)
					]]>	
								
								<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
									<ForEach.Filter>
										<BinaryExpression operator="Eq">
											<BinaryExpression.LeftExpression>
												<Facet name="IsColumnServerGeneratedPrimaryKey" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Value type="System.Boolean" data="True" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</ForEach.Filter>
									<ForEach.Body>
										<![CDATA[this.@${ColumnNamePascalCase}]]>
										<If>
											<If.Condition>
												<BinaryExpression operator="Ne">
													<BinaryExpression.LeftExpression>
														<Facet name="#LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="#LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[ = ]]>
											</If.True>
										</If>
										<If>
											<If.Condition>
												<BinaryExpression operator="Eq">
													<BinaryExpression.LeftExpression>
														<Facet name="#LoopCount" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Facet name="#LoopIndex" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</If.Condition>
											<If.True>
												<![CDATA[ =  default(${ColumnCSharpClrNullableType});
]]>
											</If.True>
										</If>
									</ForEach.Body>
								</ForEach>
			
								<![CDATA[			}
		}
		]]>
							</If.True>
						</If>

						<If>
							<If.Condition>
								<BinaryExpression operator="Eq">
									<BinaryExpression.LeftExpression>
										<Facet name="IsView" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Value type="System.Boolean" data="true" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[		
		public virtual bool IsNew
		{
			get
			{
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
			set
			{
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
		}
		]]>
							</If.True>
						</If>

						<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">							
							<ForEach.Body>
								<If>
									<If.Condition>
										<BinaryExpression operator="Or">
											<BinaryExpression.LeftExpression>
												<BinaryExpression operator="Eq">
													<BinaryExpression.LeftExpression>
														<Facet name="ColumnIsPrimaryKey" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Value type="System.Boolean" data="True" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<BinaryExpression operator="Eq">
													<BinaryExpression.LeftExpression>
														<Facet name="HasNoDefinedPrimaryKeyColumns" />
													</BinaryExpression.LeftExpression>
													<BinaryExpression.RightExpression>
														<Value type="System.Boolean" data="True" />
													</BinaryExpression.RightExpression>
												</BinaryExpression>
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[
		/* PRIMARY_KEY */]]>
									</If.True>
								</If>

								<![CDATA[
		public ${ColumnCSharpClrNullableType} @${ColumnNamePascalCase}
		{
			get
			{
				return this.@${ColumnNameCamelCase};
			}
			set
			{
				this.@${ColumnNameCamelCase} = value;
			}
		}
		]]>
							</ForEach.Body>
						</ForEach>
						<![CDATA[
		#endregion
	}
}
]]>
					</OutputScope>
				</ForEach.Body>
			</ForEach>

		</ForEach.Body>
	</ForEach>

</Template>