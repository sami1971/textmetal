<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2012 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v4.4.0">

	<OutputScope name="${ClrNamespace}\Repository.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Data;

using TextMetal.Core.Plumbing;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="#LoopCount" var-ix="#LoopIndex" var-item="#item">
					<ForEach.Body>
						<![CDATA[using ${#item};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>
				
		<![CDATA[
namespace ${ClrNamespace}
{
	public partial class Repository : IRepository
	{		
		#region Constructors/Destructors
		
		public Repository()
		{
		}
		
		#endregion
		
		#region Fields/Constants
		
		private const string CONNECTION_STRING_NAME = "${ClrNamespace}::ConnectionString";
						
		#endregion
		
		#region Properties/Indexers/Events
		
		public static string ConnectionString
		{
			get
			{
				string connectionString;

				connectionString = AppConfig.GetConnectionString(CONNECTION_STRING_NAME);

				OnPreProcessConnectionString(ref connectionString);
				
				return connectionString;
			}
		}
		
		public static Type ConnectionType
		{
			get
			{
				return Type.GetType(AppConfig.GetConnectionProvider(CONNECTION_STRING_NAME), true);
			}
		}
				
		#endregion
		
		#region Methods/Operators
		
		static partial void OnPreProcessConnectionString(ref string connectionString)
		{
			if (!DatabaseFileManager.UseDatabaseFile)
				return;

			// {0} = DatabaseFileManager.DatabaseFilePath
			connectionString = string.Format(connectionString ?? "", DatabaseFileManager.DatabaseFilePath);
		}


#if DEBUG
		static partial void OnProfileCommand(Type modelType, CommandType commandType, string commandText, IList<IDataParameter> commandParameters, bool executeAsCud, int thisOrThatRecordsAffected)
		{
			/* THIS METHOD SHOULD NOT BE DEFINED IN RELEASE/PRODUCTION BUILDS */
			
			// these are by convention in the TextMetal.Core.Plumbing.AdoNetHelper.ExecuteDictionary(...) API.
			const bool COMMAND_PREPARE = false;
			/* const */ int? COMMAND_TIMEOUT = null;
			const CommandBehavior COMMAND_BEHAVIOR = CommandBehavior.Default;

			string value = "";
			int i;

			value += "\r\n[+++ begin trace +++]\r\n";

			value += string.Format("[Command]: Type = '{0}'; Text = '{1}'; Prepare = '{2}'; Timeout = '{3}'; Behavior = '{4}'.",
								   commandType, commandText, COMMAND_PREPARE, COMMAND_TIMEOUT, COMMAND_BEHAVIOR);

			i = 0;
			foreach (IDbDataParameter commandParameter in commandParameters)
			{
				value += string.Format("\r\n\t[Parameter{0:00}]: Direction = '{1}'; ParameterName = '{2}'; IsNullable = '{3}'; Precision = '{4}'; Scale = '{5}'; Size = '{6}'; DbType = '{7}'; Value = '{8}'.",
									   i++, commandParameter.Direction, commandParameter.ParameterName, commandParameter.IsNullable, commandParameter.Precision, commandParameter.Scale, commandParameter.Size, commandParameter.DbType, (object)commandParameter != null ? commandParameter.Value : "<<null>>");
			}

			value += "\r\n[+++ end trace +++]\r\n";

			System.Diagnostics.Trace.WriteLine(value);
		}
#endif		
		
		public static UnitOfWorkContext GetUnitOfWorkContext()
		{
			return UnitOfWorkContext.Create(ConnectionType, ConnectionString, true);
		}
		
		public static void InitDatabase()
		{
			string resourceName;
			const string CONNECTION_SPECIFIC_RESOURCE_NAME = "${ClrNamespace}.SQL.RevisionHistory({0}).xml";
			
			switch (ConnectionType.Name.ToLower())
			{
				case "sqlconnection":
				case "sqliteconnection":
					resourceName = string.Format(CONNECTION_SPECIFIC_RESOURCE_NAME, ConnectionType.Name);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}

			DatabaseFileManager.InitDatabase(typeof(Repository), resourceName);
		}
		
		private static string ConnectionSpecificGetIdentityCommand()
		{
			switch (ConnectionType.Name.ToLower())
			{
				case "sqlconnection":
					return SqlServerSpecificGetIdentityCommand();
				case "sqliteconnection":
					return SqliteSpecificGetIdentityCommand();
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
		}
		
		private static string ConnectionSpecificGetTableName(string schemaName, string tableName)
		{
			switch (ConnectionType.Name.ToLower())
			{
				case "sqlconnection":
					return SqlServerSpecificGetTableName(schemaName, tableName);
				case "sqliteconnection":
					return SqliteSpecificGetTableName(schemaName, tableName);
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
		}

		private static string ConnectionSpecificGetTableAlias(string tableAlias)
		{
			switch (ConnectionType.Name.ToLower())
			{
				case "sqlconnection":
					return SqlServerSpecificGetTableAlias(tableAlias);
				case "sqliteconnection":
					return SqliteSpecificGetTableAlias(tableAlias);
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
		}

		internal static string ConnectionSpecificGetParameterName(string parameterName)
		{
			switch (ConnectionType.Name.ToLower())
			{
				case "sqlconnection":
					return SqlServerSpecificGetParameterName(parameterName);
				case "sqliteconnection":
					return SqliteSpecificGetParameterName(parameterName);
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
		}

		private static string ConnectionSpecificGetColumnName(string columnName)
		{
			switch (ConnectionType.Name.ToLower())
			{
				case "sqlconnection":
					return SqlServerSpecificGetColumnName(columnName);
				case "sqliteconnection":
					return SqliteSpecificGetColumnName(columnName);
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
		}

		internal static string ConnectionSpecificGetAliasedColumnName(string tableAlias, string columnName)
		{
			switch (ConnectionType.Name.ToLower())
			{
				case "sqlconnection":
					return SqlServerSpecificGetAliasedColumnName(tableAlias, columnName);
				case "sqliteconnection":
					return SqliteSpecificGetAliasedColumnName(tableAlias, columnName);
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
		}

		private static void ConnectionSpecificParameterMagic(UnitOfWorkContext unitOfWorkContext, IDataParameter commandParameter, string generatedFromColumnNativeType)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			if ((object)commandParameter == null)
				throw new ArgumentNullException("commandParameter");

			switch (ConnectionType.Name.ToLower())
			{
				case "sqlconnection":
					SqlServerSpecificParameterMagic(unitOfWorkContext, commandParameter, generatedFromColumnNativeType);
					break;
				case "sqliteconnection":
					SqliteSpecificParameterMagic(unitOfWorkContext, commandParameter, generatedFromColumnNativeType);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
		}

		private static void ConnectionSpecificCommandMagic(UnitOfWorkContext unitOfWorkContext, bool executeAsCud, out int thisOrThatRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if (executeAsCud)
			{
				switch (ConnectionType.Name.ToLower())
				{
					case "sqlconnection":
						thisOrThatRecordsAffected = SQL_SERVER_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
						break;
					case "sqliteconnection":
						thisOrThatRecordsAffected = SQLITE_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
						break;
					default:
						throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
				}
			}
			else
			{
				switch (ConnectionType.Name.ToLower())
				{
					case "sqlconnection":
						thisOrThatRecordsAffected = SQL_SERVER_QUERY_EXPECTED_RECORDS_AFFECTED;
						break;
					case "sqliteconnection":
						thisOrThatRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
						break;
					default:
						throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
				}
			}
		}
		
		static partial void OnProfileCommand(Type modelType, CommandType commandType, string commandText, IList<IDataParameter> commandParameters, bool executeAsCud, int thisOrThatRecordsAffected);
		
		static partial void OnPreProcessConnectionString(ref string connectionString);
		
]]>
		<Alloc token="#LoopCount" />
		
		<Assign token="#LoopCount">
			<Assign.Expression>
				<Value data="16" type="System.Int32" />
			</Assign.Expression>
		</Assign>
		
		<For var-ix="#LoopIndex">
			<For.Intializer>
				<BinaryExpression operator="VarPut">
					<BinaryExpression.LeftExpression>
						<Aspect name="#LoopIndex" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Value data="1" type="System.Int32" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</For.Intializer>
			
			<For.Condition>
				<BinaryExpression operator="Le">
					<BinaryExpression.LeftExpression>
						<Facet name="#LoopIndex" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="#LoopCount" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</For.Condition>
			
			<For.Iterator>
				<BinaryExpression operator="VarPut">
					<BinaryExpression.LeftExpression>
						<Aspect name="#LoopIndex" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<UnaryExpression operator="Incr">
							<UnaryExpression.TheExpression>
								<Facet name="#LoopIndex" />
							</UnaryExpression.TheExpression>							
						</UnaryExpression>
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</For.Iterator>
			
			<For.Body>
			
<![CDATA[		protected delegate TResult Stank<]]>

				<For var-ix="#LoopIndex2">
					<For.Intializer>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value data="1" type="System.Int32" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Intializer>
					
					<For.Condition>
						<BinaryExpression operator="Le">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Condition>
					
					<For.Iterator>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<UnaryExpression operator="Incr">
									<UnaryExpression.TheExpression>
										<Facet name="#LoopIndex2" />
									</UnaryExpression.TheExpression>							
								</UnaryExpression>
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Iterator>
					
					<For.Body><![CDATA[T${#LoopIndex2}, ]]></For.Body>
				</For>				

<![CDATA[TResult>(]]>

				<For var-ix="#LoopIndex2">
					<For.Intializer>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value data="1" type="System.Int32" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Intializer>
					
					<For.Condition>
						<BinaryExpression operator="Le">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Condition>
					
					<For.Iterator>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<UnaryExpression operator="Incr">
									<UnaryExpression.TheExpression>
										<Facet name="#LoopIndex2" />
									</UnaryExpression.TheExpression>							
								</UnaryExpression>
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Iterator>
					
					<For.Body>
						<![CDATA[T${#LoopIndex2} p${#LoopIndex2}]]>
						
						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="#LoopIndex" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="#LoopIndex2" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
<![CDATA[, ]]>
							</If.True>
						</If>
					</For.Body>
				</For>				

<![CDATA[);
]]>
				<If>
					<If.Condition>
						<BinaryExpression operator="Ne">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopCount" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</If.Condition>
					<If.True>
<![CDATA[
]]>
					</If.True>
				</If>
			</For.Body>
		</For>
		
		<Assign token="#LoopCount">
			<Assign.Expression>
				<Value data="15" type="System.Int32" />
			</Assign.Expression>
		</Assign>
		
		<Write newline="true" />
		
		<For var-ix="#LoopIndex">
			<For.Intializer>
				<BinaryExpression operator="VarPut">
					<BinaryExpression.LeftExpression>
						<Aspect name="#LoopIndex" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Value data="1" type="System.Int32" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</For.Intializer>
			
			<For.Condition>
				<BinaryExpression operator="Le">
					<BinaryExpression.LeftExpression>
						<Facet name="#LoopIndex" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="#LoopCount" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</For.Condition>
			
			<For.Iterator>
				<BinaryExpression operator="VarPut">
					<BinaryExpression.LeftExpression>
						<Aspect name="#LoopIndex" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<UnaryExpression operator="Incr">
							<UnaryExpression.TheExpression>
								<Facet name="#LoopIndex" />
							</UnaryExpression.TheExpression>							
						</UnaryExpression>
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</For.Iterator>
			
			<For.Body>
			
<![CDATA[		protected TResult ExecuteAmbientUnitOfWorkAware<]]>

				<For var-ix="#LoopIndex2">
					<For.Intializer>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value data="1" type="System.Int32" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Intializer>
					
					<For.Condition>
						<BinaryExpression operator="Le">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Condition>
					
					<For.Iterator>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<UnaryExpression operator="Incr">
									<UnaryExpression.TheExpression>
										<Facet name="#LoopIndex2" />
									</UnaryExpression.TheExpression>							
								</UnaryExpression>
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Iterator>
					
					<For.Body><![CDATA[T${#LoopIndex2}, ]]></For.Body>
				</For>				

<![CDATA[TResult>(Stank<UnitOfWorkContext]]>

				<For var-ix="#LoopIndex2">
					<For.Intializer>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value data="1" type="System.Int32" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Intializer>
					
					<For.Condition>
						<BinaryExpression operator="Le">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Condition>
					
					<For.Iterator>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<UnaryExpression operator="Incr">
									<UnaryExpression.TheExpression>
										<Facet name="#LoopIndex2" />
									</UnaryExpression.TheExpression>							
								</UnaryExpression>
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Iterator>
					
					<For.Body><![CDATA[, T${#LoopIndex2}]]></For.Body>
				</For>				

<![CDATA[, TResult> callbackMethod]]>

				<For var-ix="#LoopIndex2">
					<For.Intializer>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value data="1" type="System.Int32" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Intializer>
					
					<For.Condition>
						<BinaryExpression operator="Le">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Condition>
					
					<For.Iterator>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<UnaryExpression operator="Incr">
									<UnaryExpression.TheExpression>
										<Facet name="#LoopIndex2" />
									</UnaryExpression.TheExpression>							
								</UnaryExpression>
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Iterator>
					
					<For.Body><![CDATA[, T${#LoopIndex2} p${#LoopIndex2}]]></For.Body>
				</For>				
				
<![CDATA[)
		{			
			TResult retval;
			
			if ((object)UnitOfWorkContext.Current == null)
			{
				using (UnitOfWorkContext unitOfWorkContext = Repository.GetUnitOfWorkContext())
				{
					retval = callbackMethod(unitOfWorkContext]]>

				<For var-ix="#LoopIndex2">
					<For.Intializer>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value data="1" type="System.Int32" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Intializer>
					
					<For.Condition>
						<BinaryExpression operator="Le">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Condition>
					
					<For.Iterator>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<UnaryExpression operator="Incr">
									<UnaryExpression.TheExpression>
										<Facet name="#LoopIndex2" />
									</UnaryExpression.TheExpression>							
								</UnaryExpression>
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Iterator>
					
					<For.Body><![CDATA[, p${#LoopIndex2}]]></For.Body>
				</For>				

<![CDATA[);
											
					unitOfWorkContext.Complete();
					
					return retval;
				}
			}			
			else
			{
				return callbackMethod(UnitOfWorkContext.Current]]>

				<For var-ix="#LoopIndex2">
					<For.Intializer>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value data="1" type="System.Int32" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Intializer>
					
					<For.Condition>
						<BinaryExpression operator="Le">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Condition>
					
					<For.Iterator>
						<BinaryExpression operator="VarPut">
							<BinaryExpression.LeftExpression>
								<Aspect name="#LoopIndex2" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<UnaryExpression operator="Incr">
									<UnaryExpression.TheExpression>
										<Facet name="#LoopIndex2" />
									</UnaryExpression.TheExpression>							
								</UnaryExpression>
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</For.Iterator>
					
					<For.Body><![CDATA[, p${#LoopIndex2}]]></For.Body>
				</For>				

<![CDATA[);
			}
		}
]]>
				<If>
					<If.Condition>
						<BinaryExpression operator="Ne">
							<BinaryExpression.LeftExpression>
								<Facet name="#LoopCount" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Facet name="#LoopIndex" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</If.Condition>
					<If.True>
<![CDATA[
]]>
					</If.True>
				</If>
			</For.Body>
		</For>
		
		<Free token="#LoopCount" />
<![CDATA[
		#endregion
	}
}
]]>
	</OutputScope>

</Template>