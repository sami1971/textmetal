<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2013 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v5.0.0">

	<OutputScope name="${ClrNamespace}\Repository.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Data;
using System.Xml;

using TextMetal.Common.Core;
using TextMetal.Common.Data;
using TextMetal.Common.Data.Advanced;
using TextMetal.Common.Expressions;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="#LoopCount" var-ix="#LoopIndex" var-item="#item">
					<ForEach.Body>
						<![CDATA[using ${#item};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>
				
		<![CDATA[
namespace ${ClrNamespace}
{
	public partial class Repository : IRepository
	{		
		#region Constructors/Destructors
		
		public Repository()
		{
		}
		
		#endregion
		
		#region Fields/Constants
		
		private const string APP_CONFIG_PREFIX = "${ClrNamespace}";
		private const string RESOURCE_NAME_FORMAT = "${ClrNamespace}.SQL.RevisionHistory({0}).xml";
		
		private static readonly DatabaseFileManager databaseFileManager = new DatabaseFileManager(APP_CONFIG_PREFIX, NetSqliteSpecific.Instance);
						
		#endregion
		
		#region Properties/Indexers/Events
		
		public static string ConnectionString
		{
			get
			{
				string connectionString;

				connectionString = AppConfig.GetConnectionString(string.Format("{0}::ConnectionString", APP_CONFIG_PREFIX));

				OnPreProcessConnectionString(ref connectionString);
				
				return connectionString;
			}
		}
		
		public static Type ConnectionType
		{
			get
			{
				return Type.GetType(AppConfig.GetConnectionProvider(string.Format("{0}::ConnectionString", APP_CONFIG_PREFIX)), true);
			}
		}

		public static DatabaseFileManager DatabaseFileManager
		{
			get
			{
				return databaseFileManager;
			}
		}
		
		public static string DataSourceTag
		{
			get
			{
				string value;

				if (!AppConfig.HasAppSetting(string.Format("{0}::DataSourceTag", APP_CONFIG_PREFIX)))
					return null;

				value = AppConfig.GetAppSetting<string>(string.Format("{0}::DataSourceTag", APP_CONFIG_PREFIX));

				return value;
			}
		}
		
		#endregion
		
		#region Methods/Operators
		
		static partial void OnPreProcessConnectionString(ref string connectionString)
		{
			if (!DatabaseFileManager.UseDatabaseFile)
				return;

			// {0} = DatabaseFileManager.DatabaseFilePath
			connectionString = string.Format(connectionString ?? "", DatabaseFileManager.DatabaseFilePath);
		}


#if DEBUG
		static partial void OnProfileCommand(Type modelType, CommandType commandType, string commandText, IList<IDataParameter> commandParameters, bool executeAsCud, int thisOrThatRecordsAffected)
		{
			/* THIS METHOD SHOULD NOT BE DEFINED IN RELEASE/PRODUCTION BUILDS */
			
			// these are by convention in the TextMetal.Common.Data.AdoNetHelper.ExecuteDictionary(...) API.
			const bool COMMAND_PREPARE = false;
			/* const */ int? COMMAND_TIMEOUT = null;
			const CommandBehavior COMMAND_BEHAVIOR = CommandBehavior.Default;

			string value = "";
			int i;

			value += "\r\n[+++ begin trace +++]\r\n";

			value += string.Format("[Command]: Type = '{0}'; Text = '{1}'; Prepare = '{2}'; Timeout = '{3}'; Behavior = '{4}'.",
								   commandType, commandText, COMMAND_PREPARE, COMMAND_TIMEOUT, COMMAND_BEHAVIOR);

			i = 0;
			foreach (IDbDataParameter commandParameter in commandParameters)
			{
				value += string.Format("\r\n\t[Parameter{0:00}]: Direction = '{1}'; ParameterName = '{2}'; IsNullable = '{3}'; Precision = '{4}'; Scale = '{5}'; Size = '{6}'; DbType = '{7}'; Value = '{8}'.",
									   i++, commandParameter.Direction, commandParameter.ParameterName, commandParameter.IsNullable, commandParameter.Precision, commandParameter.Scale, commandParameter.Size, commandParameter.DbType, (object)commandParameter != null ? commandParameter.Value : "<<null>>");
			}

			value += "\r\n[+++ end trace +++]\r\n";

			System.Diagnostics.Trace.WriteLine(value);
		}
#endif		
		
		public static IUnitOfWorkContext GetUnitOfWorkContext()
		{
			return UnitOfWorkContext.Create(ConnectionType, ConnectionString, true);
		}
		
		public static void InitDatabase()
		{
			string resourceName;
			
			resourceName = string.Format(RESOURCE_NAME_FORMAT, GetDataSourceTagSpecificInstance().DataSourceTag.SafeToString().ToLower());
			
			DatabaseFileManager.InitializeFromRevisionHistoryResource(UowcFactory.Instance, typeof(Repository), resourceName);
		}
		
		private static IDataSourceTagSpecific GetDataSourceTagSpecificInstance()
		{
			if (DataSourceTag.SafeToString().ToLower() == NetSqlServerSpecific.Instance.DataSourceTag.SafeToString().ToLower())
				return NetSqlServerSpecific.Instance;
			else if (DataSourceTag.SafeToString().ToLower() == NetSqliteSpecific.Instance.DataSourceTag.SafeToString().ToLower())
				return NetSqliteSpecific.Instance;
			else if (DataSourceTag.SafeToString().ToLower() == OdbcSybaseIqSpecific.Instance.DataSourceTag.SafeToString().ToLower())
				return OdbcSybaseIqSpecific.Instance;
			else if (DataSourceTag.SafeToString().ToLower() == OdbcSqlServerSpecific.Instance.DataSourceTag.SafeToString().ToLower())
				return OdbcSqlServerSpecific.Instance;
			else
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");
		}
				
		static partial void OnProfileCommand(Type modelType, CommandType commandType, string commandText, IList<IDataParameter> commandParameters, bool executeAsCud, int thisOrThatRecordsAffected);
		
		static partial void OnPreProcessConnectionString(ref string connectionString);
		
		#endregion
		
		#region Classes/Structs/Interfaces/Enums/Delegates
				
		internal sealed class UowcFactory : IUnitOfWorkContextFactory
		{
			#region Constructors/Destructors

			private UowcFactory()
			{
			}

			#endregion

			#region Fields/Constants

			private static readonly IUnitOfWorkContextFactory instance = new UowcFactory();

			#endregion

			#region Properties/Indexers/Events

			public static IUnitOfWorkContextFactory Instance
			{
				get
				{
					return instance;
				}
			}

			#endregion

			#region Methods/Operators

			public IUnitOfWorkContext GetUnitOfWorkContext()
			{
				return Repository.GetUnitOfWorkContext();
			}

			#endregion
		}

		#endregion
	}
}
]]>
	</OutputScope>

</Template>