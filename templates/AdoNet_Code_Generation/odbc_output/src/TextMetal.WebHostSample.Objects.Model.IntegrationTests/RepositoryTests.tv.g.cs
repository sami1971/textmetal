//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by:
// TextMetal 4.4.5.2714;
// 		Copyright ©2002-2012 Daniel Bullington (dpbullington@gmail.com)
//		Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
//		Project URL: https://github.com/dpbullington/textmetal
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------

/*
	Copyright ©2002-2012 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
*/

using System;
using System.Collections.Generic;

using NUnit.Framework;

using TestingFramework.Core.Customization;

using TextMetal.Core.ExpressionModel;
using TextMetal.Plumbing.CommonFacilities;

using TextMetal.WebHostSample.Objects.Model.Tables;

namespace TextMetal.WebHostSample.Objects.Model.IntegrationTests
{
	[TestFixture]
	public partial class RepositoryTests
	{		
		#region Methods/Operators
		
		[Test]
		public void ShouldSaveEventLogTest()
		{
			Repository repository;
			EventLog eventLog;
			bool result;
			
			Assert.IsNull(UnitOfWorkContext.Current);
			
			repository = new Repository();
				
			using (UnitOfWorkContext unitOfWorkContext = Repository.GetUnitOfWorkContext())
			{
				try
				{
					UnitOfWorkContext.Current = unitOfWorkContext;
					
					Assert.IsNotNull(UnitOfWorkContext.Current);
					
					eventLog = new EventLog();			
					eventLog.@EventText = ValueGenerator.GetNextValue<String>();
					eventLog.@CreationTimestamp = ValueGenerator.GetNextValue<DateTime>();
					eventLog.@ModificationTimestamp = ValueGenerator.GetNextValue<DateTime>();
					eventLog.@LogicalDelete = ValueGenerator.GetNextValue<Boolean>();

					// do INSERT first
					result = repository.SaveEventLog(eventLog);

					Assert.IsTrue(result);
					
					eventLog.@EventText = ValueGenerator.GetNextValue<String>();
					eventLog.@CreationTimestamp = ValueGenerator.GetNextValue<DateTime>();
					eventLog.@ModificationTimestamp = ValueGenerator.GetNextValue<DateTime>();
					eventLog.@LogicalDelete = ValueGenerator.GetNextValue<Boolean>();

					// do UPDATE next
					result = repository.SaveEventLog(eventLog);

					Assert.IsTrue(result);
					
					unitOfWorkContext.Complete();
				}
				finally
				{
					UnitOfWorkContext.Current = null;
				}				
			}
			
			Assert.IsNull(UnitOfWorkContext.Current);
		}
		
		[Test]
		public void ShouldLoadEventLogTest()
		{
			throw new NotImplementedException();
		}
		
		[Test]
		public void ShouldFindEventLogsTest()
		{
			Repository repository;
			IList<EventLog> eventLogs;

			Assert.IsNull(UnitOfWorkContext.Current);

			repository = new Repository();

			using (UnitOfWorkContext unitOfWorkContext = Repository.GetUnitOfWorkContext())
			{
				try
				{
					UnitOfWorkContext.Current = unitOfWorkContext;

					Assert.IsNotNull(UnitOfWorkContext.Current);

					eventLogs = repository.FindEventLogs(new Query(new NullaryExpressionConstruct(), new Order[] { }, 0, 0));

					Assert.IsNotNull(eventLogs);
					Assert.IsNotEmpty(eventLogs);

					unitOfWorkContext.Complete();
				}
				finally
				{
					UnitOfWorkContext.Current = null;
				}
			}

			Assert.IsNull(UnitOfWorkContext.Current);
		}

		[Test]
		public void ShouldSaveEmailMessageTest()
		{
			Repository repository;
			EmailMessage emailMessage;
			bool result;
			
			Assert.IsNull(UnitOfWorkContext.Current);
			
			repository = new Repository();
				
			using (UnitOfWorkContext unitOfWorkContext = Repository.GetUnitOfWorkContext())
			{
				try
				{
					UnitOfWorkContext.Current = unitOfWorkContext;
					
					Assert.IsNotNull(UnitOfWorkContext.Current);
					
					emailMessage = new EmailMessage();			
					emailMessage.@From = ValueGenerator.GetNextValue<String>();
					emailMessage.@Sender = ValueGenerator.GetNextValue<String>();
					emailMessage.@ReplyTo = ValueGenerator.GetNextValue<String>();
					emailMessage.@To = ValueGenerator.GetNextValue<String>();
					emailMessage.@Cc = ValueGenerator.GetNextValue<String>();
					emailMessage.@Bcc = ValueGenerator.GetNextValue<String>();
					emailMessage.@Subject = ValueGenerator.GetNextValue<String>();
					emailMessage.@IsBodyHtml = ValueGenerator.GetNextValue<Boolean>();
					emailMessage.@Body = ValueGenerator.GetNextValue<String>();
					emailMessage.@Processed = ValueGenerator.GetNextValue<Boolean>();
					emailMessage.@CreationTimestamp = ValueGenerator.GetNextValue<DateTime>();
					emailMessage.@ModificationTimestamp = ValueGenerator.GetNextValue<DateTime>();
					emailMessage.@LogicalDelete = ValueGenerator.GetNextValue<Boolean>();

					// do INSERT first
					result = repository.SaveEmailMessage(emailMessage);

					Assert.IsTrue(result);
					
					emailMessage.@From = ValueGenerator.GetNextValue<String>();
					emailMessage.@Sender = ValueGenerator.GetNextValue<String>();
					emailMessage.@ReplyTo = ValueGenerator.GetNextValue<String>();
					emailMessage.@To = ValueGenerator.GetNextValue<String>();
					emailMessage.@Cc = ValueGenerator.GetNextValue<String>();
					emailMessage.@Bcc = ValueGenerator.GetNextValue<String>();
					emailMessage.@Subject = ValueGenerator.GetNextValue<String>();
					emailMessage.@IsBodyHtml = ValueGenerator.GetNextValue<Boolean>();
					emailMessage.@Body = ValueGenerator.GetNextValue<String>();
					emailMessage.@Processed = ValueGenerator.GetNextValue<Boolean>();
					emailMessage.@CreationTimestamp = ValueGenerator.GetNextValue<DateTime>();
					emailMessage.@ModificationTimestamp = ValueGenerator.GetNextValue<DateTime>();
					emailMessage.@LogicalDelete = ValueGenerator.GetNextValue<Boolean>();

					// do UPDATE next
					result = repository.SaveEmailMessage(emailMessage);

					Assert.IsTrue(result);
					
					unitOfWorkContext.Complete();
				}
				finally
				{
					UnitOfWorkContext.Current = null;
				}				
			}
			
			Assert.IsNull(UnitOfWorkContext.Current);
		}
		
		[Test]
		public void ShouldLoadEmailMessageTest()
		{
			throw new NotImplementedException();
		}
		
		[Test]
		public void ShouldFindEmailMessagesTest()
		{
			Repository repository;
			IList<EmailMessage> emailMessages;

			Assert.IsNull(UnitOfWorkContext.Current);

			repository = new Repository();

			using (UnitOfWorkContext unitOfWorkContext = Repository.GetUnitOfWorkContext())
			{
				try
				{
					UnitOfWorkContext.Current = unitOfWorkContext;

					Assert.IsNotNull(UnitOfWorkContext.Current);

					emailMessages = repository.FindEmailMessages(new Query(new NullaryExpressionConstruct(), new Order[] { }, 0, 0));

					Assert.IsNotNull(emailMessages);
					Assert.IsNotEmpty(emailMessages);

					unitOfWorkContext.Complete();
				}
				finally
				{
					UnitOfWorkContext.Current = null;
				}
			}

			Assert.IsNull(UnitOfWorkContext.Current);
		}

		[Test]
		public void ShouldSaveEmailAttachmentTest()
		{
			Repository repository;
			EmailAttachment emailAttachment;
			bool result;
			
			Assert.IsNull(UnitOfWorkContext.Current);
			
			repository = new Repository();
				
			using (UnitOfWorkContext unitOfWorkContext = Repository.GetUnitOfWorkContext())
			{
				try
				{
					UnitOfWorkContext.Current = unitOfWorkContext;
					
					Assert.IsNotNull(UnitOfWorkContext.Current);
					
					emailAttachment = new EmailAttachment();			
					emailAttachment.@EmailMessageId = ValueGenerator.GetNextValue<Int32>();
					emailAttachment.@MimeType = ValueGenerator.GetNextValue<String>();
					emailAttachment.@AttachmentBits = ValueGenerator.GetNextValue<Byte[]>();
					emailAttachment.@CreationTimestamp = ValueGenerator.GetNextValue<DateTime>();
					emailAttachment.@ModificationTimestamp = ValueGenerator.GetNextValue<DateTime>();
					emailAttachment.@LogicalDelete = ValueGenerator.GetNextValue<Boolean>();

					// do INSERT first
					result = repository.SaveEmailAttachment(emailAttachment);

					Assert.IsTrue(result);
					
					emailAttachment.@EmailMessageId = ValueGenerator.GetNextValue<Int32>();
					emailAttachment.@MimeType = ValueGenerator.GetNextValue<String>();
					emailAttachment.@AttachmentBits = ValueGenerator.GetNextValue<Byte[]>();
					emailAttachment.@CreationTimestamp = ValueGenerator.GetNextValue<DateTime>();
					emailAttachment.@ModificationTimestamp = ValueGenerator.GetNextValue<DateTime>();
					emailAttachment.@LogicalDelete = ValueGenerator.GetNextValue<Boolean>();

					// do UPDATE next
					result = repository.SaveEmailAttachment(emailAttachment);

					Assert.IsTrue(result);
					
					unitOfWorkContext.Complete();
				}
				finally
				{
					UnitOfWorkContext.Current = null;
				}				
			}
			
			Assert.IsNull(UnitOfWorkContext.Current);
		}
		
		[Test]
		public void ShouldLoadEmailAttachmentTest()
		{
			throw new NotImplementedException();
		}
		
		[Test]
		public void ShouldFindEmailAttachmentsTest()
		{
			Repository repository;
			IList<EmailAttachment> emailAttachments;

			Assert.IsNull(UnitOfWorkContext.Current);

			repository = new Repository();

			using (UnitOfWorkContext unitOfWorkContext = Repository.GetUnitOfWorkContext())
			{
				try
				{
					UnitOfWorkContext.Current = unitOfWorkContext;

					Assert.IsNotNull(UnitOfWorkContext.Current);

					emailAttachments = repository.FindEmailAttachments(new Query(new NullaryExpressionConstruct(), new Order[] { }, 0, 0));

					Assert.IsNotNull(emailAttachments);
					Assert.IsNotEmpty(emailAttachments);

					unitOfWorkContext.Complete();
				}
				finally
				{
					UnitOfWorkContext.Current = null;
				}
			}

			Assert.IsNull(UnitOfWorkContext.Current);
		}

		#endregion
	}
}
