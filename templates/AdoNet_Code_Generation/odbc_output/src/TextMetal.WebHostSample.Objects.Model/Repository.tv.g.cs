//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by:
// TextMetal 4.4.5.2714;
// 		Copyright ©2002-2012 Daniel Bullington (dpbullington@gmail.com)
//		Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
//		Project URL: https://github.com/dpbullington/textmetal
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------

/*
	Copyright ©2002-2012 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

using TextMetal.Plumbing.CommonFacilities;

using TextMetal.WebHostSample.Objects.Model.Tables;

namespace TextMetal.WebHostSample.Objects.Model
{
	public partial class Repository
	{		
		#region Methods/Operators
		
		protected bool PersistModel<TModel>(UnitOfWorkContext unitOfWorkContext, TModel model, CommandType commandType, string commandText, IList<IDataParameter> commandParameters, int persistNotExpectedRecordsAffected, Action<IDictionary<string, object>, TModel> mapToCallback)
			where TModel : class, new()
		{
			int recordsAffected;
			IList<IDictionary<string, object>> results;

			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			if ((object)model == null)
				throw new ArgumentNullException("model");

			if ((object)commandText == null)
				throw new ArgumentNullException("commandText");

			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			if ((object)mapToCallback == null)
				throw new ArgumentNullException("mapToCallback");

			if (DataType.IsNullOrWhiteSpace(commandText))
				throw new ArgumentOutOfRangeException("commandText");
			
			OnProfileCommand(typeof(TModel), commandType, commandText, commandParameters, true, persistNotExpectedRecordsAffected);
			
			results = unitOfWorkContext.ExecuteDictionary(commandType, commandText, commandParameters, out recordsAffected);

			if (recordsAffected <= persistNotExpectedRecordsAffected)
			{
				// concurrency failure
				unitOfWorkContext.Divergent();
				return false;
			}

			if ((object)results == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			if (results.Count == 1)
				mapToCallback(results[0], model);
			
			return true;
		}
		
		protected IList<TModel> QueryModel<TModel>(UnitOfWorkContext unitOfWorkContext, CommandType commandType, string commandText, IList<IDataParameter> commandParameters, int queryExpectedRecordsAffected, Action<IDictionary<string, object>, TModel> mapToCallback)
			where TModel : class, new()
		{
			IList<TModel> models;
			TModel model;
			int recordsAffected;
			IList<IDictionary<string, object>> results;

			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			if ((object)commandText == null)
				throw new ArgumentNullException("commandText");

			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			if ((object)mapToCallback == null)
				throw new ArgumentNullException("mapToCallback");

			if (DataType.IsNullOrWhiteSpace(commandText))
				throw new ArgumentOutOfRangeException("commandText");

			OnProfileCommand(typeof(TModel), commandType, commandText, commandParameters, false, queryExpectedRecordsAffected);
			
			results = unitOfWorkContext.ExecuteDictionary(commandType, commandText, commandParameters, out recordsAffected);

			if (recordsAffected != queryExpectedRecordsAffected)
			{
				// idempotency failure
				unitOfWorkContext.Divergent();
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}

			if ((object)results == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			models = new List<TModel>();

			foreach (IDictionary<string, object> result in results)
			{
				model = new TModel();
				mapToCallback(result, model);
				models.Add(model);
			}

			return models;
		}
		
		protected TModel FetchModel<TModel>(UnitOfWorkContext unitOfWorkContext, CommandType commandType, string commandText, IList<IDataParameter> commandParameters, int queryExpectedRecordsAffected, Action<IDictionary<string, object>, TModel> mapToCallback)
			where TModel: class, new()
		{
			TModel model;
			int recordsAffected;
			IList<IDictionary<string, object>> results;
						
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandText == null)
				throw new ArgumentNullException("commandText");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			if ((object)mapToCallback == null)
				throw new ArgumentNullException("mapToCallback");

			if (DataType.IsNullOrWhiteSpace(commandText))
				throw new ArgumentOutOfRangeException("commandText");
			
			OnProfileCommand(typeof(TModel), commandType, commandText, commandParameters, false, queryExpectedRecordsAffected);
			
			results = unitOfWorkContext.ExecuteDictionary(commandType, commandText, commandParameters, out recordsAffected);
			
			if (recordsAffected != queryExpectedRecordsAffected)
			{
				// idempotency failure
				unitOfWorkContext.Divergent();
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
				
			if ((object)results == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			if (results.Count != 1)
				return null;

			model = new TModel();

			mapToCallback(results[0], model);

			return model;
		}
		
		protected void FillModel<TModel>(UnitOfWorkContext unitOfWorkContext, TModel model, CommandType commandType, string commandText, IList<IDataParameter> commandParameters, int queryExpectedRecordsAffected, Action<IDictionary<string, object>, TModel> mapToCallback)
			where TModel: class, new()
		{
			int recordsAffected;
			IList<IDictionary<string, object>> results;
						
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)model == null)
				throw new ArgumentNullException("model");
				
			if ((object)commandText == null)
				throw new ArgumentNullException("commandText");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			if ((object)mapToCallback == null)
				throw new ArgumentNullException("mapToCallback");

			if (DataType.IsNullOrWhiteSpace(commandText))
				throw new ArgumentOutOfRangeException("commandText");
			
			OnProfileCommand(typeof(TModel), commandType, commandText, commandParameters, false, queryExpectedRecordsAffected);
			
			results = unitOfWorkContext.ExecuteDictionary(commandType, commandText, commandParameters, out recordsAffected);
			
			if (recordsAffected != queryExpectedRecordsAffected)
			{
				// idempotency failure
				unitOfWorkContext.Divergent();
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
				
			if ((object)results == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			if (results.Count != 1)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			mapToCallback(results[0], model);
		}
		
		public EventLog LoadEventLog(Int32 eventLogId)
		{
			EventLog retval;
						
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, p1) => this.LoadEventLog(uowc, p1), eventLogId);
			
			return retval;
		}
		
		public EventLog LoadEventLog(UnitOfWorkContext unitOfWorkContext, Int32 eventLogId)
		{			
			EventLog eventLog;			
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int queryExpectedRecordsAffected;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			commandParameters = new List<IDataParameter>();
			
			commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_EVENT_LOG_ID), eventLogId);
			commandParameters.Add(commandParameter);
			ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "int");

			commandText = @"SELECT " + ConnectionSpecificGetAliasedColumnName("t0", EventLog.COLUMN_NAME_EVENT_LOG_ID) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EventLog.COLUMN_NAME_EVENT_TEXT) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EventLog.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EventLog.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EventLog.COLUMN_NAME_LOGICAL_DELETE) + @" FROM  " + ConnectionSpecificGetTableName(EventLog.SCHEMA_NAME_DBO, EventLog.TABLE_NAME_EVENT_LOG) + @" " + ConnectionSpecificGetTableAlias("t0") + @" WHERE " + ConnectionSpecificGetAliasedColumnName("t0", EventLog.COLUMN_NAME_EVENT_LOG_ID) + @" = " + ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_EVENT_LOG_ID) + @" ORDER BY " + ConnectionSpecificGetAliasedColumnName("t0", EventLog.COLUMN_NAME_EVENT_LOG_ID) + @" ASC";			
			
			ConnectionSpecificCommandMagic(unitOfWorkContext, false, out queryExpectedRecordsAffected);
			
			eventLog = this.FetchModel<EventLog>(unitOfWorkContext, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEventLog);
							
			this.OnSelectEventLog(unitOfWorkContext, eventLog);

			return eventLog;
		}
		
		public IList<EventLog> FindEventLogs(Query eventLogQuery)
		{
			IList<EventLog> retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, q) => this.FindEventLogs(uowc, q), eventLogQuery);
			
			return retval;
		}
		
		public IList<EventLog> FindEventLogs(UnitOfWorkContext unitOfWorkContext, Query eventLogQuery)
		{
			IList<EventLog> eventLogs;			
			List<IDataParameter> commandParameters;
			string commandText, filterFragment, sortFragment;
			int queryExpectedRecordsAffected;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)eventLogQuery == null)
				throw new ArgumentNullException("eventLogQuery");	
			
			if ((object)eventLogQuery.Orders == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameters = new List<IDataParameter>();
			
			filterFragment = SqlExpressionVisitor.GetFilterText(unitOfWorkContext, commandParameters, eventLogQuery.Expression);
			sortFragment = SqlExpressionVisitor.GetSortText(unitOfWorkContext, commandParameters, eventLogQuery.Orders);

			commandText = @"SELECT " + ConnectionSpecificGetAliasedColumnName("t0", EventLog.COLUMN_NAME_EVENT_LOG_ID) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EventLog.COLUMN_NAME_EVENT_TEXT) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EventLog.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EventLog.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EventLog.COLUMN_NAME_LOGICAL_DELETE) + @" FROM  " + ConnectionSpecificGetTableName(EventLog.SCHEMA_NAME_DBO, EventLog.TABLE_NAME_EVENT_LOG) + @" " + ConnectionSpecificGetTableAlias("t0") + @" WHERE {0} ORDER BY {1}";
			commandText = string.Format(commandText, filterFragment, sortFragment);
			
			ConnectionSpecificCommandMagic(unitOfWorkContext, false, out queryExpectedRecordsAffected);
			
			eventLogs = this.QueryModel<EventLog>(unitOfWorkContext, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEventLog);			
			
			foreach (EventLog eventLog in eventLogs)
				this.OnSelectEventLog(unitOfWorkContext, eventLog);
							
			return eventLogs;
		}
		
		public bool SaveEventLog(EventLog eventLog)
		{
			bool retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.SaveEventLog(uowc, e), eventLog);
			
			return retval;
		}
		
		public bool SaveEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog)
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected, queryExpectedRecordsAffected;
			bool wasNew, retval;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)eventLog == null)
				throw new ArgumentNullException("eventLog");
			
			wasNew = eventLog.IsNew;
			
			commandParameters = new List<IDataParameter>();
			
			if (wasNew)
			{	
				this.OnPreInsertEventLog(unitOfWorkContext, eventLog);
				
				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 0, 0, 0, false, ConnectionSpecificGetParameterName("EventText"), eventLog.EventText);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "ntext");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, ConnectionSpecificGetParameterName("CreationTimestamp"), eventLog.CreationTimestamp);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "datetime");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, ConnectionSpecificGetParameterName("ModificationTimestamp"), eventLog.ModificationTimestamp);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "datetime");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, ConnectionSpecificGetParameterName("LogicalDelete"), eventLog.LogicalDelete);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "bit");

				commandText = @"INSERT INTO " + ConnectionSpecificGetTableName(EventLog.SCHEMA_NAME_DBO, EventLog.TABLE_NAME_EVENT_LOG) + @" (" + ConnectionSpecificGetColumnName(EventLog.COLUMN_NAME_EVENT_TEXT) + @", " + ConnectionSpecificGetColumnName(EventLog.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetColumnName(EventLog.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetColumnName(EventLog.COLUMN_NAME_LOGICAL_DELETE) + @") VALUES (" + ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_EVENT_TEXT) + @", " + ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_LOGICAL_DELETE) + @")";
			
				ConnectionSpecificCommandMagic(unitOfWorkContext, true, out persistNotExpectedRecordsAffected);
			}
			else
			{
				this.OnPreUpdateEventLog(unitOfWorkContext, eventLog);
				
				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 0, 0, 0, false, ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_EVENT_TEXT), eventLog.EventText);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "ntext");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_CREATION_TIMESTAMP), eventLog.CreationTimestamp);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "datetime");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_MODIFICATION_TIMESTAMP), eventLog.ModificationTimestamp);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "datetime");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_LOGICAL_DELETE), eventLog.LogicalDelete);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "bit");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_EVENT_LOG_ID), eventLog.EventLogId);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "int");

				commandText = @"UPDATE " + ConnectionSpecificGetTableName(EventLog.SCHEMA_NAME_DBO, EventLog.TABLE_NAME_EVENT_LOG) + @" SET " + ConnectionSpecificGetColumnName(EventLog.COLUMN_NAME_EVENT_TEXT) + @" = " + ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_EVENT_TEXT) + @", " + ConnectionSpecificGetColumnName(EventLog.COLUMN_NAME_CREATION_TIMESTAMP) + @" = " + ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetColumnName(EventLog.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @" = " + ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetColumnName(EventLog.COLUMN_NAME_LOGICAL_DELETE) + @" = " + ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_LOGICAL_DELETE) + @" WHERE " + ConnectionSpecificGetColumnName(EventLog.COLUMN_NAME_EVENT_LOG_ID) + @" = " + ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_EVENT_LOG_ID);
				
				ConnectionSpecificCommandMagic(unitOfWorkContext, true, out persistNotExpectedRecordsAffected);
			}			
			
			retval = this.PersistModel<EventLog>(unitOfWorkContext, eventLog, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapToEventLog);
		
			if (!retval)
				return retval;
			
			commandParameters.Clear();
			commandText = @"SELECT " + ConnectionSpecificGetIdentityCommand() + @" AS " + ConnectionSpecificGetColumnName(EventLog.COLUMN_NAME_EVENT_LOG_ID);
				
			ConnectionSpecificCommandMagic(unitOfWorkContext, false, out queryExpectedRecordsAffected);
				
			if (wasNew && !DataType.IsNullOrWhiteSpace(commandText))
			{
				// select the identity on the same connection
				this.FillModel<EventLog>(unitOfWorkContext, eventLog, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEventLog);
			}
			
			if (wasNew)
			{
				this.OnPostInsertEventLog(unitOfWorkContext, eventLog);
			}
			else
			{
				this.OnPostUpdateEventLog(unitOfWorkContext, eventLog);
			}			

			return retval;
		}
		
		public bool DiscardEventLog(EventLog eventLog)
		{
			bool retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.DiscardEventLog(uowc, e), eventLog);
			
			return retval;
		}
		
		public bool DiscardEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog)
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected;
			bool retval;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)eventLog == null)
				throw new ArgumentNullException("eventLog");
			
			if (eventLog.IsNew)
				return true;
				
			commandParameters = new List<IDataParameter>();			
						
			commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_EVENT_LOG_ID), eventLog.EventLogId);
			commandParameters.Add(commandParameter);
			ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "int");

			this.OnPreDeleteEventLog(unitOfWorkContext, eventLog);

			commandText = @"DELETE FROM " + ConnectionSpecificGetTableName(EventLog.SCHEMA_NAME_DBO, EventLog.TABLE_NAME_EVENT_LOG) + @" WHERE " + ConnectionSpecificGetColumnName(EventLog.COLUMN_NAME_EVENT_LOG_ID) + @" = " + ConnectionSpecificGetParameterName(EventLog.COLUMN_NAME_EVENT_LOG_ID);
			
			ConnectionSpecificCommandMagic(unitOfWorkContext, true, out persistNotExpectedRecordsAffected);
			
			retval = this.PersistModel<EventLog>(unitOfWorkContext, eventLog, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapToEventLog);

			this.OnPostDeleteEventLog(unitOfWorkContext, eventLog);
						
			eventLog.IsNew = false;

			return retval;
		}
		
		private static void MapToEventLog(IDictionary<string, object> result, EventLog eventLog)
		{
			object value;
			
			if ((object)result == null)
				throw new ArgumentNullException("result");
				
			if ((object)eventLog == null)
				throw new ArgumentNullException("eventLog");
			
			if (result.TryGetValue("EventLogId", out value))
				eventLog.EventLogId = value.ChangeType<Nullable<Int32>>();

			if (result.TryGetValue("EventText", out value))
				eventLog.EventText = value.ChangeType<String>();

			if (result.TryGetValue("CreationTimestamp", out value))
				eventLog.CreationTimestamp = value.ChangeType<Nullable<DateTime>>();

			if (result.TryGetValue("ModificationTimestamp", out value))
				eventLog.ModificationTimestamp = value.ChangeType<Nullable<DateTime>>();

			if (result.TryGetValue("LogicalDelete", out value))
				eventLog.LogicalDelete = value.ChangeType<Nullable<Boolean>>();
		}
		
		partial void OnPreInsertEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog);
		
		partial void OnPostInsertEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog);
		
		partial void OnPreUpdateEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog);
		
		partial void OnPostUpdateEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog);
		
		partial void OnPreDeleteEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog);
		
		partial void OnPostDeleteEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog);
		
		partial void OnSelectEventLog(UnitOfWorkContext unitOfWorkContext, EventLog eventLog);		

		public EmailMessage LoadEmailMessage(Int32 emailMessageId)
		{
			EmailMessage retval;
						
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, p1) => this.LoadEmailMessage(uowc, p1), emailMessageId);
			
			return retval;
		}
		
		public EmailMessage LoadEmailMessage(UnitOfWorkContext unitOfWorkContext, Int32 emailMessageId)
		{			
			EmailMessage emailMessage;			
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int queryExpectedRecordsAffected;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			commandParameters = new List<IDataParameter>();
			
			commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_EMAIL_MESSAGE_ID), emailMessageId);
			commandParameters.Add(commandParameter);
			ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "int");

			commandText = @"SELECT " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_EMAIL_MESSAGE_ID) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_FROM) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_SENDER) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_REPLY_TO) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_TO) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_CC) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_BCC) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_SUBJECT) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_IS_BODY_HTML) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_BODY) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_PROCESSED) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_LOGICAL_DELETE) + @" FROM  " + ConnectionSpecificGetTableName(EmailMessage.SCHEMA_NAME_DBO, EmailMessage.TABLE_NAME_EMAIL_MESSAGE) + @" " + ConnectionSpecificGetTableAlias("t0") + @" WHERE " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_EMAIL_MESSAGE_ID) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_EMAIL_MESSAGE_ID) + @" ORDER BY " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_EMAIL_MESSAGE_ID) + @" ASC";			
			
			ConnectionSpecificCommandMagic(unitOfWorkContext, false, out queryExpectedRecordsAffected);
			
			emailMessage = this.FetchModel<EmailMessage>(unitOfWorkContext, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEmailMessage);
							
			this.OnSelectEmailMessage(unitOfWorkContext, emailMessage);

			return emailMessage;
		}
		
		public IList<EmailMessage> FindEmailMessages(Query emailMessageQuery)
		{
			IList<EmailMessage> retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, q) => this.FindEmailMessages(uowc, q), emailMessageQuery);
			
			return retval;
		}
		
		public IList<EmailMessage> FindEmailMessages(UnitOfWorkContext unitOfWorkContext, Query emailMessageQuery)
		{
			IList<EmailMessage> emailMessages;			
			List<IDataParameter> commandParameters;
			string commandText, filterFragment, sortFragment;
			int queryExpectedRecordsAffected;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)emailMessageQuery == null)
				throw new ArgumentNullException("emailMessageQuery");	
			
			if ((object)emailMessageQuery.Orders == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameters = new List<IDataParameter>();
			
			filterFragment = SqlExpressionVisitor.GetFilterText(unitOfWorkContext, commandParameters, emailMessageQuery.Expression);
			sortFragment = SqlExpressionVisitor.GetSortText(unitOfWorkContext, commandParameters, emailMessageQuery.Orders);

			commandText = @"SELECT " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_EMAIL_MESSAGE_ID) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_FROM) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_SENDER) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_REPLY_TO) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_TO) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_CC) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_BCC) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_SUBJECT) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_IS_BODY_HTML) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_BODY) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_PROCESSED) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailMessage.COLUMN_NAME_LOGICAL_DELETE) + @" FROM  " + ConnectionSpecificGetTableName(EmailMessage.SCHEMA_NAME_DBO, EmailMessage.TABLE_NAME_EMAIL_MESSAGE) + @" " + ConnectionSpecificGetTableAlias("t0") + @" WHERE {0} ORDER BY {1}";
			commandText = string.Format(commandText, filterFragment, sortFragment);
			
			ConnectionSpecificCommandMagic(unitOfWorkContext, false, out queryExpectedRecordsAffected);
			
			emailMessages = this.QueryModel<EmailMessage>(unitOfWorkContext, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEmailMessage);			
			
			foreach (EmailMessage emailMessage in emailMessages)
				this.OnSelectEmailMessage(unitOfWorkContext, emailMessage);
							
			return emailMessages;
		}
		
		public bool SaveEmailMessage(EmailMessage emailMessage)
		{
			bool retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.SaveEmailMessage(uowc, e), emailMessage);
			
			return retval;
		}
		
		public bool SaveEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage)
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected, queryExpectedRecordsAffected;
			bool wasNew, retval;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)emailMessage == null)
				throw new ArgumentNullException("emailMessage");
			
			wasNew = emailMessage.IsNew;
			
			commandParameters = new List<IDataParameter>();
			
			if (wasNew)
			{	
				this.OnPreInsertEmailMessage(unitOfWorkContext, emailMessage);
				
				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, ConnectionSpecificGetParameterName("From"), emailMessage.From);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, ConnectionSpecificGetParameterName("Sender"), emailMessage.Sender);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, ConnectionSpecificGetParameterName("ReplyTo"), emailMessage.ReplyTo);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, ConnectionSpecificGetParameterName("To"), emailMessage.To);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, ConnectionSpecificGetParameterName("Cc"), emailMessage.Cc);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, ConnectionSpecificGetParameterName("Bcc"), emailMessage.Bcc);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, ConnectionSpecificGetParameterName("Subject"), emailMessage.Subject);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, ConnectionSpecificGetParameterName("IsBodyHtml"), emailMessage.IsBodyHtml);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "bit");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 0, 0, 0, false, ConnectionSpecificGetParameterName("Body"), emailMessage.Body);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "ntext");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, ConnectionSpecificGetParameterName("Processed"), emailMessage.Processed);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "bit");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, ConnectionSpecificGetParameterName("CreationTimestamp"), emailMessage.CreationTimestamp);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "datetime");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, ConnectionSpecificGetParameterName("ModificationTimestamp"), emailMessage.ModificationTimestamp);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "datetime");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, ConnectionSpecificGetParameterName("LogicalDelete"), emailMessage.LogicalDelete);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "bit");

				commandText = @"INSERT INTO " + ConnectionSpecificGetTableName(EmailMessage.SCHEMA_NAME_DBO, EmailMessage.TABLE_NAME_EMAIL_MESSAGE) + @" (" + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_FROM) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_SENDER) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_REPLY_TO) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_TO) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_CC) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_BCC) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_SUBJECT) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_IS_BODY_HTML) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_BODY) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_PROCESSED) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_LOGICAL_DELETE) + @") VALUES (" + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_FROM) + @", " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_SENDER) + @", " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_REPLY_TO) + @", " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_TO) + @", " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_CC) + @", " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_BCC) + @", " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_SUBJECT) + @", " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_IS_BODY_HTML) + @", " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_BODY) + @", " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_PROCESSED) + @", " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_LOGICAL_DELETE) + @")";
			
				ConnectionSpecificCommandMagic(unitOfWorkContext, true, out persistNotExpectedRecordsAffected);
			}
			else
			{
				this.OnPreUpdateEmailMessage(unitOfWorkContext, emailMessage);
				
				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_FROM), emailMessage.From);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_SENDER), emailMessage.Sender);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_REPLY_TO), emailMessage.ReplyTo);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_TO), emailMessage.To);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_CC), emailMessage.Cc);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, true, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_BCC), emailMessage.Bcc);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_SUBJECT), emailMessage.Subject);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_IS_BODY_HTML), emailMessage.IsBodyHtml);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "bit");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 0, 0, 0, false, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_BODY), emailMessage.Body);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "ntext");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_PROCESSED), emailMessage.Processed);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "bit");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_CREATION_TIMESTAMP), emailMessage.CreationTimestamp);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "datetime");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_MODIFICATION_TIMESTAMP), emailMessage.ModificationTimestamp);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "datetime");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_LOGICAL_DELETE), emailMessage.LogicalDelete);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "bit");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_EMAIL_MESSAGE_ID), emailMessage.EmailMessageId);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "int");

				commandText = @"UPDATE " + ConnectionSpecificGetTableName(EmailMessage.SCHEMA_NAME_DBO, EmailMessage.TABLE_NAME_EMAIL_MESSAGE) + @" SET " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_FROM) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_FROM) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_SENDER) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_SENDER) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_REPLY_TO) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_REPLY_TO) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_TO) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_TO) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_CC) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_CC) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_BCC) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_BCC) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_SUBJECT) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_SUBJECT) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_IS_BODY_HTML) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_IS_BODY_HTML) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_BODY) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_BODY) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_PROCESSED) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_PROCESSED) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_CREATION_TIMESTAMP) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_LOGICAL_DELETE) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_LOGICAL_DELETE) + @" WHERE " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_EMAIL_MESSAGE_ID) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_EMAIL_MESSAGE_ID);
				
				ConnectionSpecificCommandMagic(unitOfWorkContext, true, out persistNotExpectedRecordsAffected);
			}			
			
			retval = this.PersistModel<EmailMessage>(unitOfWorkContext, emailMessage, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapToEmailMessage);
		
			if (!retval)
				return retval;
			
			commandParameters.Clear();
			commandText = @"SELECT " + ConnectionSpecificGetIdentityCommand() + @" AS " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_EMAIL_MESSAGE_ID);
				
			ConnectionSpecificCommandMagic(unitOfWorkContext, false, out queryExpectedRecordsAffected);
				
			if (wasNew && !DataType.IsNullOrWhiteSpace(commandText))
			{
				// select the identity on the same connection
				this.FillModel<EmailMessage>(unitOfWorkContext, emailMessage, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEmailMessage);
			}
			
			if (wasNew)
			{
				this.OnPostInsertEmailMessage(unitOfWorkContext, emailMessage);
			}
			else
			{
				this.OnPostUpdateEmailMessage(unitOfWorkContext, emailMessage);
			}			

			return retval;
		}
		
		public bool DiscardEmailMessage(EmailMessage emailMessage)
		{
			bool retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.DiscardEmailMessage(uowc, e), emailMessage);
			
			return retval;
		}
		
		public bool DiscardEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage)
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected;
			bool retval;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)emailMessage == null)
				throw new ArgumentNullException("emailMessage");
			
			if (emailMessage.IsNew)
				return true;
				
			commandParameters = new List<IDataParameter>();			
						
			commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_EMAIL_MESSAGE_ID), emailMessage.EmailMessageId);
			commandParameters.Add(commandParameter);
			ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "int");

			this.OnPreDeleteEmailMessage(unitOfWorkContext, emailMessage);

			commandText = @"DELETE FROM " + ConnectionSpecificGetTableName(EmailMessage.SCHEMA_NAME_DBO, EmailMessage.TABLE_NAME_EMAIL_MESSAGE) + @" WHERE " + ConnectionSpecificGetColumnName(EmailMessage.COLUMN_NAME_EMAIL_MESSAGE_ID) + @" = " + ConnectionSpecificGetParameterName(EmailMessage.COLUMN_NAME_EMAIL_MESSAGE_ID);
			
			ConnectionSpecificCommandMagic(unitOfWorkContext, true, out persistNotExpectedRecordsAffected);
			
			retval = this.PersistModel<EmailMessage>(unitOfWorkContext, emailMessage, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapToEmailMessage);

			this.OnPostDeleteEmailMessage(unitOfWorkContext, emailMessage);
						
			emailMessage.IsNew = false;

			return retval;
		}
		
		private static void MapToEmailMessage(IDictionary<string, object> result, EmailMessage emailMessage)
		{
			object value;
			
			if ((object)result == null)
				throw new ArgumentNullException("result");
				
			if ((object)emailMessage == null)
				throw new ArgumentNullException("emailMessage");
			
			if (result.TryGetValue("EmailMessageId", out value))
				emailMessage.EmailMessageId = value.ChangeType<Nullable<Int32>>();

			if (result.TryGetValue("From", out value))
				emailMessage.From = value.ChangeType<String>();

			if (result.TryGetValue("Sender", out value))
				emailMessage.Sender = value.ChangeType<String>();

			if (result.TryGetValue("ReplyTo", out value))
				emailMessage.ReplyTo = value.ChangeType<String>();

			if (result.TryGetValue("To", out value))
				emailMessage.To = value.ChangeType<String>();

			if (result.TryGetValue("Cc", out value))
				emailMessage.Cc = value.ChangeType<String>();

			if (result.TryGetValue("Bcc", out value))
				emailMessage.Bcc = value.ChangeType<String>();

			if (result.TryGetValue("Subject", out value))
				emailMessage.Subject = value.ChangeType<String>();

			if (result.TryGetValue("IsBodyHtml", out value))
				emailMessage.IsBodyHtml = value.ChangeType<Nullable<Boolean>>();

			if (result.TryGetValue("Body", out value))
				emailMessage.Body = value.ChangeType<String>();

			if (result.TryGetValue("Processed", out value))
				emailMessage.Processed = value.ChangeType<Nullable<Boolean>>();

			if (result.TryGetValue("CreationTimestamp", out value))
				emailMessage.CreationTimestamp = value.ChangeType<Nullable<DateTime>>();

			if (result.TryGetValue("ModificationTimestamp", out value))
				emailMessage.ModificationTimestamp = value.ChangeType<Nullable<DateTime>>();

			if (result.TryGetValue("LogicalDelete", out value))
				emailMessage.LogicalDelete = value.ChangeType<Nullable<Boolean>>();
		}
		
		partial void OnPreInsertEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage);
		
		partial void OnPostInsertEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage);
		
		partial void OnPreUpdateEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage);
		
		partial void OnPostUpdateEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage);
		
		partial void OnPreDeleteEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage);
		
		partial void OnPostDeleteEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage);
		
		partial void OnSelectEmailMessage(UnitOfWorkContext unitOfWorkContext, EmailMessage emailMessage);		

		public EmailAttachment LoadEmailAttachment(Int32 emailAttachmentId)
		{
			EmailAttachment retval;
						
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, p1) => this.LoadEmailAttachment(uowc, p1), emailAttachmentId);
			
			return retval;
		}
		
		public EmailAttachment LoadEmailAttachment(UnitOfWorkContext unitOfWorkContext, Int32 emailAttachmentId)
		{			
			EmailAttachment emailAttachment;			
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int queryExpectedRecordsAffected;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			commandParameters = new List<IDataParameter>();
			
			commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_EMAIL_ATTACHMENT_ID), emailAttachmentId);
			commandParameters.Add(commandParameter);
			ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "int");

			commandText = @"SELECT " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_EMAIL_ATTACHMENT_ID) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_EMAIL_MESSAGE_ID) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_MIME_TYPE) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_ATTACHMENT_BITS) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_LOGICAL_DELETE) + @" FROM  " + ConnectionSpecificGetTableName(EmailAttachment.SCHEMA_NAME_DBO, EmailAttachment.TABLE_NAME_EMAIL_ATTACHMENT) + @" " + ConnectionSpecificGetTableAlias("t0") + @" WHERE " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_EMAIL_ATTACHMENT_ID) + @" = " + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_EMAIL_ATTACHMENT_ID) + @" ORDER BY " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_EMAIL_ATTACHMENT_ID) + @" ASC";			
			
			ConnectionSpecificCommandMagic(unitOfWorkContext, false, out queryExpectedRecordsAffected);
			
			emailAttachment = this.FetchModel<EmailAttachment>(unitOfWorkContext, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEmailAttachment);
							
			this.OnSelectEmailAttachment(unitOfWorkContext, emailAttachment);

			return emailAttachment;
		}
		
		public IList<EmailAttachment> FindEmailAttachments(Query emailAttachmentQuery)
		{
			IList<EmailAttachment> retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, q) => this.FindEmailAttachments(uowc, q), emailAttachmentQuery);
			
			return retval;
		}
		
		public IList<EmailAttachment> FindEmailAttachments(UnitOfWorkContext unitOfWorkContext, Query emailAttachmentQuery)
		{
			IList<EmailAttachment> emailAttachments;			
			List<IDataParameter> commandParameters;
			string commandText, filterFragment, sortFragment;
			int queryExpectedRecordsAffected;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)emailAttachmentQuery == null)
				throw new ArgumentNullException("emailAttachmentQuery");	
			
			if ((object)emailAttachmentQuery.Orders == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			commandParameters = new List<IDataParameter>();
			
			filterFragment = SqlExpressionVisitor.GetFilterText(unitOfWorkContext, commandParameters, emailAttachmentQuery.Expression);
			sortFragment = SqlExpressionVisitor.GetSortText(unitOfWorkContext, commandParameters, emailAttachmentQuery.Orders);

			commandText = @"SELECT " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_EMAIL_ATTACHMENT_ID) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_EMAIL_MESSAGE_ID) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_MIME_TYPE) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_ATTACHMENT_BITS) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetAliasedColumnName("t0", EmailAttachment.COLUMN_NAME_LOGICAL_DELETE) + @" FROM  " + ConnectionSpecificGetTableName(EmailAttachment.SCHEMA_NAME_DBO, EmailAttachment.TABLE_NAME_EMAIL_ATTACHMENT) + @" " + ConnectionSpecificGetTableAlias("t0") + @" WHERE {0} ORDER BY {1}";
			commandText = string.Format(commandText, filterFragment, sortFragment);
			
			ConnectionSpecificCommandMagic(unitOfWorkContext, false, out queryExpectedRecordsAffected);
			
			emailAttachments = this.QueryModel<EmailAttachment>(unitOfWorkContext, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEmailAttachment);			
			
			foreach (EmailAttachment emailAttachment in emailAttachments)
				this.OnSelectEmailAttachment(unitOfWorkContext, emailAttachment);
							
			return emailAttachments;
		}
		
		public bool SaveEmailAttachment(EmailAttachment emailAttachment)
		{
			bool retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.SaveEmailAttachment(uowc, e), emailAttachment);
			
			return retval;
		}
		
		public bool SaveEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment)
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected, queryExpectedRecordsAffected;
			bool wasNew, retval;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)emailAttachment == null)
				throw new ArgumentNullException("emailAttachment");
			
			wasNew = emailAttachment.IsNew;
			
			commandParameters = new List<IDataParameter>();
			
			if (wasNew)
			{	
				this.OnPreInsertEmailAttachment(unitOfWorkContext, emailAttachment);
				
				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, ConnectionSpecificGetParameterName("EmailMessageId"), emailAttachment.EmailMessageId);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "int");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, ConnectionSpecificGetParameterName("MimeType"), emailAttachment.MimeType);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Binary, 0, 0, 0, false, ConnectionSpecificGetParameterName("AttachmentBits"), emailAttachment.AttachmentBits);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "image");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, ConnectionSpecificGetParameterName("CreationTimestamp"), emailAttachment.CreationTimestamp);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "datetime");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, ConnectionSpecificGetParameterName("ModificationTimestamp"), emailAttachment.ModificationTimestamp);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "datetime");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, ConnectionSpecificGetParameterName("LogicalDelete"), emailAttachment.LogicalDelete);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "bit");

				commandText = @"INSERT INTO " + ConnectionSpecificGetTableName(EmailAttachment.SCHEMA_NAME_DBO, EmailAttachment.TABLE_NAME_EMAIL_ATTACHMENT) + @" (" + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_EMAIL_MESSAGE_ID) + @", " + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_MIME_TYPE) + @", " + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_ATTACHMENT_BITS) + @", " + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_LOGICAL_DELETE) + @") VALUES (" + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_EMAIL_MESSAGE_ID) + @", " + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_MIME_TYPE) + @", " + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_ATTACHMENT_BITS) + @", " + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_LOGICAL_DELETE) + @")";
			
				ConnectionSpecificCommandMagic(unitOfWorkContext, true, out persistNotExpectedRecordsAffected);
			}
			else
			{
				this.OnPreUpdateEmailAttachment(unitOfWorkContext, emailAttachment);
				
				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_EMAIL_MESSAGE_ID), emailAttachment.EmailMessageId);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "int");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.String, 2047, 0, 0, false, ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_MIME_TYPE), emailAttachment.MimeType);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "nvarchar");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Binary, 0, 0, 0, false, ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_ATTACHMENT_BITS), emailAttachment.AttachmentBits);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "image");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_CREATION_TIMESTAMP), emailAttachment.CreationTimestamp);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "datetime");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.DateTime, 8, 23, 3, false, ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_MODIFICATION_TIMESTAMP), emailAttachment.ModificationTimestamp);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "datetime");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Boolean, 1, 1, 0, false, ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_LOGICAL_DELETE), emailAttachment.LogicalDelete);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "bit");

				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_EMAIL_ATTACHMENT_ID), emailAttachment.EmailAttachmentId);
				commandParameters.Add(commandParameter);
				ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "int");

				commandText = @"UPDATE " + ConnectionSpecificGetTableName(EmailAttachment.SCHEMA_NAME_DBO, EmailAttachment.TABLE_NAME_EMAIL_ATTACHMENT) + @" SET " + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_EMAIL_MESSAGE_ID) + @" = " + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_EMAIL_MESSAGE_ID) + @", " + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_MIME_TYPE) + @" = " + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_MIME_TYPE) + @", " + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_ATTACHMENT_BITS) + @" = " + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_ATTACHMENT_BITS) + @", " + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_CREATION_TIMESTAMP) + @" = " + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_CREATION_TIMESTAMP) + @", " + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @" = " + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_MODIFICATION_TIMESTAMP) + @", " + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_LOGICAL_DELETE) + @" = " + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_LOGICAL_DELETE) + @" WHERE " + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_EMAIL_ATTACHMENT_ID) + @" = " + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_EMAIL_ATTACHMENT_ID);
				
				ConnectionSpecificCommandMagic(unitOfWorkContext, true, out persistNotExpectedRecordsAffected);
			}			
			
			retval = this.PersistModel<EmailAttachment>(unitOfWorkContext, emailAttachment, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapToEmailAttachment);
		
			if (!retval)
				return retval;
			
			commandParameters.Clear();
			commandText = @"SELECT " + ConnectionSpecificGetIdentityCommand() + @" AS " + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_EMAIL_ATTACHMENT_ID);
				
			ConnectionSpecificCommandMagic(unitOfWorkContext, false, out queryExpectedRecordsAffected);
				
			if (wasNew && !DataType.IsNullOrWhiteSpace(commandText))
			{
				// select the identity on the same connection
				this.FillModel<EmailAttachment>(unitOfWorkContext, emailAttachment, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapToEmailAttachment);
			}
			
			if (wasNew)
			{
				this.OnPostInsertEmailAttachment(unitOfWorkContext, emailAttachment);
			}
			else
			{
				this.OnPostUpdateEmailAttachment(unitOfWorkContext, emailAttachment);
			}			

			return retval;
		}
		
		public bool DiscardEmailAttachment(EmailAttachment emailAttachment)
		{
			bool retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.DiscardEmailAttachment(uowc, e), emailAttachment);
			
			return retval;
		}
		
		public bool DiscardEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment)
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected;
			bool retval;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)emailAttachment == null)
				throw new ArgumentNullException("emailAttachment");
			
			if (emailAttachment.IsNew)
				return true;
				
			commandParameters = new List<IDataParameter>();			
						
			commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.Int32, 4, 10, 0, false, ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_EMAIL_ATTACHMENT_ID), emailAttachment.EmailAttachmentId);
			commandParameters.Add(commandParameter);
			ConnectionSpecificParameterMagic(unitOfWorkContext, commandParameter, "int");

			this.OnPreDeleteEmailAttachment(unitOfWorkContext, emailAttachment);

			commandText = @"DELETE FROM " + ConnectionSpecificGetTableName(EmailAttachment.SCHEMA_NAME_DBO, EmailAttachment.TABLE_NAME_EMAIL_ATTACHMENT) + @" WHERE " + ConnectionSpecificGetColumnName(EmailAttachment.COLUMN_NAME_EMAIL_ATTACHMENT_ID) + @" = " + ConnectionSpecificGetParameterName(EmailAttachment.COLUMN_NAME_EMAIL_ATTACHMENT_ID);
			
			ConnectionSpecificCommandMagic(unitOfWorkContext, true, out persistNotExpectedRecordsAffected);
			
			retval = this.PersistModel<EmailAttachment>(unitOfWorkContext, emailAttachment, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapToEmailAttachment);

			this.OnPostDeleteEmailAttachment(unitOfWorkContext, emailAttachment);
						
			emailAttachment.IsNew = false;

			return retval;
		}
		
		private static void MapToEmailAttachment(IDictionary<string, object> result, EmailAttachment emailAttachment)
		{
			object value;
			
			if ((object)result == null)
				throw new ArgumentNullException("result");
				
			if ((object)emailAttachment == null)
				throw new ArgumentNullException("emailAttachment");
			
			if (result.TryGetValue("EmailAttachmentId", out value))
				emailAttachment.EmailAttachmentId = value.ChangeType<Nullable<Int32>>();

			if (result.TryGetValue("EmailMessageId", out value))
				emailAttachment.EmailMessageId = value.ChangeType<Nullable<Int32>>();

			if (result.TryGetValue("MimeType", out value))
				emailAttachment.MimeType = value.ChangeType<String>();

			if (result.TryGetValue("AttachmentBits", out value))
				emailAttachment.AttachmentBits = value.ChangeType<Byte[]>();

			if (result.TryGetValue("CreationTimestamp", out value))
				emailAttachment.CreationTimestamp = value.ChangeType<Nullable<DateTime>>();

			if (result.TryGetValue("ModificationTimestamp", out value))
				emailAttachment.ModificationTimestamp = value.ChangeType<Nullable<DateTime>>();

			if (result.TryGetValue("LogicalDelete", out value))
				emailAttachment.LogicalDelete = value.ChangeType<Nullable<Boolean>>();
		}
		
		partial void OnPreInsertEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment);
		
		partial void OnPostInsertEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment);
		
		partial void OnPreUpdateEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment);
		
		partial void OnPostUpdateEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment);
		
		partial void OnPreDeleteEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment);
		
		partial void OnPostDeleteEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment);
		
		partial void OnSelectEmailAttachment(UnitOfWorkContext unitOfWorkContext, EmailAttachment emailAttachment);		

		#endregion
	}
}
