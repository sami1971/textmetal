<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TextMetal</name>
    </assembly>
    <members>
        <member name="T:TextMetal.Console.ToolHost">
            <summary>
            	This class contains code to bootstrap TextMetal proper. This code is a specific implementation for TextMetal 'tool' hosting, concerned with leveraging file paths. Other host implementations will vary (see web host sample for instance). This code can be used by any interactive or batch application (console, windows, WPF, service, etc.).
            </summary>
        </member>
        <member name="M:TextMetal.Console.ToolHost.Host(System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
            	Provides a hosting shim between a 'tool' host and the underlying TextMetal run-time.
            </summary>
            <param name="templateFilePath"> The file path of the input TextMetal template file to execute. </param>
            <param name="sourceFilePath"> The file path (or source specific URI) of the input data source to leverage. </param>
            <param name="baseDirectoryPath"> The root output directory path to place output arifacts (since this implementation uses file output mechanics). </param>
            <param name="sourceStrategyAssemblyQualifiedTypeName"> The assembly qualified type name for the ISourceStrategy to instantiate and execute. </param>
            <param name="strictMatching"> A value indicating whether to use strict matching semantics for tokens. </param>
            <param name="properties"> Arbitrary dictionary of string lists used to further customize the text templating process. The individual components or template files can use the properties as they see fit. </param>
        </member>
        <member name="T:TextMetal.Console.Program">
            <summary>
            	Entry point class for the application.
            </summary>
        </member>
        <member name="M:TextMetal.Console.Program.GetDirectoryPathInteractive(System.String@)">
            <summary>
            	When called, displays an interactive folder browser dialog to prompt for a directory path.
            </summary>
            <param name="directoryPath"> The resulting directory path or null if the user canceled. </param>
            <returns> A value indicating whether the user canceled the dialog. </returns>
        </member>
        <member name="M:TextMetal.Console.Program.GetFilePathInteractive(System.String@)">
            <summary>
            	When called, displays an interactive open file dialog to prompt for a file path.
            </summary>
            <param name="filePath"> The resulting file path or null if the user canceled. </param>
            <returns> A value indicating whether the user canceled the dialog. </returns>
        </member>
        <member name="M:TextMetal.Console.Program.Main(System.String[])">
            <summary>
            	The entry point method for this application.
            </summary>
            <param name="args"> The command line arguments passed from the executing environment. </param>
            <returns> The resulting exit code. </returns>
        </member>
        <member name="M:TextMetal.Console.Program.Startup(System.String[])">
            <summary>
            	The indirect entry point method for this application. Code is wrapped in this method to leverage the 'TryStartup'/'Startup' pattern. This method contains the TextMetal console application host environment setup code (logic that is specific to a console application to transition to the more generic 'tool' host code).
            </summary>
            <param name="args"> The command line arguments passed from the executing environment. </param>
            <returns> The resulting exit code. </returns>
        </member>
        <member name="M:TextMetal.Console.Program.TryStartup(System.String[])">
            <summary>
            	The indirect entry point method for this application. Code is wrapped in this method to leverage the 'TryStartup'/'Startup' pattern. This method, if used, wraps the Startup() method in an exception handler. The handler will catch all exceptions and report a full detailed stack trace to the Console.Error stream; -1 is then returned as the exit code. Otherwise, if no exception is thrown, the exit code returned is that which is returned by Startup().
            </summary>
            <param name="args"> The command line arguments passed from the executing environment. </param>
            <returns> The resulting exit code. </returns>
        </member>
    </members>
</doc>
