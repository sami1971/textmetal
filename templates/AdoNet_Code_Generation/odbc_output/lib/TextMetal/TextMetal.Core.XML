<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TextMetal.Core</name>
    </assembly>
    <members>
        <member name="T:TextMetal.Core.AssemblyInformation">
            <summary>
            	Provides easy access assembly related attribute data.
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssemblyInformation.#ctor(System.Reflection.Assembly)">
            <summary>
            	Initializes a new instance of the AssemblyInformation class.
            </summary>
            <param name="assembly"> The target assembly to examine for information. </param>
        </member>
        <member name="P:TextMetal.Core.AssemblyInformation.AssemblyVersion">
            <summary>
            	Gets the assembly version.
            </summary>
        </member>
        <member name="P:TextMetal.Core.AssemblyInformation.Company">
            <summary>
            	Gets the assembly company.
            </summary>
        </member>
        <member name="P:TextMetal.Core.AssemblyInformation.Configuration">
            <summary>
            	Gets the assembly configuration.
            </summary>
        </member>
        <member name="P:TextMetal.Core.AssemblyInformation.Copyright">
            <summary>
            	Gets the assembly copyright.
            </summary>
        </member>
        <member name="P:TextMetal.Core.AssemblyInformation.Description">
            <summary>
            	Gets the assembly description.
            </summary>
        </member>
        <member name="P:TextMetal.Core.AssemblyInformation.InformationalVersion">
            <summary>
            	Gets the assembly informational version.
            </summary>
        </member>
        <member name="P:TextMetal.Core.AssemblyInformation.Product">
            <summary>
            	Gets the assembly product.
            </summary>
        </member>
        <member name="P:TextMetal.Core.AssemblyInformation.Title">
            <summary>
            	Gets the assembly title.
            </summary>
        </member>
        <member name="P:TextMetal.Core.AssemblyInformation.Trademark">
            <summary>
            	Gets the assembly trademark.
            </summary>
        </member>
        <member name="P:TextMetal.Core.AssemblyInformation.Win32FileVersion">
            <summary>
            	Gets the assembly Win32 file version.
            </summary>
        </member>
        <member name="T:TextMetal.Core.AssociativeModel.ArrayConstruct">
            <summary>
            	Provides an XML construct for associative arrays.
            </summary>
        </member>
        <member name="T:TextMetal.Core.AssociativeModel.AssociativeXmlObject">
            <summary>
            	Serves as the base of all associative XML objects.
            </summary>
        </member>
        <member name="T:TextMetal.Core.XmlModel.XmlObject">
            <summary>
            	Provides a base for all XML objects.
            </summary>
        </member>
        <member name="T:TextMetal.Core.XmlModel.IXmlObject">
            <summary>
            	Represents an XML object and it's "schema".
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.IXmlObject.AllowedChildTypes">
            <summary>
            	Gets an array of allowed child XML object types.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.IXmlObject.AllowedParentTypes">
            <summary>
            	Gets an array of allowed parent XML object types.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.IXmlObject.Content">
            <summary>
            	Gets or sets the optional single XML object content.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.IXmlObject.Items">
            <summary>
            	Gets a list of XML object items.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.IXmlObject.Parent">
            <summary>
            	Gets or sets the parent XML object or null if this is the document root.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlObject.#ctor">
            <summary>
            	Initializes a new instance of the XmlObject class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlObject.EnsureParentOnPropertySet(TextMetal.Core.XmlModel.IXmlObject,TextMetal.Core.XmlModel.IXmlObject)">
            <summary>
            	Ensures that for any XML object property, the correct parent instance is set/unset.
            	Should be called in the setter for all XML object properties, before assigning the value.
            	Example:
            	set { this.EnsureParentOnPropertySet(this.content, value); this.content = value; }
            </summary>
            <param name="oldValueObj"> The old XML object value (the backing field). </param>
            <param name="newValueObj"> The new XML object value (value). </param>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlObject.AllowedChildTypes">
            <summary>
            	Gets an array of allowed child XML object types.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlObject.AllowedParentTypes">
            <summary>
            	Gets an array of allowed parent XML object types.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlObject.Content">
            <summary>
            	Gets or sets the optional single XML object content.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlObject.Items">
            <summary>
            	Gets a list of XML object items.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlObject.Parent">
            <summary>
            	Gets or sets the parent XML object or null if this is the document root.
            </summary>
        </member>
        <member name="T:TextMetal.Core.AssociativeModel.IAssociativeXmlObject">
            <summary>
            	Represents an associative XML object.
            </summary>
        </member>
        <member name="T:TextMetal.Core.AssociativeModel.IAssociativeMechanism">
            <summary>
            	Provides for associative object (dynamic) mechanics.
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.IAssociativeMechanism.GetAssociativeObjectEnumerator">
            <summary>
            	Gets the enumerator for the current associative object instance.
            </summary>
            <returns> An instance of IEnumerator or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.IAssociativeMechanism.GetAssociativeObjectEnumeratorDict">
            <summary>
            	Gets the dictionary enumerator for the current associative object instance.
            </summary>
            <returns> An instance of IDictionaryEnumerator or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.IAssociativeMechanism.GetAssociativeObjectEnumeratorTickOne">
            <summary>
            	Gets the enumerator (tick one) for the current associative object instance.
            </summary>
            <returns> An instance of IEnumerator`1 or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.IAssociativeMechanism.GetAssociativeObjectValue">
            <summary>
            	Gets the value of the current associative object instance.
            </summary>
            <returns> A value or null. </returns>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.IAssociativeXmlObject.Name">
            <summary>
            	Gets the associative name of the current associative XML object.
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.#ctor">
            <summary>
            	Initializes a new instance of the AssociativeXmlObject class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            	Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <param name="key"> The <see cref="T:System.Object" /> to use as the key of the element to add. </param>
            <param name="value"> The <see cref="T:System.Object" /> to use as the value of the element to add. </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key" />
            	is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the
            	<see cref="T:System.Collections.IDictionary" />
            	object.</exception>
            <exception cref="T:System.NotSupportedException">The
            	<see cref="T:System.Collections.IDictionary" />
            	is read-only.-or- The
            	<see cref="T:System.Collections.IDictionary" />
            	has a fixed size.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Add(System.String,System.Object)">
            <summary>
            	Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" /> .
            </summary>
            <param name="key"> The object to use as the key of the element to add. </param>
            <param name="value"> The object to use as the value of the element to add. </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key" />
            	is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the
            	<see cref="T:System.Collections.Generic.IDictionary`2" />
            	.</exception>
            <exception cref="T:System.NotSupportedException">The
            	<see cref="T:System.Collections.Generic.IDictionary`2" />
            	is read-only.</exception>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            	Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <param name="item"> The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
            <exception cref="T:System.NotSupportedException">The
            	<see cref="T:System.Collections.Generic.ICollection`1" />
            	is read-only.</exception>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#IDictionary#Clear">
            <summary>
            	Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Clear">
            <summary>
            	Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            	Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.
            </summary>
            <returns> true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false. </returns>
            <param name="key"> The key to locate in the <see cref="T:System.Collections.IDictionary" /> object. </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key" />
            	is null.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            	Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns> true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" /> ; otherwise, false. </returns>
            <param name="item"> The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#IDictionary{System#String@System#Object}#ContainsKey(System.String)">
            <summary>
            	Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            <returns> true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false. </returns>
            <param name="key"> The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" /> . </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key" />
            	is null.</exception>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            	Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" /> , starting at a particular <see
             	cref="T:System.Array" /> index.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see
             	cref="T:System.Collections.ICollection" /> . The <see cref="T:System.Array" /> must have zero-based indexing. </param>
            <param name="index"> The zero-based index in <paramref name="array" /> at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array" />
            	is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index" />
            	is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array" />
            	is multidimensional.-or- The number of elements in the source
            	<see cref="T:System.Collections.ICollection" />
            	is greater than the available space from
            	<paramref name="index" />
            	to the end of the destination
            	<paramref name="array" />
            	.</exception>
            <exception cref="T:System.ArgumentException">The type of the source
            	<see cref="T:System.Collections.ICollection" />
            	cannot be cast automatically to the type of the destination
            	<paramref name="array" />
            	.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            	Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" /> , starting at a particular <see
             	cref="T:System.Array" /> index.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see
             	cref="T:System.Collections.Generic.ICollection`1" /> . The <see cref="T:System.Array" /> must have zero-based indexing. </param>
            <param name="arrayIndex"> The zero-based index in <paramref name="array" /> at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array" />
            	is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex" />
            	is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array" />
            	is multidimensional.-or-The number of elements in the source
            	<see cref="T:System.Collections.Generic.ICollection`1" />
            	is greater than the available space from
            	<paramref name="arrayIndex" />
            	to the end of the destination
            	<paramref name="array" />
            	.-or-Type
            	<paramref name="T" />
            	cannot be cast automatically to the type of the destination
            	<paramref name="array" />
            	.</exception>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.CoreGetAssociativeObjectEnumerator">
            <summary>
            	Gets the enumerator for the current associative object instance. Derived types can override the default behavior of returning the enumerator from the result of InnerAsDictionary (arrays should overrride this behavior for example).
            </summary>
            <returns> An instance of IEnumerator or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.CoreGetAssociativeObjectEnumeratorDict">
            <summary>
            	Gets the dictionary enumerator for the current associative object instance. Derived types can override the default behavior of returning the enumerator from the result of InnerAsDictionary.
            </summary>
            <returns> An instance of IDictionaryEnumerator or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.CoreGetAssociativeObjectEnumeratorTickOne">
            <summary>
            	Gets the enumerator (tick one) for the current associative object instance. Derived types can override the default behavior of returning the enumerator from the result of InnerAsDictionary.
            </summary>
            <returns> An instance of IEnumerator`1 or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.CoreGetAssociativeObjectValue">
            <summary>
            	Gets the value of the current associative object instance. Derived types can override the default behavior of returning 'this' (properties should overrride this behavior for example).
            </summary>
            <returns> A value or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.GetAssociativeObjectEnumerator">
            <summary>
            	Gets the enumerator for the current associative object instance.
            </summary>
            <returns> An instance of IEnumerator or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.GetAssociativeObjectEnumeratorDict">
            <summary>
            	Gets the dictionary enumerator for the current associative object instance.
            </summary>
            <returns> An instance of IDictionaryEnumerator or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.GetAssociativeObjectEnumeratorTickOne">
            <summary>
            	Gets the enumerator (tick one) for the current associative object instance.
            </summary>
            <returns> An instance of IEnumerator`1 or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.GetAssociativeObjectValue">
            <summary>
            	Gets the value of the current associative object instance.
            </summary>
            <returns> A value or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#IDictionary#GetEnumerator">
            <summary>
            	Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see
             	cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <returns> An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see
             	cref="T:System.Collections.IDictionary" /> object. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            	Returns an enumerator that iterates through a collection.
            </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
            <summary>
            	Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            	Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <param name="key"> The key of the element to remove. </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key" />
            	is null.</exception>
            <exception cref="T:System.NotSupportedException">The
            	<see cref="T:System.Collections.IDictionary" />
            	object is read-only.-or- The
            	<see cref="T:System.Collections.IDictionary" />
            	has a fixed size.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Remove(System.String)">
            <summary>
            	Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" /> .
            </summary>
            <returns> true if the element is successfully removed; otherwise, false. This method also returns false if <paramref
             	name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" /> . </returns>
            <param name="key"> The key of the element to remove. </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key" />
            	is null.</exception>
            <exception cref="T:System.NotSupportedException">The
            	<see cref="T:System.Collections.Generic.IDictionary`2" />
            	is read-only.</exception>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            	Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <returns> true if <paramref name="item" /> was successfully removed from the <see
             	cref="T:System.Collections.Generic.ICollection`1" /> ; otherwise, false. This method also returns false if <paramref
             	name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" /> . </returns>
            <param name="item"> The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
            <exception cref="T:System.NotSupportedException">The
            	<see cref="T:System.Collections.Generic.ICollection`1" />
            	is read-only.</exception>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#IDictionary{System#String@System#Object}#TryGetValue(System.String,System.Object@)">
            <summary>
            	Gets the value associated with the specified key.
            </summary>
            <returns> true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false. </returns>
            <param name="key"> The key whose value to get. </param>
            <param name="value"> When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref
             	name="value" /> parameter. This parameter is passed uninitialized. </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key" />
            	is null.</exception>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            	Gets or sets the element with the specified key.
            </summary>
            <returns> The element with the specified key. </returns>
            <param name="key"> The key of the element to get or set. </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key" />
            	is null.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the
            	<see cref="T:System.Collections.IDictionary" />
            	object is read-only.-or- The property is set,
            	<paramref name="key" />
            	does not exist in the collection, and the
            	<see cref="T:System.Collections.IDictionary" />
            	has a fixed size.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Item(System.String)">
            <summary>
            	Gets or sets the element with the specified key.
            </summary>
            <returns> The element with the specified key. </returns>
            <param name="key"> The key of the element to get or set. </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key" />
            	is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and
            	<paramref name="key" />
            	is not found.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the
            	<see cref="T:System.Collections.Generic.IDictionary`2" />
            	is read-only.</exception>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#ICollection#Count">
            <summary>
            	Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" /> .
            </summary>
            <returns> The number of elements contained in the <see cref="T:System.Collections.ICollection" /> . </returns>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Count">
            <summary>
            	Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <returns> The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" /> . </returns>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.InnerAsDictionary">
            <summary>
            	Returns a new dictionary each time this getter is accessed that represents any child associative XML objects by name.
            </summary>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#IDictionary#IsFixedSize">
            <summary>
            	Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.
            </summary>
            <returns> true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false. </returns>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#IDictionary#IsReadOnly">
            <summary>
            	Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.
            </summary>
            <returns> true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false. </returns>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#IsReadOnly">
            <summary>
            	Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns> true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false. </returns>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#ICollection#IsSynchronized">
            <summary>
            	Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
            <returns> true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false. </returns>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#IDictionary#Keys">
            <summary>
            	Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see
             	cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <returns> An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see
             	cref="T:System.Collections.IDictionary" /> object. </returns>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Keys">
            <summary>
            	Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see
             	cref="T:System.Collections.Generic.IDictionary`2" /> .
            </summary>
            <returns> An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see
             	cref="T:System.Collections.Generic.IDictionary`2" /> . </returns>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.Name">
            <summary>
            	Gets the associative name of the current associative XML object.
            </summary>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#ICollection#SyncRoot">
            <summary>
            	Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" /> .
            </summary>
            <returns> An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" /> . </returns>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#IDictionary#Values">
            <summary>
            	Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see
             	cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <returns> An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see
             	cref="T:System.Collections.IDictionary" /> object. </returns>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssociativeXmlObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Values">
            <summary>
            	Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see
             	cref="T:System.Collections.Generic.IDictionary`2" /> .
            </summary>
            <returns> An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see
             	cref="T:System.Collections.Generic.IDictionary`2" /> . </returns>
        </member>
        <member name="T:TextMetal.Core.AssociativeModel.IActualThing">
            <summary>
            	Serves as a marker interface to distinguish between 'objects' and not...in the loose sense.
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.ArrayConstruct.#ctor">
            <summary>
            	Initializes a new instance of the ArrayConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.ArrayConstruct.CoreGetAssociativeObjectEnumerator">
            <summary>
            	Gets the enumerator for the current associative object instance. Overrides the default behavior by returning an enumerator from a list of only IActualThing implementing child objects.
            </summary>
            <returns> An instance of IEnumerator or null. </returns>
        </member>
        <member name="T:TextMetal.Core.AssociativeModel.ModelConstruct">
            <summary>
            	Provides an XML construct for associative models (root object of object graph).
            </summary>
        </member>
        <member name="T:TextMetal.Core.AssociativeModel.ObjectConstruct">
            <summary>
            	Provides an XML construct for associative objects (not a base class however).
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.ObjectConstruct.#ctor">
            <summary>
            	Initializes a new instance of the ObjectConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.ModelConstruct.#ctor">
            <summary>
            	Initializes a new instance of the ModelConstruct class.
            </summary>
        </member>
        <member name="T:TextMetal.Core.AssociativeModel.PropertyConstruct">
            <summary>
            	Provides an XML construct for associative properties.
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.PropertyConstruct.#ctor">
            <summary>
            	Initializes a new instance of the PropertyConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.PropertyConstruct.CommonEquals(TextMetal.Core.AssociativeModel.IAssociativeXmlObject,System.Object)">
            <summary>
            	Determines whether a left-hand-side associative XML object is equal to any right-hand-side object using value semantics (instead of reference semantics).
            </summary>
            <param name="leftAssociativeXmlObject"> The left-hand-side associative XML object to test. </param>
            <param name="rightObject"> The right-hand-side object to test. </param>
            <returns> A value indicating whether the two objects equate using value semantics. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.PropertyConstruct.CommonGetHashCode(TextMetal.Core.AssociativeModel.IAssociativeXmlObject)">
            <summary>
            	Determines the hash code for an associative XML object.
            </summary>
            <param name="associativeXmlObject"> The associative XML object used to get a hash code. </param>
            <returns> The hash code of the associative XML object's value. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.PropertyConstruct.CommonToString(TextMetal.Core.AssociativeModel.IAssociativeXmlObject)">
            <summary>
            	Gets a string represnetation for an associative XML object value.
            </summary>
            <param name="associativeXmlObject"> The associative XML object used to get a string representation. </param>
            <returns> The string representation of the associative XML object's value. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.PropertyConstruct.CoreGetAssociativeObjectEnumerator">
            <summary>
            	Gets the enumerator for the current associative object instance. Overrides the default behavior to always return null.
            </summary>
            <returns> An instance of IEnumerator or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.PropertyConstruct.CoreGetAssociativeObjectValue">
            <summary>
            	Gets the value of the current associative object instance. Overrides the default behavior to return a strongly-typed, parsed value from using the Type and Value properties.
            </summary>
            <returns> A value or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.PropertyConstruct.Equals(System.Object)">
            <summary>
            	Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" /> .
            </summary>
            <returns> true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" /> ; otherwise, false. </returns>
            <param name="obj"> The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" /> . </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.PropertyConstruct.GetHashCode">
            <summary>
            	Serves as a hash function for a particular type.
            </summary>
            <returns> A hash code for the current <see cref="T:System.Object" /> . </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.PropertyConstruct.ToString">
            <summary>
            	Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" /> .
            </summary>
            <returns> A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" /> . </returns>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.PropertyConstruct.Type">
            <summary>
            	Gts or sets the assembly qualified type of the value, used during strongly-typed parsing.
            </summary>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.PropertyConstruct.Value">
            <summary>
            	Gets a string representation of the value of this associative XML object value.
            </summary>
        </member>
        <member name="T:TextMetal.Core.AssociativeModel.ProxyConstruct">
            <summary>
            	Provides an XML construct for associative proxies. DO NOT SERIALIZE THIS CLASS TO AN XML STREAM.
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.ProxyConstruct.#ctor(System.Object)">
            <summary>
            	Initializes a new instance of the ProxyConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.ProxyConstruct.CoreGetAssociativeObjectEnumerator">
            <summary>
            	Gets the enumerator for the current associative object instance. Overrides the default behavior and always return null.
            </summary>
            <returns> An instance of IEnumerator or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.ProxyConstruct.CoreGetAssociativeObjectValue">
            <summary>
            	Gets the value of the current associative object instance. Overrides the default behavior to return the Value property.
            </summary>
            <returns> A value or null. </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.ProxyConstruct.Equals(System.Object)">
            <summary>
            	Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" /> .
            </summary>
            <returns> true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" /> ; otherwise, false. </returns>
            <param name="obj"> The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" /> . </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.ProxyConstruct.GetHashCode">
            <summary>
            	Serves as a hash function for a particular type.
            </summary>
            <returns> A hash code for the current <see cref="T:System.Object" /> . </returns>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.ProxyConstruct.ToString">
            <summary>
            	Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" /> .
            </summary>
            <returns> A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" /> . </returns>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.ProxyConstruct.Value">
            <summary>
            Gets or sets the proxied value.
            </summary>
        </member>
        <member name="T:TextMetal.Core.AssociativeModel.AssModContainerConstruct">
            <summary>
            	Provides an XML construct for associative model containers.
            </summary>
        </member>
        <member name="M:TextMetal.Core.AssociativeModel.AssModContainerConstruct.#ctor">
            <summary>
            	Initializes a new instance of the AssModContainerConstruct class.
            </summary>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssModContainerConstruct.Content">
            <summary>
            	Gets or sets the optional single XML object content as a strongly-typed associative XML object.
            </summary>
        </member>
        <member name="P:TextMetal.Core.AssociativeModel.AssModContainerConstruct.Id">
            <summary>
            	Gets the associative ID of the current associative model container XML object.
            </summary>
        </member>
        <member name="T:TextMetal.Core.ComparableComparer">
            <summary>
            	Internal IComparer`1 implementation using IComparable.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ComparableComparer.#ctor">
            <summary>
            	Initializes a new instance of the ComparableComparer class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ComparableComparer.Compare(System.IComparable,System.IComparable)">
            <summary>
            	Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns> A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" /> , as shown in the following table.Value Meaning Less than zero <paramref
             	name="x" /> is less than <paramref name="y" /> .Zero <paramref name="x" /> equals <paramref name="y" /> .Greater than zero <paramref
             	name="x" /> is greater than <paramref name="y" /> . </returns>
            <param name="x"> The first object to compare. </param>
            <param name="y"> The second object to compare. </param>
        </member>
        <member name="T:TextMetal.Core.ContravariantListAdapter`2">
            <summary>
            	Serves as a contravariant list adapter.
            </summary>
            <typeparam name="TToDerived"> The target list sub type. </typeparam>
            <typeparam name="TFromBase"> The source list super type. </typeparam>
        </member>
        <member name="T:TextMetal.Core.XmlModel.IXmlObjectCollection`1">
            <summary>
            	Represents an XML object collection.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.IXmlObjectCollection`1.Site">
            <summary>
            	Gets the site XML object or null if this is unattached.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ContravariantListAdapter`2.#ctor(TextMetal.Core.XmlModel.IXmlObjectCollection{`1})">
            <summary>
            	Initializes a new instance of the ContravariantListAdapter`2 class.
            </summary>
            <param name="inner"> The inner list instance. </param>
        </member>
        <member name="M:TextMetal.Core.ContravariantListAdapter`2.Add(`0)">
            <summary>
            	Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <param name="item"> The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
        </member>
        <member name="M:TextMetal.Core.ContravariantListAdapter`2.Clear">
            <summary>
            	Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
        </member>
        <member name="M:TextMetal.Core.ContravariantListAdapter`2.Contains(`0)">
            <summary>
            	Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns> true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" /> ; otherwise, false. </returns>
            <param name="item"> The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
        </member>
        <member name="M:TextMetal.Core.ContravariantListAdapter`2.CopyTo(`0[],System.Int32)">
            <summary>
            	Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" /> , starting at a particular <see
             	cref="T:System.Array" /> index.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see
             	cref="T:System.Collections.Generic.ICollection`1" /> . The <see cref="T:System.Array" /> must have zero-based indexing. </param>
            <param name="arrayIndex"> The zero-based index in <paramref name="array" /> at which copying begins. </param>
        </member>
        <member name="M:TextMetal.Core.ContravariantListAdapter`2.GetEnumerator">
            <summary>
            	Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:TextMetal.Core.ContravariantListAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            	Returns an enumerator that iterates through a collection.
            </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:TextMetal.Core.ContravariantListAdapter`2.IndexOf(`0)">
            <summary>
            	Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" /> .
            </summary>
            <returns> The index of <paramref name="item" /> if found in the list; otherwise, -1. </returns>
            <param name="item"> The object to locate in the <see cref="T:System.Collections.Generic.IList`1" /> . </param>
        </member>
        <member name="M:TextMetal.Core.ContravariantListAdapter`2.Insert(System.Int32,`0)">
            <summary>
            	Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index"> The zero-based index at which <paramref name="item" /> should be inserted. </param>
            <param name="item"> The object to insert into the <see cref="T:System.Collections.Generic.IList`1" /> . </param>
        </member>
        <member name="M:TextMetal.Core.ContravariantListAdapter`2.Remove(`0)">
            <summary>
            	Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <returns> true if <paramref name="item" /> was successfully removed from the <see
             	cref="T:System.Collections.Generic.ICollection`1" /> ; otherwise, false. This method also returns false if <paramref
             	name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" /> . </returns>
            <param name="item"> The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
        </member>
        <member name="M:TextMetal.Core.ContravariantListAdapter`2.RemoveAt(System.Int32)">
            <summary>
            	Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index"> The zero-based index of the item to remove. </param>
        </member>
        <member name="P:TextMetal.Core.ContravariantListAdapter`2.Item(System.Int32)">
            <summary>
            	Gets or sets the element at the specified index.
            </summary>
            <returns> The element at the specified index. </returns>
            <param name="index"> The zero-based index of the element to get or set. </param>
        </member>
        <member name="P:TextMetal.Core.ContravariantListAdapter`2.Count">
            <summary>
            	Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <returns> The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" /> . </returns>
        </member>
        <member name="P:TextMetal.Core.ContravariantListAdapter`2.Inner">
            <summary>
            	Gets the inner list from the base type.
            </summary>
        </member>
        <member name="P:TextMetal.Core.ContravariantListAdapter`2.IsReadOnly">
            <summary>
            	Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns> true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false. </returns>
        </member>
        <member name="P:TextMetal.Core.ContravariantListAdapter`2.Site">
            <summary>
            	Gets the site XML object or null if this is unattached.
            </summary>
        </member>
        <member name="T:TextMetal.Core.DebuggerBreakpointConstruct">
            <summary>
            	Allows an author of a TextMetal template file to declaratively set a CLR breakpoint anywhere in the object tree.
            </summary>
        </member>
        <member name="T:TextMetal.Core.TemplateModel.ITemplateXmlObject">
            <summary>
            	Represents a template XML object.
            </summary>
        </member>
        <member name="T:TextMetal.Core.TemplateModel.ITemplateMechanism">
            <summary>
            	Provides for template mechanics.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.ITemplateMechanism.ExpandTemplate(TextMetal.Core.TemplateModel.TemplatingContext)">
            <summary>
            	Expands the template tree into the templating context current output.
            </summary>
            <param name="templatingContext"> The templating context. </param>
        </member>
        <member name="T:TextMetal.Core.ExpressionModel.IExpressionXmlObject">
            <summary>
            	Represents an expression XML object.
            </summary>
        </member>
        <member name="T:TextMetal.Core.ExpressionModel.IExpressionMechanism">
            <summary>
            	Provides for expression mechanics.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.IExpressionMechanism.EvaluateExpression(TextMetal.Core.TemplateModel.TemplatingContext)">
            <summary>
            	Evaluates at run-time, an expression tree yielding an object value result.
            </summary>
            <param name="templatingContext"> The templating context. </param>
            <returns> An expression return value or null. </returns>
        </member>
        <member name="T:TextMetal.Core.SortModel.ISortXmlObject">
            <summary>
            	Represents a sort XML object.
            </summary>
        </member>
        <member name="T:TextMetal.Core.SortModel.ISortMechanism">
            <summary>
            	Provides for sort mechanics.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SortModel.ISortMechanism.EvaluateSort(TextMetal.Core.TemplateModel.TemplatingContext,System.Collections.IEnumerable)">
            <summary>
            	Re-orders an enumerable of values, yielding a re-ordered enumerable.
            </summary>
            <param name="templatingContext"> The templating context. </param>
            <param name="values"> </param>
            <returns> </returns>
        </member>
        <member name="M:TextMetal.Core.DebuggerBreakpointConstruct.#ctor">
            <summary>
            	Initializes a new instance of the DebuggerBreakpointConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.DebuggerBreakpointConstruct.EvaluateExpression(TextMetal.Core.TemplateModel.TemplatingContext)">
            <summary>
            	Evaluates at run-time, an expression tree yielding an object value result.
            </summary>
            <param name="templatingContext"> The templating context. </param>
            <returns> An expression return value or null. </returns>
        </member>
        <member name="M:TextMetal.Core.DebuggerBreakpointConstruct.EvaluateSort(TextMetal.Core.TemplateModel.TemplatingContext,System.Collections.IEnumerable)">
            <summary>
            	Re-orders an enumerable of values, yielding a re-ordered enumerable.
            </summary>
            <param name="templatingContext"> The templating context. </param>
            <param name="values"> </param>
            <returns> </returns>
        </member>
        <member name="M:TextMetal.Core.DebuggerBreakpointConstruct.ExpandTemplate(TextMetal.Core.TemplateModel.TemplatingContext)">
            <summary>
            	Expands the template tree into the templating context current output.
            </summary>
            <param name="templatingContext"> The templating context. </param>
        </member>
        <member name="M:TextMetal.Core.DebuggerBreakpointConstruct.GetAssociativeObjectEnumerator">
            <summary>
            	Gets the enumerator for the current associative object instance.
            </summary>
            <returns> An instance of IEnumerator or null. </returns>
        </member>
        <member name="M:TextMetal.Core.DebuggerBreakpointConstruct.GetAssociativeObjectEnumeratorDict">
            <summary>
            	Gets the dictionary enumerator for the current associative object instance.
            </summary>
            <returns> An instance of IDictionaryEnumerator or null. </returns>
        </member>
        <member name="M:TextMetal.Core.DebuggerBreakpointConstruct.GetAssociativeObjectEnumeratorTickOne">
            <summary>
            	Gets the enumerator (tick one) for the current associative object instance.
            </summary>
            <returns> An instance of IEnumerator`1 or null. </returns>
        </member>
        <member name="M:TextMetal.Core.DebuggerBreakpointConstruct.GetAssociativeObjectValue">
            <summary>
            	Gets the value of the current associative object instance.
            </summary>
            <returns> A value or null. </returns>
        </member>
        <member name="P:TextMetal.Core.DebuggerBreakpointConstruct.AllowedChildTypes">
            <summary>
            	Gets an array of allowed child XML object types.
            </summary>
        </member>
        <member name="P:TextMetal.Core.DebuggerBreakpointConstruct.AllowedParentTypes">
            <summary>
            	Gets an array of allowed parent XML object types.
            </summary>
        </member>
        <member name="P:TextMetal.Core.DebuggerBreakpointConstruct.Content">
            <summary>
            	Gets or sets the optional single XML object content. This implementation always return null.
            </summary>
        </member>
        <member name="P:TextMetal.Core.DebuggerBreakpointConstruct.Items">
            <summary>
            	Gets a list of XML object items. This implementation always return null.
            </summary>
        </member>
        <member name="P:TextMetal.Core.DebuggerBreakpointConstruct.Name">
            <summary>
            	Gets the associative name of the current associative XML object.
            </summary>
        </member>
        <member name="P:TextMetal.Core.DebuggerBreakpointConstruct.Parent">
            <summary>
            	Gets or sets the parent XML object or null if this is the document root.
            </summary>
        </member>
        <member name="T:TextMetal.Core.ExpressionModel.BinaryExpressionConstruct">
            <summary>
            	This class uses the C# compiler style of numeric promotions.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.ExpressionXmlObject.#ctor">
            <summary>
            	Initializes a new instance of the ExpressionXmlObject class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.BinaryExpressionConstruct.#ctor">
            <summary>
            	Initializes a new instance of the BinaryExpressionConstruct class.
            </summary>
        </member>
        <member name="T:TextMetal.Core.ExpressionModel.Operators.IOperator">
            <summary>
            	Defines the contract an operator must expose.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.Operators.IOperator.GetMneumonic">
            <summary>
            	Gets the mneumonic for the current operator.
            </summary>
            <returns> An instance of the OperatorMneumonicAttribute. </returns>
        </member>
        <member name="T:TextMetal.Core.ExpressionModel.Operators.Binary.IBinaryOperator">
            <summary>
            	Defines the contract an binary operator must expose.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.Operators.Binary.IBinaryOperator.Eval(System.Object,System.Func{System.Object})">
            <summary>
            	Evaluate this unary operator with two arguments.
            </summary>
            <param name="leftObj"> The left hand side argument. </param>
            <param name="onDemandRightExpressionEvaluator"> The rigght hand side argument, wrapped as an on-demand, lazy evaluated delegate. </param>
            <returns> The evaluated value (can be null). </returns>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.SurfaceConstruct.#ctor">
            <summary>
            	Initializes a new instance of the SurfaceConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.AspectConstruct.#ctor">
            <summary>
            	Initializes a new instance of the AspectConstruct class.
            </summary>
        </member>
        <member name="T:TextMetal.Core.ExpressionModel.Operators.Nullary.INullaryOperator">
            <summary>
            	Defines the contract an nullary operator must expose.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.Operators.Nullary.INullaryOperator.Eval">
            <summary>
            	Evaluate this unary operator with no arguments.
            </summary>
            <returns> The evaluated value (can be null). </returns>
        </member>
        <member name="T:TextMetal.Core.ExpressionModel.Operators.Unary.IUnaryOperator">
            <summary>
            	Defines the contract an unary operator must expose.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.Operators.Unary.IUnaryOperator.Eval(System.Object)">
            <summary>
            	Evaluate this unary operator with the single argument.
            </summary>
            <param name="theObj"> The single argument. </param>
            <returns> The evaluated value (can be null). </returns>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.PowerShellConstruct.#ctor">
            <summary>
            	Initializes a new instance of the PowerShellConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.PowerShellConstruct.PowerShellHost.#ctor">
            <summary>
            	Initializes a new instance of the PowerShellHost class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.PowerShellConstruct.PowerShellHost.EnterNestedPrompt">
            <summary>
            	Not implemented by this example class. The call fails with a NotImplementedException exception.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.PowerShellConstruct.PowerShellHost.ExitNestedPrompt">
            <summary>
            	Not implemented by this example class. The call fails with a NotImplementedException exception.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.PowerShellConstruct.PowerShellHost.NotifyBeginApplication">
            <summary>
            	This API is called before an external application process is started. Typically it is used to save state so the parent can restore state that has been modified by a child process (after the child exits). In this example, this functionality is not needed so the method returns nothing.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.PowerShellConstruct.PowerShellHost.NotifyEndApplication">
            <summary>
            	This API is called after an external application process finishes. Typically it is used to restore state that a child process may have altered. In this example, this functionality is not needed so the method returns nothing.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.PowerShellConstruct.PowerShellHost.SetShouldExit(System.Int32)">
            <summary>
            	Indicate to the host application that exit has been requested. Pass the exit code that the host application should use when exiting the process.
            </summary>
            <param name="exitCode"> The exit code to use. </param>
        </member>
        <member name="P:TextMetal.Core.ExpressionModel.PowerShellConstruct.PowerShellHost.CurrentCulture">
            <summary>
            	Return the culture information to use. This implementation returns a snapshot of the culture information of the thread that created this object.
            </summary>
        </member>
        <member name="P:TextMetal.Core.ExpressionModel.PowerShellConstruct.PowerShellHost.CurrentUICulture">
            <summary>
            	Return the UI culture information to use. This implementation returns a snapshot of the UI culture information of the thread that created this object.
            </summary>
        </member>
        <member name="P:TextMetal.Core.ExpressionModel.PowerShellConstruct.PowerShellHost.InstanceId">
            <summary>
            	This implementation always returns the GUID allocated at instantiation time.
            </summary>
        </member>
        <member name="P:TextMetal.Core.ExpressionModel.PowerShellConstruct.PowerShellHost.Name">
            <summary>
            	Return a string that contains the name of the host implementation. Keep in mind that this string may be used by script writers to identify when your host is being used.
            </summary>
        </member>
        <member name="P:TextMetal.Core.ExpressionModel.PowerShellConstruct.PowerShellHost.UI">
            <summary>
            	This sample does not implement a PSHostUserInterface component so this property simply returns null.
            </summary>
        </member>
        <member name="P:TextMetal.Core.ExpressionModel.PowerShellConstruct.PowerShellHost.Version">
            <summary>
            	Return the version object for this application. Typically this should match the version resource in the application.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.ExpressionContainerConstruct.#ctor">
            <summary>
            	Initializes a new instance of the ExpressionContainerConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.ExpressionVisitor.#ctor">
            <summary>
            	Initializes a new instance of the ExpressionVisitor class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.FacetConstruct.#ctor">
            <summary>
            	Initializes a new instance of the FacetConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.NullaryExpressionConstruct.#ctor">
            <summary>
            	Initializes a new instance of the NullaryExpressionConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.PrintExpressionVisitor.#ctor">
            <summary>
            	Initializes a new instance of the PrintExpressionVisitor class.
            </summary>
        </member>
        <member name="T:TextMetal.Core.ExpressionModel.UnaryExpressionConstruct">
            <summary>
            	This class uses the C# compiler style of numeric promotions.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.UnaryExpressionConstruct.#ctor">
            <summary>
            	Initializes a new instance of the UnaryExpressionConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.ExpressionModel.ValueConstruct.#ctor">
            <summary>
            	Initializes a new instance of the ValueConstruct class.
            </summary>
        </member>
        <member name="T:TextMetal.Core.InputOutputModel.IInputMechanism">
            <summary>
            	Provides for input mechanics.
            </summary>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.IInputMechanism.LoadAssembly(System.String)">
            <summary>
            	Loads an assembly by name.
            </summary>
            <param name="assemblyName"> The assembly name to load. </param>
            <returns> An assembly object or null. </returns>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.IInputMechanism.LoadContent(System.String)">
            <summary>
            	Loads content by resource name. Resource name semantics is implementation specific.
            </summary>
            <param name="resourceName"> The resource name to load. </param>
            <returns> The text content or null. </returns>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.IInputMechanism.LoadFragment(System.String)">
            <summary>
            	Loads an template fragment by resource name. Resource name semantics is implementation specific.
            </summary>
            <param name="resourceName"> The resource name to load. </param>
            <returns> The template fragment root object or null. </returns>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.InputMechanism.#ctor">
            <summary>
            	Initializes a new instance of the InputMechanism class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.InputMechanism.Dispose">
            <summary>
            	Dispose of the data source transaction.
            </summary>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.InputMechanism.LoadAssembly(System.String)">
            <summary>
            	Loads an assembly by name.
            </summary>
            <param name="assemblyName"> The assembly name to load. </param>
            <returns> An assembly object or null. </returns>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.InputMechanism.LoadContent(System.String)">
            <summary>
            	Loads content by resource name. Resource name semantics is implementation specific.
            </summary>
            <param name="resourceName"> The resource name to load. </param>
            <returns> The text content or null. </returns>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.InputMechanism.LoadFragment(System.String)">
            <summary>
            	Loads an template fragment by resource name. Resource name semantics is implementation specific.
            </summary>
            <param name="resourceName"> The resource name to load. </param>
            <returns> The template fragment root object or null. </returns>
        </member>
        <member name="P:TextMetal.Core.InputOutputModel.InputMechanism.Disposed">
            <summary>
            	Gets a value indicating whether the current instance has been disposed.
            </summary>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.FileInputMechanism.#ctor(System.String,TextMetal.Core.XmlModel.IXmlPersistEngine)">
            <summary>
            	Initializes a new instance of the FileInputMechanism class.
            </summary>
            <param name="baseDirectoryPath">The base input directory path.</param>
            <param name="xpe">The XML persist engine in-effect.</param>
        </member>
        <member name="T:TextMetal.Core.InputOutputModel.IOutputMechanism">
            <summary>
            	Provides for output mechanics.
            </summary>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.IOutputMechanism.EnterScope(System.String)">
            <summary>
            	Enters (pushes) an output scope as deliniated by scope name. Scope name semantics is implementation specific.
            </summary>
            <param name="scopeName"> The scope name to push. </param>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.IOutputMechanism.LeaveScope(System.String)">
            <summary>
            	Leaves (pops) an output scope as deliniated by scope name. Scope name semantics is implementation specific.
            </summary>
            <param name="scopeName"> The scope name to pop. </param>
        </member>
        <member name="P:TextMetal.Core.InputOutputModel.IOutputMechanism.CurrentTextWriter">
            <summary>
            	Gets the current text writer instance.
            </summary>
        </member>
        <member name="P:TextMetal.Core.InputOutputModel.IOutputMechanism.LogTextWriter">
            <summary>
            	Gets the current log text writer instance.
            </summary>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.OutputMechanism.#ctor">
            <summary>
            	Initializes a new instance of the OutputMechanism class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.OutputMechanism.Dispose">
            <summary>
            	Dispose of the data source transaction.
            </summary>
        </member>
        <member name="P:TextMetal.Core.InputOutputModel.OutputMechanism.Disposed">
            <summary>
            	Gets a value indicating whether the current instance has been disposed.
            </summary>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.FileOutputMechanism.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the FileOutputMechanism class.
            </summary>
            <param name="baseDirectoryPath">The base output directory path.</param>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.NullInputMechanism.#ctor">
            <summary>
            	Initializes a new instance of the NullInputMechanism class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.StringOutputMechanism.#ctor">
            <summary>
            	Initializes a new instance of the StringOutputMechanism class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.InputOutputModel.TextWriterOutputMechanism.#ctor(System.IO.TextWriter)">
            <summary>
            	Initializes a new instance of the TextWriterOutputMechanism class.
            </summary>
        </member>
        <member name="T:TextMetal.Core.CovariantListAdapter`2">
            <summary>
            	Serves as a covariant list adapter.
            </summary>
            <typeparam name="TToBase"> The target list super type. </typeparam>
            <typeparam name="TFromDerived"> The source list sub type. </typeparam>
        </member>
        <member name="M:TextMetal.Core.CovariantListAdapter`2.#ctor(TextMetal.Core.XmlModel.IXmlObjectCollection{`1})">
            <summary>
            	Initializes a new instance of the CovariantListAdapter`2 class.
            </summary>
            <param name="inner"> The inner list instance. </param>
        </member>
        <member name="M:TextMetal.Core.CovariantListAdapter`2.Add(`0)">
            <summary>
            	Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <param name="item"> The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
        </member>
        <member name="M:TextMetal.Core.CovariantListAdapter`2.Clear">
            <summary>
            	Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
        </member>
        <member name="M:TextMetal.Core.CovariantListAdapter`2.Contains(`0)">
            <summary>
            	Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns> true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" /> ; otherwise, false. </returns>
            <param name="item"> The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
        </member>
        <member name="M:TextMetal.Core.CovariantListAdapter`2.CopyTo(`0[],System.Int32)">
            <summary>
            	Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" /> , starting at a particular <see
             	cref="T:System.Array" /> index.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see
             	cref="T:System.Collections.Generic.ICollection`1" /> . The <see cref="T:System.Array" /> must have zero-based indexing. </param>
            <param name="arrayIndex"> The zero-based index in <paramref name="array" /> at which copying begins. </param>
        </member>
        <member name="M:TextMetal.Core.CovariantListAdapter`2.GetEnumerator">
            <summary>
            	Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:TextMetal.Core.CovariantListAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            	Returns an enumerator that iterates through a collection.
            </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:TextMetal.Core.CovariantListAdapter`2.IndexOf(`0)">
            <summary>
            	Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" /> .
            </summary>
            <returns> The index of <paramref name="item" /> if found in the list; otherwise, -1. </returns>
            <param name="item"> The object to locate in the <see cref="T:System.Collections.Generic.IList`1" /> . </param>
        </member>
        <member name="M:TextMetal.Core.CovariantListAdapter`2.Insert(System.Int32,`0)">
            <summary>
            	Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index"> The zero-based index at which <paramref name="item" /> should be inserted. </param>
            <param name="item"> The object to insert into the <see cref="T:System.Collections.Generic.IList`1" /> . </param>
        </member>
        <member name="M:TextMetal.Core.CovariantListAdapter`2.Remove(`0)">
            <summary>
            	Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <returns> true if <paramref name="item" /> was successfully removed from the <see
             	cref="T:System.Collections.Generic.ICollection`1" /> ; otherwise, false. This method also returns false if <paramref
             	name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" /> . </returns>
            <param name="item"> The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
        </member>
        <member name="M:TextMetal.Core.CovariantListAdapter`2.RemoveAt(System.Int32)">
            <summary>
            	Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index"> The zero-based index of the item to remove. </param>
        </member>
        <member name="P:TextMetal.Core.CovariantListAdapter`2.Item(System.Int32)">
            <summary>
            	Gets or sets the element at the specified index.
            </summary>
            <returns> The element at the specified index. </returns>
            <param name="index"> The zero-based index of the element to get or set. </param>
        </member>
        <member name="P:TextMetal.Core.CovariantListAdapter`2.Count">
            <summary>
            	Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <returns> The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" /> . </returns>
        </member>
        <member name="P:TextMetal.Core.CovariantListAdapter`2.Inner">
            <summary>
            	Gets the inner list from the derived type.
            </summary>
        </member>
        <member name="P:TextMetal.Core.CovariantListAdapter`2.IsReadOnly">
            <summary>
            	Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns> true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false. </returns>
        </member>
        <member name="P:TextMetal.Core.CovariantListAdapter`2.Site">
            <summary>
            	Gets the site XML object or null if this is unattached.
            </summary>
        </member>
        <member name="T:TextMetal.Core.Message">
            <summary>
            	Represents a message with a category, description, and severity.
            </summary>
        </member>
        <member name="M:TextMetal.Core.Message.#ctor(System.String,System.String,TextMetal.Core.Severity)">
            <summary>
            	Initializes a new instance of the Message class.
            </summary>
            <param name="category"> The category of the message. </param>
            <param name="description"> The description of the message. </param>
            <param name="severity"> The severity of the message. </param>
        </member>
        <member name="M:TextMetal.Core.Message.#ctor">
            <summary>
            	Initializes a new instance of the Message class.
            </summary>
        </member>
        <member name="P:TextMetal.Core.Message.Category">
            <summary>
            	Gets the message category.
            </summary>
        </member>
        <member name="P:TextMetal.Core.Message.Description">
            <summary>
            	Gets the message description.
            </summary>
        </member>
        <member name="P:TextMetal.Core.Message.Severity">
            <summary>
            	Gets the message severity.
            </summary>
        </member>
        <member name="T:TextMetal.Core.Name">
            <summary>
            	Internal set of static methods used to format a name (symbol) in US English.
            </summary>
        </member>
        <member name="M:TextMetal.Core.Name.GetCamelCase(System.String)">
            <summary>
            	Gets the camel (e.g. 'myVariableName') form of a name. This method strips underscores.
            </summary>
            <param name="value"> The value to which to get the camel case form. </param>
            <returns> The camel case, valid C# identifier form of the specified value. </returns>
        </member>
        <member name="M:TextMetal.Core.Name.GetConstantCase(System.String)">
            <summary>
            	Gets the contant (e.g. 'MY_VARIABLE_NAME') form of a name. This method adds underscores at case change boundaries.
            </summary>
            <param name="value"> The value to which to get the constant case form. </param>
            <returns> The constant case, valid C# identifier form of the specified value. </returns>
        </member>
        <member name="M:TextMetal.Core.Name.GetPascalCase(System.String)">
            <summary>
            	Gets the Pascal (e.g. 'myVariableName') form of a name. This method strips underscores.
            </summary>
            <param name="value"> The value to which to get the Pascal case form. </param>
            <returns> The Pascal case, valid C# identifier form of the specified value. </returns>
        </member>
        <member name="M:TextMetal.Core.Name.GetPluralForm(System.String)">
            <summary>
            	Gets the plural (e.g. 'myVariableNames') form of a name. This method uses basic stemming.
            </summary>
            <param name="value"> The value to which to get the plural form. </param>
            <returns> The plural, valid C# identifier form of the specified value. </returns>
        </member>
        <member name="M:TextMetal.Core.Name.GetSingularForm(System.String)">
            <summary>
            	Gets the singular (e.g. 'myVariableName') form of a name. This method uses basic stemming.
            </summary>
            <param name="value"> The value to which to get the singular form. </param>
            <returns> The singular, valid C# identifier form of the specified value. </returns>
        </member>
        <member name="M:TextMetal.Core.Name.GetValidCSharpIdentifier(System.String)">
            <summary>
            	Gets a valid C# identifier from the specified name (symbol).
            </summary>
            <param name="value"> The value to which to derive the C# identifier. </param>
            <returns> The valid C# identifier form of the specified value. </returns>
        </member>
        <member name="M:TextMetal.Core.Name.IsValidCSharpIdentifier(System.String)">
            <summary>
            	Gets a value indicating whether the specified value is a valid C# identifier.
            </summary>
            <param name="value"> The value to test as a C# identifier. </param>
            <returns> True if the specified value is a valid C# identifier; otherwise false. </returns>
        </member>
        <member name="M:TextMetal.Core.Name.IsVowel(System.Char)">
            <summary>
            	Gets a value indicating whether the specified character is a vowel (US English).
            </summary>
            <param name="ch"> The value to test as a vowel (US English). </param>
            <returns> True if the specified value is a vowel (US English); otherwise false. </returns>
        </member>
        <member name="P:TextMetal.Core.Name.CSharpIdentifierRegEx">
            <summary>
            	Gets the C# identifier regular expression pattern.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SortModel.SortXmlObject.#ctor">
            <summary>
            	Initializes a new instance of the SortXmlObject class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SortModel.OrderConstruct.#ctor(System.Boolean)">
            <summary>
            	Initializes a new instance of the OrderConstruct class.
            </summary>
            <param name="ascending">A value indicating whether the order is ascending (true) or descending (false).</param>
        </member>
        <member name="M:TextMetal.Core.SortModel.AscendingConstruct.#ctor">
            <summary>
            	Initializes a new instance of the AscendingConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SortModel.DescendingConstruct.#ctor">
            <summary>
            	Initializes a new instance of the DescendingConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SortModel.SortContainerConstruct.#ctor">
            <summary>
            	Initializes a new instance of the SortContainerConstruct class.
            </summary>
        </member>
        <member name="T:TextMetal.Core.SourceModel.ISourceStrategy">
            <summary>
            	Provides a strategy pattern around aquiring source objects.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.ISourceStrategy.GetSourceObject(System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
            	Gets the source object.
            </summary>
            <param name="sourceFilePath"> The source file path or lossely, a URI to the source repository (e.g. database). </param>
            <param name="properties"> A list of arbitrary properties (key/value pairs). </param>
            <returns> An source object instance or null. </returns>
        </member>
        <member name="M:TextMetal.Core.SourceModel.SourceStrategy.#ctor">
            <summary>
            	Initializes a new instance of the SourceStrategy class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.DatabaseSchema.Odbc.OdbcSchemaSourceStrategy.#ctor">
            <summary>
            	Initializes a new instance of the OdbcSchemaSourceStrategy class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.Primative.XmlPersistEngineSourceStrategy.#ctor">
            <summary>
            	Initializes a new instance of the XmlPersistEngineSourceStrategy class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.Primative.AssociativeXmlSourceStrategy.#ctor">
            <summary>
            	Initializes a new instance of the AssociativeXmlSourceStrategy class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.Primative.NullSourceStrategy.#ctor">
            <summary>
            	Initializes a new instance of the NullSourceStrategy class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.Primative.ReflectionSourceStrategy.#ctor">
            <summary>
            	Initializes a new instance of the ReflectionSourceStrategy class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.Primative.SqlDataSourceStrategy.#ctor">
            <summary>
            	Initializes a new instance of the SqlDataSourceStrategy class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.Primative.TextSourceStrategy.#ctor">
            <summary>
            	Initializes a new instance of the TextSourceStrategy class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.Primative.XmlSchemaSourceStrategy.#ctor">
            <summary>
            	Initializes a new instance of the XmlSchemaSourceStrategy class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.Primative.XmlSerializerSourceStrategy.#ctor">
            <summary>
            	Initializes a new instance of the XmlSerializerSourceStrategy class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.DatabaseSchema.Catalog.#ctor">
            <summary>
            	Initializes a new instance of the Catalog class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.DatabaseSchema.Column.#ctor">
            <summary>
            	Initializes a new instance of the Column class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.DatabaseSchema.Database.#ctor">
            <summary>
            	Initializes a new instance of the Database class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.DatabaseSchema.ForeignKey.#ctor">
            <summary>
            	Initializes a new instance of the ForeignKey class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.DatabaseSchema.ForeignKeyColumnRef.#ctor">
            <summary>
            	Initializes a new instance of the ForeignKeyColumnRef class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.DatabaseSchema.Parameter.#ctor">
            <summary>
            	Initializes a new instance of the Parameter class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.DatabaseSchema.Procedure.#ctor">
            <summary>
            	Initializes a new instance of the Procedure class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.DatabaseSchema.Schema.#ctor">
            <summary>
            	Initializes a new instance of the Schema class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.DatabaseSchema.Sql.SqlSchemaSourceStrategy.#ctor">
            <summary>
            	Initializes a new instance of the SqlSchemaSourceStrategy class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.DatabaseSchema.Table.#ctor">
            <summary>
            	Initializes a new instance of the Table class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.DatabaseSchema.UniqueKey.#ctor">
            <summary>
            	Initializes a new instance of the UniqueKey class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.SourceModel.DatabaseSchema.UniqueKeyColumnRef.#ctor">
            <summary>
            	Initializes a new instance of the UniqueKeyColumnRef class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.TemplateXmlObject.#ctor">
            <summary>
            	Initializes a new instance of the TemplateXmlObject class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.AliasConstruct.#ctor">
            <summary>
            	Initializes a new instance of the AliasConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.AllocConstruct.#ctor">
            <summary>
            	Initializes a new instance of the AllocConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.AssignConstruct.#ctor">
            <summary>
            	Initializes a new instance of the AssignConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.ReferenceConstruct.#ctor">
            <summary>
            	Initializes a new instance of the ReferenceConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.ForConstruct.#ctor">
            <summary>
            	Initializes a new instance of the ForConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.ForEachConstruct.#ctor">
            <summary>
            	Initializes a new instance of the ForEachConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.FreeConstruct.#ctor">
            <summary>
            	Initializes a new instance of the FreeConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.IfConstruct.#ctor">
            <summary>
            	Initializes a new instance of the IfConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.ImportConstruct.#ctor">
            <summary>
            	Initializes a new instance of the ImportConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.IncludeConstruct.#ctor">
            <summary>
            	Initializes a new instance of the IncludeConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.InvokeSourceStrategyConstruct.#ctor">
            <summary>
            	Initializes a new instance of the InvokeSourceStrategyConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.LogConstruct.#ctor">
            <summary>
            	Initializes a new instance of the LogConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.OutputScopeConstruct.#ctor">
            <summary>
            	Initializes a new instance of the OutputScopeConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.TemplateConstruct.#ctor">
            <summary>
            	Initializes a new instance of the TemplateConstruct class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.TemplateContainerConstruct.#ctor">
            <summary>
            	Initializes a new instance of the TemplateContainerConstruct class.
            </summary>
        </member>
        <member name="T:TextMetal.Core.XmlModel.IXmlTextObject">
            <summary>
            	Represents an XML text object and it's text value.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.IXmlTextObject.Name">
            <summary>
            	Gets or sets the XML name (local name and namespace URI).
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.IXmlTextObject.Text">
            <summary>
            	Gets or sets the text value.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.TemplateXmlTextObject.#ctor">
            <summary>
            	Initializes a new instance of the TemplateXmlTextObject class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.TemplatingContext.#ctor(TextMetal.Core.XmlModel.IXmlPersistEngine,TextMetal.Core.TokenModel.Tokenizer,TextMetal.Core.InputOutputModel.IInputMechanism,TextMetal.Core.InputOutputModel.IOutputMechanism)">
            <summary>
            	Initializes a new instance of the TemplatingContext class.
            </summary>
            <param name="xpe">The XML persist engine in-effect.</param>
            <param name="tokenizer">The tokenizer in-efect.</param>
            <param name="input">The input mechanism in-effect.</param>
            <param name="output">The output mechanism in-effect.</param>
        </member>
        <member name="M:TextMetal.Core.TemplateModel.WriteConstruct.#ctor">
            <summary>
            	Initializes a new instance of the WriteConstruct class.
            </summary>
        </member>
        <member name="T:TextMetal.Core.TokenModel.DynamicValueTokenReplacementStrategy">
            <summary>
            	Provides a dynamic token replacement strategy which executes an on-demand callback method to obtain a replacement value.
            </summary>
        </member>
        <member name="T:TextMetal.Core.TokenModel.ITokenReplacementStrategy">
            <summary>
            	Represents a token replacement strategy.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TokenModel.ITokenReplacementStrategy.Evaluate(System.String[])">
            <summary>
            	Evaluate a token using any parameters specified.
            </summary>
            <param name="parameters"> Should be null for value semantics; or a valid string array for function semantics. </param>
            <returns> An approapriate token replacement value. </returns>
        </member>
        <member name="M:TextMetal.Core.TokenModel.DynamicValueTokenReplacementStrategy.#ctor(System.Func{System.String[],System.Object})">
            <summary>
            	Initializes a new instance of the DynamicValueTokenReplacementStrategy class.
            </summary>
            <param name="method"> The callback method to evaluate during token replacement. </param>
        </member>
        <member name="M:TextMetal.Core.TokenModel.DynamicValueTokenReplacementStrategy.StaticMethodResolver(System.String[])">
            <summary>
            	Used by the token model to execute public, static methods with zero parameters in a dynamic manner.
            </summary>
            <param name="parameters"> An array of parameters in the form: assembly-qualified-type-name, method-name, [parameters, ...] </param>
            <returns> The return value of the executed method. </returns>
        </member>
        <member name="M:TextMetal.Core.TokenModel.DynamicValueTokenReplacementStrategy.StaticPropertyResolver(System.String[])">
            <summary>
            	Used by the token model to get the value of public, static properties with zero parameters in a dynamic manner.
            </summary>
            <param name="parameters"> An array of parameters in the form: assembly-qualified-type-name, property-name </param>
            <returns> The return value of the property getter. </returns>
        </member>
        <member name="M:TextMetal.Core.TokenModel.DynamicValueTokenReplacementStrategy.Evaluate(System.String[])">
            <summary>
            	Evaluate a token using any parameters specified.
            </summary>
            <param name="parameters"> Should be null for value semantics; or a valid string array for function semantics. </param>
            <returns> An approapriate token replacement value. </returns>
        </member>
        <member name="P:TextMetal.Core.TokenModel.DynamicValueTokenReplacementStrategy.Method">
            <summary>
            	Gets the callback method to evaluate during token replacement.
            </summary>
        </member>
        <member name="T:TextMetal.Core.TokenModel.DynamicWildcardTokenReplacementStrategy">
            <summary>
            	Provides a wldcard token replacement strategy which returns the data using reflection or dictionary semantics against an object property path.
            </summary>
        </member>
        <member name="T:TextMetal.Core.TokenModel.IWildcardTokenReplacementStrategy">
            <summary>
            	Represents a token replacement strategy.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TokenModel.IWildcardTokenReplacementStrategy.Evaluate(System.String,System.Object[])">
            <summary>
            	Evaluate a token using any parameters specified.
            </summary>
            <param name="token"> The wildcard token to evaludate. </param>
            <param name="parameters"> Should be null for value semantics; or a valid object array for function semantics. </param>
            <returns> An approapriate token replacement value. </returns>
        </member>
        <member name="M:TextMetal.Core.TokenModel.DynamicWildcardTokenReplacementStrategy.#ctor(System.Object[])">
            <summary>
            	Initializes a new instance of the DynamicWildcardTokenReplacementStrategy class.
            </summary>
            <param name="targets"> The tagret object instances to evaluate (in linear order) during wildcard token replacement. </param>
        </member>
        <member name="M:TextMetal.Core.TokenModel.DynamicWildcardTokenReplacementStrategy.#ctor(System.Object[],System.Boolean)">
            <summary>
            	Initializes a new instance of the DynamicWildcardTokenReplacementStrategy class. This overload overrides the default strict setting (true).
            </summary>
            <param name="targets"> The tagret object instances to evaluate (in linear order) during wildcard token replacement. </param>
            <param name="strict"> A value indicating if exceptions are thrown for bad token matches. </param>
        </member>
        <member name="M:TextMetal.Core.TokenModel.DynamicWildcardTokenReplacementStrategy.Evaluate(System.String,System.Object[])">
            <summary>
            	Evaluate a token using any parameters specified.
            </summary>
            <param name="token"> The wildcard token to evaludate. </param>
            <param name="parameters"> Should be null for value semantics; or a valid object array for function semantics. </param>
            <returns> An approapriate token replacement value. </returns>
        </member>
        <member name="M:TextMetal.Core.TokenModel.DynamicWildcardTokenReplacementStrategy.GetByPath(System.String,System.Object@)">
            <summary>
            	Gets a value by path from the array of target objects. This method obeys the strict matching semantics flag in effect and if enabled, will throw an exception on path lookup failure.
            </summary>
            <param name="path"> The logical path (i.e. property name, dictionary key, etc.) to lookup. </param>
            <param name="value"> The output value or null if the path was not found. </param>
            <returns> A value indicating whether the path was found in the array of target objects. </returns>
        </member>
        <member name="M:TextMetal.Core.TokenModel.DynamicWildcardTokenReplacementStrategy.SetByPath(System.String,System.Object)">
            <summary>
            	Sets a value by path to the array of target objects. This method obeys the strict matching semantics flag in effect and if enabled, will throw an exception on path lookup failure.
            </summary>
            <param name="path"> The logical path (i.e. property name, dictionary key, etc.) to lookup. </param>
            <param name="value"> The value to set or null. </param>
            <returns> A value indicating whether the path was found in the array of target objects. </returns>
        </member>
        <member name="P:TextMetal.Core.TokenModel.DynamicWildcardTokenReplacementStrategy.Strict">
            <summary>
            	Gets a value indicating whether strict matching semantics are enabled.
            </summary>
        </member>
        <member name="P:TextMetal.Core.TokenModel.DynamicWildcardTokenReplacementStrategy.Targets">
            <summary>
            	Gets the target object instance value to evaluate (in linear order) during wildcard token replacement.
            </summary>
        </member>
        <member name="T:TextMetal.Core.TokenModel.StaticValueTokenReplacementStrategy">
            <summary>
            	Provides a static token replacement strategy which returns the same static value each request.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TokenModel.StaticValueTokenReplacementStrategy.#ctor(System.Object)">
            <summary>
            	Initializes a new instance of the StaticValueTokenReplacementStrategy class.
            </summary>
            <param name="value"> The static value to evaluate during token replacement. </param>
        </member>
        <member name="M:TextMetal.Core.TokenModel.StaticValueTokenReplacementStrategy.Evaluate(System.String[])">
            <summary>
            	Evaluate a token using any parameters specified.
            </summary>
            <param name="parameters"> Should be null for value semantics; or a string object array for function semantics. </param>
            <returns> An approapriate token replacement value. </returns>
        </member>
        <member name="P:TextMetal.Core.TokenModel.StaticValueTokenReplacementStrategy.Value">
            <summary>
            	Gets the static value to evaluate during token replacement.
            </summary>
        </member>
        <member name="T:TextMetal.Core.TokenModel.Tokenizer">
            <summary>
            	Replaces a tokenized input string with replacement values. A token is in the following format: ${token(`arg0`, `arg1`, ...)} token: a required 'key' into a 'dictionary' of token replacement strategies. A missing token is considered invalid and no replacement will be made. An unknown token considered invalid and no replacement will be made. The minimum length of a token is 1; the maximum length of a token is 1024. Tokens are case insensative. An token may be proceded by an optional function call operator with zero or more arguments. Each function call argument must be enclosed in tick marks e.g. `some value`. Recursion/nested token expressions is not supported.
            </summary>
        </member>
        <member name="M:TextMetal.Core.TokenModel.Tokenizer.#ctor(System.Collections.Generic.IDictionary{System.String,TextMetal.Core.TokenModel.ITokenReplacementStrategy},System.Boolean)">
            <summary>
            	Initializes a new instance of the Tokenizer class.
            </summary>
            <param name="tokenReplacementStrategies"> A dictionary of token replacement strategies. </param>
            <param name="strictMatching"> A value indicating if exceptions are thrown for bad token matches. </param>
        </member>
        <member name="M:TextMetal.Core.TokenModel.Tokenizer.#ctor(System.Boolean)">
            <summary>
            	Initializes a new instance of the Tokenizer class.
            </summary>
            <param name="strictMatching"> A value indicating if exceptions are thrown for bad token matches. </param>
        </member>
        <member name="M:TextMetal.Core.TokenModel.Tokenizer.GetArgs(System.String)">
            <summary>
            	A private method to parse an argument array from a tokenized call list.
            </summary>
            <param name="call"> The call list from a tokenized call site. </param>
            <returns> A string array of call site arguments. </returns>
        </member>
        <member name="M:TextMetal.Core.TokenModel.Tokenizer.GetOriginalValueOrThrowExecption(System.Boolean,System.String,System.String)">
            <summary>
            	A private method that obeys the strict matching semantics flag in effect and if enabled, will throw an exception. Otherwise, returns the original unmatched value without alteration.
            </summary>
            <param name="strictMatching"> A value indicating whether strict matching semantics are in effect. </param>
            <param name="originalValue"> The original unmatched value. </param>
            <param name="matchPoint"> A short description of where the match failure occured. </param>
            <returns> The original value if strict matching semantics are disabled. </returns>
        </member>
        <member name="M:TextMetal.Core.TokenModel.Tokenizer.ExpandTokens(System.String)">
            <summary>
            	Replaces a tokenized input string with replacement values. No wildcard support is assumed.
            </summary>
            <param name="tokenizedValue"> The input string containing tokenized values. </param>
            <returns> A string value with all possible replacements made. </returns>
        </member>
        <member name="M:TextMetal.Core.TokenModel.Tokenizer.ExpandTokens(System.String,TextMetal.Core.TokenModel.IWildcardTokenReplacementStrategy)">
            <summary>
            	Replaces a tokenized input string with replacement values. Wildcard support is optional.
            </summary>
            <param name="tokenizedValue"> The input string containing tokenized values. </param>
            <param name="optionalWildcardTokenReplacementStrategy"> An optional wildcard token replacement strategy. </param>
            <returns> A string value with all possible replacements made. </returns>
        </member>
        <member name="M:TextMetal.Core.TokenModel.Tokenizer.ReplacementMatcherEx(System.Text.RegularExpressions.Match,TextMetal.Core.TokenModel.IWildcardTokenReplacementStrategy)">
            <summary>
            	Private method used to match and process tokenized regular expressions.
            </summary>
            <param name="match"> The regular express match object. </param>
            <param name="wildcardTokenReplacementStrategy"> The wildcard token replacement strategy to use in the event a predefined token replacement strategy lookup failed. </param>
            <returns> The token-resolved string value. </returns>
        </member>
        <member name="P:TextMetal.Core.TokenModel.Tokenizer.TokenizerRegEx">
            <summary>
            	Gets the tokenizer regular expression.
            </summary>
        </member>
        <member name="P:TextMetal.Core.TokenModel.Tokenizer.OrderedPreviousExpansionTokens">
            <summary>
            	Gets an ordered array of the previous execution of expansion tokens encountered.
            </summary>
        </member>
        <member name="P:TextMetal.Core.TokenModel.Tokenizer.StrictMatching">
            <summary>
            	Gets a value indicating if exceptions are thrown for bad token matches.
            </summary>
        </member>
        <member name="P:TextMetal.Core.TokenModel.Tokenizer.TokenReplacementStrategies">
            <summary>
            	Gets a dictionary of token replacement strategies.
            </summary>
        </member>
        <member name="T:TextMetal.Core.XmlModel.ChildElementType">
            <summary>
            	Specifies the allowed child element types for an XML object properties (applicable only to those which are well-known via properties with mapping attributes).
            </summary>
        </member>
        <member name="F:TextMetal.Core.XmlModel.ChildElementType.TextValue">
            <summary>
            	The element is a text element using it's local name and namespace. This is the default.
            </summary>
        </member>
        <member name="F:TextMetal.Core.XmlModel.ChildElementType.Unqualified">
            <summary>
            	The element will be rendered as a non-text element using it's local name and namespace.
            </summary>
        </member>
        <member name="F:TextMetal.Core.XmlModel.ChildElementType.ParentQualified">
            <summary>
            	The element will be rendered as a non-text element using it's local name dot prefixed with the local name of it's parent node, and namespace. This resembles XAML markup.
            </summary>
        </member>
        <member name="T:TextMetal.Core.XmlModel.ChildElementModel">
            <summary>
            	Specifies the child element model of an XML object (applicable only to those which are not well-known via properties with mapping attributes).
            </summary>
        </member>
        <member name="F:TextMetal.Core.XmlModel.ChildElementModel.Sterile">
            <summary>
            	This XML object is not allowed to have any child elements. This is the default.
            </summary>
        </member>
        <member name="F:TextMetal.Core.XmlModel.ChildElementModel.Content">
            <summary>
            	This XML object can have ONE non-well-known child element. Use the Content property to access the possibly null value.
            </summary>
        </member>
        <member name="F:TextMetal.Core.XmlModel.ChildElementModel.Items">
            <summary>
            	This XML object can have MANY non-well-known child element. Use the Items property to access the possibly empty list of values.
            </summary>
        </member>
        <member name="T:TextMetal.Core.XmlModel.IXmlPersistEngine">
            <summary>
            	Provides custom optimized XML serializer/deserializer behavior.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.ClearAllKnowns">
            <summary>
            	Clears all known XML object registrations.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.DeserializeFromXml(System.String)">
            <summary>
            	Deserialize an XML object graph from the specified XML file.
            </summary>
            <param name="fileName"> The XML file to load. </param>
            <returns> An XML object graph. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.DeserializeFromXml(System.IO.Stream)">
            <summary>
            	Deserialize an XML object graph from the specified stream.
            </summary>
            <param name="stream"> The stream to load. </param>
            <returns> An XML object graph. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.DeserializeFromXml(System.Xml.XmlTextReader)">
            <summary>
            	Deserialize an XML object graph from the specified XML text reader.
            </summary>
            <param name="xmlTextReader"> The XML text reader to load. </param>
            <returns> An XML object graph. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.RegisterKnownXmlObject``1(TextMetal.Core.XmlModel.XmlName)">
            <summary>
            	Registers a known XML object by target type and explicit XML name (local name and namespace URI). This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target type to register. </typeparam>
            <param name="xmlName"> The XML name (local name and namespace URI). </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.RegisterKnownXmlObject(TextMetal.Core.XmlModel.XmlName,System.Type)">
            <summary>
            	Registers a known XML object by target type and explicit XML name (local name and namespace URI). This is the non-generic overload.
            </summary>
            <param name="xmlName"> The XML name (local name and namespace URI). </param>
            <param name="targetType"> The target type to register. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.RegisterKnownXmlObject``1">
            <summary>
            	Registers a known XML object by target type and implicit attribute-based XML name (local name and namespace URI). This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target type to register. </typeparam>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.RegisterKnownXmlObject(System.Type)">
            <summary>
            	Registers a known XML object by target type. This is the non-generic overload.
            </summary>
            <param name="targetType"> The target type to register. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.RegisterKnownXmlTextObject``1">
            <summary>
            	Registers a known XML text object by target type. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target type to register. </typeparam>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.RegisterKnownXmlTextObject(System.Type)">
            <summary>
            	Registers a known XML text object by target type and implicit attribute-based XML name (local name and namespace URI). This is the non-generic overload.
            </summary>
            <param name="targetType"> The target type to register. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.SerializeToXml(TextMetal.Core.XmlModel.IXmlObject,System.String)">
            <summary>
            	Serializes an XML object graph to the specified XML file.
            </summary>
            <param name="document"> The document root XML object. </param>
            <param name="fileName"> The XML file to save. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.SerializeToXml(TextMetal.Core.XmlModel.IXmlObject,System.IO.Stream)">
            <summary>
            	Serializes an XML object graph to the specified stream.
            </summary>
            <param name="document"> The document root XML object. </param>
            <param name="stream"> The stream to save. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.SerializeToXml(TextMetal.Core.XmlModel.IXmlObject,System.Xml.XmlTextWriter)">
            <summary>
            	Serializes an XML object graph to the specified XmlTextWriter.
            </summary>
            <param name="document"> The document root XML object. </param>
            <param name="xmlTextWriter"> The XmlTextWriter to save. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.UnregisterKnownXmlObject``1">
            <summary>
            	Unregisters a known XML object by target type. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target type to unregister. </typeparam>
            <returns> A value indicating if the registration was present. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.UnregisterKnownXmlObject(System.Type)">
            <summary>
            	Unregisters a known XML object by target type. This is the generic overload.
            </summary>
            <param name="targetType"> The target type to unregister. </param>
            <returns> A value indicating if the registration was present. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.UnregisterKnownXmlTextObject``1">
            <summary>
            	Unregisters a known XML text object by target type. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target type to unregister. </typeparam>
            <returns> A value indicating if the registration was present. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.IXmlPersistEngine.UnregisterKnownXmlTextObject(System.Type)">
            <summary>
            	Unregisters a known XML text object by target type. This is the generic overload.
            </summary>
            <param name="targetType"> The target type to unregister. </param>
            <returns> A value indicating if the registration was present. </returns>
        </member>
        <member name="T:TextMetal.Core.XmlModel.XmlAttributeMappingAttribute">
            <summary>
            	Marks a property of an XML object as being mapped to/from an XML attribute.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlAttributeMappingAttribute.#ctor">
            <summary>
            	Initializes a new instance of the XmlAttributeMappingAttribute class.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlAttributeMappingAttribute.LocalName">
            <summary>
            	Gets or sets the local name of the XML attribute.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlAttributeMappingAttribute.NamespaceUri">
            <summary>
            	Gets or sets the namespace URI of the XML attribute.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlAttributeMappingAttribute.Order">
            <summary>
            	Gets or sets the order of rendering of the attribute to the XML stream. Order is only applicable to XML output and is ignored during XML input.
            </summary>
        </member>
        <member name="T:TextMetal.Core.XmlModel.XmlChildElementMappingAttribute">
            <summary>
            	Marks a property of an XML object as being mapped to/from a well-known XML element.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlChildElementMappingAttribute.#ctor">
            <summary>
            	Initializes a new instance of the XmlChildElementMappingAttribute class.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlChildElementMappingAttribute.ChildElementType">
            <summary>
            	Gets or sets the child element type (applicable only to those child elements which are well-known via properties with mapping attributes).
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlChildElementMappingAttribute.LocalName">
            <summary>
            	Gets or sets the local name of the XML element.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlChildElementMappingAttribute.NamespaceUri">
            <summary>
            	Gets or sets the namespace URI of the XML element.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlChildElementMappingAttribute.Order">
            <summary>
            	Gets or sets the order of rendering of the element to the XML stream. Order is only applicable to XML output and is ignored during XML input.
            </summary>
        </member>
        <member name="T:TextMetal.Core.XmlModel.XmlElementMappingAttribute">
            <summary>
            	Marks a class as an XML object which is mapped to/from an XML element.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlElementMappingAttribute.#ctor">
            <summary>
            	Initializes a new instance of the XmlElementMappingAttribute class.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlElementMappingAttribute.ChildElementModel">
            <summary>
            	Gets or sets the child element model (applicable only to those child elements which are not well-known via properties with mapping attributes).
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlElementMappingAttribute.LocalName">
            <summary>
            	Gets or sets the local name of the XML element.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlElementMappingAttribute.NamespaceUri">
            <summary>
            	Gets or sets the namespace URI of the XML element.
            </summary>
        </member>
        <member name="T:TextMetal.Core.XmlModel.XmlName">
            <summary>
            	Represents a local name and namespace URI of an XML element.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlName.#ctor">
            <summary>
            	Initializes a new instance of the XmlName class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlName.TestEquals(TextMetal.Core.XmlModel.XmlName,TextMetal.Core.XmlModel.XmlName)">
            <summary>
            	Performs a custom equals test against two XML name objects using value semantics over the local name and namespace URI.
            </summary>
            <param name="a"> The first XML name to test. </param>
            <param name="b"> The second XML name object to test. </param>
            <returns> A value indicating whther the two XML name objects are equal using value semantics. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlName.Equals(System.Object)">
            <summary>
            	Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" /> .
            </summary>
            <returns> true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" /> ; otherwise, false. </returns>
            <param name="obj"> The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" /> . </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlName.GetHashCode">
            <summary>
            	Serves as a hash function for a particular type.
            </summary>
            <returns> A hash code for the current <see cref="T:System.Object" /> . </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlName.ToString">
            <summary>
            	Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" /> .
            </summary>
            <returns> A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" /> . </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlName.op_Equality(TextMetal.Core.XmlModel.XmlName,TextMetal.Core.XmlModel.XmlName)">
            <summary>
            	Determines whether two specified XML name objects are equal.
            </summary>
            <param name="a"> The first XML name to test. </param>
            <param name="b"> The second XML name object to test. </param>
            <returns> A value indicating whther the two XML name objects are equal using value semantics. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlName.op_Inequality(TextMetal.Core.XmlModel.XmlName,TextMetal.Core.XmlModel.XmlName)">
            <summary>
            	Determines whether two specified XML name objects are not equal.
            </summary>
            <param name="a"> The first XML name to test. </param>
            <param name="b"> The second XML name object to test. </param>
            <returns> A value indicating whther the two XML name objects are not equal using value semantics. </returns>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlName.LocalName">
            <summary>
            	Gets or sets the local name of the XML element.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlName.NamespaceUri">
            <summary>
            	Gets or sets the namespace URI of the XML element.
            </summary>
        </member>
        <member name="T:TextMetal.Core.XmlModel.XmlObjectCollection`1">
            <summary>
            	Provides a concrete implementation for XML object collections.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlObjectCollection`1.#ctor(TextMetal.Core.XmlModel.IXmlObject)">
            <summary>
            	Initializes a new instance of the XmlObjectCollection class.
            </summary>
            <param name="site"> The containing site XML object. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlObjectCollection`1.ClearItems">
            <summary>
            	Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlObjectCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            	Inserts an element into the collection at the specified index.
            </summary>
            <param name="index"> The zero-based index at which item should be inserted. </param>
            <param name="item"> The object to insert. The value can be null for reference types. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlObjectCollection`1.RemoveItem(System.Int32)">
            <summary>
            	Removes the element at the specified index of the collection.
            </summary>
            <param name="index"> The zero-based index of the element to remove. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlObjectCollection`1.SetItem(System.Int32,`0)">
            <summary>
            	Replaces the element at the specified index.
            </summary>
            <param name="index"> The zero-based index of the element to replace. </param>
            <param name="item"> The new value for the element at the specified index. The value can be null for reference types. </param>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlObjectCollection`1.Site">
            <summary>
            	Gets the site XML object or null if this is unattached.
            </summary>
        </member>
        <member name="T:TextMetal.Core.XmlModel.XmlPersistEngine">
            <summary>
            	This is a custom XML serializer/deserializer that does not suffer from the rigidities of the .NET Framework supplied ones. This implementation was designed to be fast and flexible for XML driven tools.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.#ctor">
            <summary>
            	Initializes a new instance of the XmlPersistEngine class.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.IsTextElement(System.Collections.Generic.Stack{TextMetal.Core.XmlModel.IXmlObject},TextMetal.Core.XmlModel.XmlName)">
            <summary>
            	Determines whether an element is a text element.
            </summary>
            <param name="contextStack"> The effective context stack. </param>
            <param name="xmlName"> The XML name to use. </param>
            <returns> A value indicating whether the element is a text element. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.ClearAllKnowns">
            <summary>
            	Clears all known XML object registrations.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.DeserializeFromXml(System.String)">
            <summary>
            	Deserialize an XML object graph from the specified XML file.
            </summary>
            <param name="fileName"> The XML file to load. </param>
            <returns> An XML object graph. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.DeserializeFromXml(System.IO.Stream)">
            <summary>
            	Deserialize an XML object graph from the specified stream.
            </summary>
            <param name="stream"> The stream to load. </param>
            <returns> An XML object graph. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.DeserializeFromXml(System.Collections.Generic.Stack{TextMetal.Core.XmlModel.IXmlObject},TextMetal.Core.XmlModel.XmlName,TextMetal.Core.XmlModel.XmlName,System.Collections.Generic.IDictionary{TextMetal.Core.XmlModel.XmlName,System.String},TextMetal.Core.XmlModel.IXmlTextObject)">
            <summary>
            	Private method that processes XML object deserialization.
            </summary>
            <param name="contextStack"> The context stack used to manage deserialization. </param>
            <param name="previousElementXmlName"> The previously encountered XML name (parent). </param>
            <param name="currentElementXmlName"> The current XML name (current). </param>
            <param name="attributes"> The current attributes for the current XML object. </param>
            <param name="overrideCurrentXmlTextObject"> A special overriding XML text object. </param>
            <returns> The created current XML object. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.DeserializeFromXml(System.Xml.XmlTextReader)">
            <summary>
            	Deserialize an XML object graph from the specified XML text reader.
            </summary>
            <param name="xmlTextReader"> The XML text reader to load. </param>
            <returns> An XML object graph. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.DeserializeFromXmlText(System.Collections.Generic.Stack{TextMetal.Core.XmlModel.IXmlObject},System.String,TextMetal.Core.XmlModel.XmlName)">
            <summary>
            	Private method that processes XML text object deserialization.
            </summary>
            <param name="contextStack"> The context stack used to manage deserialization. </param>
            <param name="textValue"> The string value of the text element. </param>
            <param name="xmlName"> The in-effect XML name. </param>
            <returns> The created current XML text object. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.RegisterKnownXmlObject``1(TextMetal.Core.XmlModel.XmlName)">
            <summary>
            	Registers a known XML object by target type and explicit XML name (local name and namespace URI). This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target type to register. </typeparam>
            <param name="xmlName"> The XML name (local name and namespace URI). </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.RegisterKnownXmlObject(TextMetal.Core.XmlModel.XmlName,System.Type)">
            <summary>
            	Registers a known XML object by target type and explicit XML name (local name and namespace URI). This is the non-generic overload.
            </summary>
            <param name="xmlName"> The XML name (local name and namespace URI). </param>
            <param name="targetType"> The target type to register. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.RegisterKnownXmlObject``1">
            <summary>
            	Registers a known XML object by target type and implicit attribute-based XML name (local name and namespace URI). This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target type to register. </typeparam>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.RegisterKnownXmlObject(System.Type)">
            <summary>
            	Registers a known XML object by target type. This is the non-generic overload.
            </summary>
            <param name="targetType"> The target type to register. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.RegisterKnownXmlTextObject``1">
            <summary>
            	Registers a known XML text object by target type. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target type to register. </typeparam>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.RegisterKnownXmlTextObject(System.Type)">
            <summary>
            	Registers a known XML text object by target type and implicit attribute-based XML name (local name and namespace URI). This is the non-generic overload.
            </summary>
            <param name="targetType"> The target type to register. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.ResolveXmlObject(TextMetal.Core.XmlModel.XmlName)">
            <summary>
            	Private method to resolve an XML object by XML name.
            </summary>
            <param name="xmlName"> The XML name to lookup in the known registrations. </param>
            <returns> An IXmlObject instance or null if the XML name is not known. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.ResolveXmlTextObject(System.String)">
            <summary>
            	Private method to resolve an XML text object.
            </summary>
            <param name="text"> The string value of the XML text object. </param>
            <returns> An IXmlTextObject instance or null if it is not known. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.SerializeToXml(TextMetal.Core.XmlModel.IXmlObject,System.String)">
            <summary>
            	Serializes an XML object graph to the specified XML file.
            </summary>
            <param name="document"> The document root XML object. </param>
            <param name="fileName"> The XML file to save. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.SerializeToXml(TextMetal.Core.XmlModel.IXmlObject,System.IO.Stream)">
            <summary>
            	Serializes an XML object graph to the specified stream.
            </summary>
            <param name="document"> The document root XML object. </param>
            <param name="stream"> The stream to save. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.SerializeToXml(TextMetal.Core.XmlModel.IXmlObject,System.Xml.XmlTextWriter)">
            <summary>
            	Serializes an XML object graph to the specified XmlTextWriter.
            </summary>
            <param name="document"> The document root XML object. </param>
            <param name="xmlTextWriter"> The XmlTextWriter to save. </param>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.UnregisterKnownXmlObject``1">
            <summary>
            	Unregisters a known XML object by target type. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target type to unregister. </typeparam>
            <returns> A value indicating if the registration was present. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.UnregisterKnownXmlObject(System.Type)">
            <summary>
            	Unregisters a known XML object by target type. This is the generic overload.
            </summary>
            <param name="targetType"> The target type to unregister. </param>
            <returns> A value indicating if the registration was present. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.UnregisterKnownXmlTextObject``1">
            <summary>
            	Unregisters a known XML text object by target type. This is the generic overload.
            </summary>
            <typeparam name="TObject"> The target type to unregister. </typeparam>
            <returns> A value indicating if the registration was present. </returns>
        </member>
        <member name="M:TextMetal.Core.XmlModel.XmlPersistEngine.UnregisterKnownXmlTextObject(System.Type)">
            <summary>
            	Unregisters a known XML text object by target type. This is the generic overload.
            </summary>
            <param name="targetType"> The target type to unregister. </param>
            <returns> A value indicating if the registration was present. </returns>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlPersistEngine.KnownXmlObjectTypeRegistrations">
            <summary>
            	Gets the known XML object type registrations.
            </summary>
        </member>
        <member name="P:TextMetal.Core.XmlModel.XmlPersistEngine.KnownXmlTextObjectTypeRegistration">
            <summary>
            	Gets or sets the known XML text object type registration.
            </summary>
        </member>
        <member name="T:TextMetal.Core.Severity">
            <summary>
            	Specifies the severity of a message.
            </summary>
        </member>
        <member name="F:TextMetal.Core.Severity.None">
            <summary>
            	None.
            </summary>
        </member>
        <member name="F:TextMetal.Core.Severity.Information">
            <summary>
            	Information.
            </summary>
        </member>
        <member name="F:TextMetal.Core.Severity.Warning">
            <summary>
            	Warning.
            </summary>
        </member>
        <member name="F:TextMetal.Core.Severity.Error">
            <summary>
            	Error.
            </summary>
        </member>
        <member name="F:TextMetal.Core.Severity.Debug">
            <summary>
            	Debug.
            </summary>
        </member>
        <member name="T:TextMetal.Core.XpeExtensions">
            <summary>
            	A set of extension methods to manage the XML Persist Engine model. NOTE: This file must be updated when adding or removing constructs.
            </summary>
        </member>
        <member name="M:TextMetal.Core.XpeExtensions.RegisterWellKnownConstructs(TextMetal.Core.XmlModel.IXmlPersistEngine)">
            <summary>
            	Quickly register all well-known constructs within this framework.
            </summary>
            <param name="xpe"> The target XML Persist Engine instance. </param>
        </member>
    </members>
</doc>
