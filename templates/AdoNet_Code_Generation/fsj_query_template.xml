<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2012 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://www.textmetal.com/api/v4.4.0">
	
	<OutputScope name="${ClrNamespace}\Query.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;

using TextMetal.Plumbing.CommonFacilities;

using Expression = TextMetal.Core.ExpressionModel.IExpressionXmlObject;
using NullaryExpression = TextMetal.Core.ExpressionModel.NullaryExpressionConstruct;
using UnaryExpression = TextMetal.Core.ExpressionModel.UnaryExpressionConstruct;
using BinaryExpression = TextMetal.Core.ExpressionModel.BinaryExpressionConstruct;
using Surface = TextMetal.Core.ExpressionModel.SurfaceConstruct;
using Value = TextMetal.Core.ExpressionModel.ValueConstruct;
using Container = TextMetal.Core.ExpressionModel.ExpressionContainerConstruct;
]]>
						<If>
							<If.Condition>
								<UnaryExpression operator="IsDef">
									<UnaryExpression.TheExpression>
										<Aspect name="ClrUsingNamespaces" />
									</UnaryExpression.TheExpression>
								</UnaryExpression>
							</If.Condition>
							<If.True>
								<ForEach in="ClrUsingNamespaces" var-ct="#LoopCount" var-ix="#LoopIndex" var-item="#item">
									<ForEach.Body>
										<![CDATA[using ${#item};
]]>
									</ForEach.Body>
								</ForEach>
							</If.True>
						</If>
						<![CDATA[
namespace ${ClrNamespace}
{
	public sealed class Query
	{		
		#region Constructors/Destructors
		
		public Query(Expression expression, Order[] orders, int skip, int take)
		{
			if ((object)expression == null)
				throw new ArgumentNullException("expression");

			if ((object)orders == null)
				throw new ArgumentNullException("orders");

			this.expression = expression;
			this.orders = orders;
			this.skip = skip;
			this.take = take;
		}
		
		#endregion
		
		#region Fields/Constants
		
		private readonly Expression expression;
		private readonly Order[] orders;
		private readonly int skip;
		private readonly int take;

		#endregion

		#region Properties/Indexers/Events

		public Expression Expression
		{
			get
			{
				return this.expression;
			}
		}

		public Order[] Orders
		{
			get
			{
				return this.orders;
			}
		}

		public int Skip
		{
			get
			{
				return this.skip;
			}
		}
		
		public int Take
		{
			get
			{
				return this.take;
			}
		}

		#endregion
	}
}
]]>
	</OutputScope>

</Template>