<?xml version="1.0" encoding="utf-8"?>

<!--
	Copyright ©2002-2011 Daniel Bullington (dpbullington@gmail.com)
	Distributed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<Template xmlns="http://code.google.com/p/textmetal/rev3">

	<OutputScope name="${ClrNamespace}\Repository.tv.g.cs">
		<Include name="include_gen_cprt_message.cs.txt" />
<![CDATA[

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

using TextMetal.Core.Plumbing;
]]>
		<If>
			<If.Condition>
				<UnaryExpression operator="IsDef">
					<UnaryExpression.TheExpression>
						<Aspect name="ClrUsingNamespaces" />
					</UnaryExpression.TheExpression>
				</UnaryExpression>
			</If.Condition>
			<If.True>
				<ForEach in="ClrUsingNamespaces" var-ct="#LoopCount" var-ix="#LoopIndex" var-item="#item">
					<ForEach.Body>
						<![CDATA[using ${#item};
]]>
					</ForEach.Body>
				</ForEach>
			</If.True>
		</If>

		<If>
			<If.Condition>
				<BinaryExpression operator="Or">
					<BinaryExpression.LeftExpression>
						<BinaryExpression operator="Eq">
							<BinaryExpression.LeftExpression>
								<Facet name="HasTables" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value type="System.Boolean" data="True" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<BinaryExpression operator="Eq">
							<BinaryExpression.LeftExpression>
								<Facet name="HasViews" />
							</BinaryExpression.LeftExpression>
							<BinaryExpression.RightExpression>
								<Value type="System.Boolean" data="True" />
							</BinaryExpression.RightExpression>
						</BinaryExpression>
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[
]]>
			</If.True>
		</If>

		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasTables" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Tables;
]]>
			</If.True>
		</If>
		<If>
			<If.Condition>
				<BinaryExpression operator="Eq">
					<BinaryExpression.LeftExpression>
						<Value type="System.Boolean" data="True" />
					</BinaryExpression.LeftExpression>
					<BinaryExpression.RightExpression>
						<Facet name="HasViews" />
					</BinaryExpression.RightExpression>
				</BinaryExpression>
			</If.Condition>
			<If.True>
				<![CDATA[using ${ClrNamespace}.Views;
]]>
			</If.True>
		</If>
		<![CDATA[
namespace ${ClrNamespace}
{
	public partial class Repository
	{		
		#region Methods/Operators
		
		protected bool PersistModel<TModel>(UnitOfWorkContext unitOfWorkContext, TModel model, CommandType commandType, string commandText, IEnumerable<IDataParameter> commandParameters, int persistNotExpectedRecordsAffected, Action<IDictionary<string, object>, TModel> mapToCallback)
			where TModel : class, new()
		{
			int recordsAffected;
			IList<IDictionary<string, object>> results;

			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			if ((object)model == null)
				throw new ArgumentNullException("model");

			if ((object)commandText == null)
				throw new ArgumentNullException("commandText");

			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			if ((object)mapToCallback == null)
				throw new ArgumentNullException("mapToCallback");

			if (DataType.IsNullOrWhiteSpace(commandText))
				throw new ArgumentOutOfRangeException("commandText");
			
			results = unitOfWorkContext.ExecuteDictionary(commandType, commandText, commandParameters, out recordsAffected);

			if (recordsAffected <= persistNotExpectedRecordsAffected)
			{
				// concurrency failure
				unitOfWorkContext.Divergent();
				return false;
			}

			if ((object)results == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			if (results.Count == 1)
				mapToCallback(results[0], model);
			
			return true;
		}
		
		protected IList<TModel> QueryModel<TModel>(UnitOfWorkContext unitOfWorkContext, CommandType commandType, string commandText, IEnumerable<IDataParameter> commandParameters, int queryExpectedRecordsAffected, Action<IDictionary<string, object>, TModel> mapToCallback)
			where TModel : class, new()
		{
			IList<TModel> models;
			TModel model;
			int recordsAffected;
			IList<IDictionary<string, object>> results;

			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			if ((object)commandText == null)
				throw new ArgumentNullException("commandText");

			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

			if ((object)mapToCallback == null)
				throw new ArgumentNullException("mapToCallback");

			if (DataType.IsNullOrWhiteSpace(commandText))
				throw new ArgumentOutOfRangeException("commandText");

			results = unitOfWorkContext.ExecuteDictionary(commandType, commandText, commandParameters, out recordsAffected);

			if (recordsAffected != queryExpectedRecordsAffected)
			{
				// idempotency failure
				unitOfWorkContext.Divergent();
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}

			if ((object)results == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			models = new List<TModel>();

			foreach (IDictionary<string, object> result in results)
			{
				model = new TModel();
				mapToCallback(result, model);
				models.Add(model);
			}

			return models;
		}
		
		protected TModel FetchModel<TModel>(UnitOfWorkContext unitOfWorkContext, CommandType commandType, string commandText, IEnumerable<IDataParameter> commandParameters, int queryExpectedRecordsAffected, Action<IDictionary<string, object>, TModel> mapToCallback)
			where TModel: class, new()
		{
			TModel model;
			int recordsAffected;
			IList<IDictionary<string, object>> results;
						
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandText == null)
				throw new ArgumentNullException("commandText");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			if ((object)mapToCallback == null)
				throw new ArgumentNullException("mapToCallback");

			if (DataType.IsNullOrWhiteSpace(commandText))
				throw new ArgumentOutOfRangeException("commandText");
				
			results = unitOfWorkContext.ExecuteDictionary(commandType, commandText, commandParameters, out recordsAffected);
			
			if (recordsAffected != queryExpectedRecordsAffected)
			{
				// idempotency failure
				unitOfWorkContext.Divergent();
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
				
			if ((object)results == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			if (results.Count != 1)
				return null;

			model = new TModel();

			mapToCallback(results[0], model);

			return model;
		}
		
		protected void FillModel<TModel>(UnitOfWorkContext unitOfWorkContext, TModel model, CommandType commandType, string commandText, IEnumerable<IDataParameter> commandParameters, int queryExpectedRecordsAffected, Action<IDictionary<string, object>, TModel> mapToCallback)
			where TModel: class, new()
		{
			int recordsAffected;
			IList<IDictionary<string, object>> results;
						
			if ((object)unitOfWorkContext == null)		
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)model == null)
				throw new ArgumentNullException("model");
				
			if ((object)commandText == null)
				throw new ArgumentNullException("commandText");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			if ((object)mapToCallback == null)
				throw new ArgumentNullException("mapToCallback");

			if (DataType.IsNullOrWhiteSpace(commandText))
				throw new ArgumentOutOfRangeException("commandText");
				
			results = unitOfWorkContext.ExecuteDictionary(commandType, commandText, commandParameters, out recordsAffected);
			
			if (recordsAffected != queryExpectedRecordsAffected)
			{
				// idempotency failure
				unitOfWorkContext.Divergent();
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");
			}
				
			if ((object)results == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			if (results.Count != 1)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");

			mapToCallback(results[0], model);
		}
		
]]>

		<ForEach in="Schemas" var-ct="#LoopCount" var-ix="#LoopIndex">			
			<ForEach.Body>
				
				<ForEach in="Tables" var-ct="#LoopCount" var-ix="#LoopIndex">
					<ForEach.Body>
						<![CDATA[		public ${TableNameSingularPascalCase} Load${TableNameSingularPascalCase}(]]>
						<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Eq">
									<BinaryExpression.LeftExpression>
										<Facet name="ColumnIsPrimaryKey" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Value type="System.Boolean" data="True" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[${ColumnCSharpClrType} ${ColumnNameCamelCase}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="#LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="#LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[)
		{
			${TableNameSingularPascalCase} retval;
						
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, ]]>
						<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Eq">
									<BinaryExpression.LeftExpression>
										<Facet name="ColumnIsPrimaryKey" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Value type="System.Boolean" data="True" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[p${#LoopIndex}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="#LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="#LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[) => this.Load${TableNameSingularPascalCase}(uowc, ]]>
						<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Eq">
									<BinaryExpression.LeftExpression>
										<Facet name="ColumnIsPrimaryKey" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Value type="System.Boolean" data="True" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[p${#LoopIndex}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="#LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="#LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[), ]]>
						<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Eq">
									<BinaryExpression.LeftExpression>
										<Facet name="ColumnIsPrimaryKey" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Value type="System.Boolean" data="True" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[${ColumnNameCamelCase}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="#LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="#LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[);
			
			return retval;
		}
		
]]>
				
<![CDATA[		public ${TableNameSingularPascalCase} Load${TableNameSingularPascalCase}(UnitOfWorkContext unitOfWorkContext, ]]>
						<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
							<ForEach.Filter>
								<BinaryExpression operator="Eq">
									<BinaryExpression.LeftExpression>
										<Facet name="ColumnIsPrimaryKey" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Value type="System.Boolean" data="True" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</ForEach.Filter>
							<ForEach.Body>
								<![CDATA[${ColumnCSharpClrType} ${ColumnNameCamelCase}]]>
								<If>
									<If.Condition>
										<BinaryExpression operator="Ne">
											<BinaryExpression.LeftExpression>
												<Facet name="#LoopCount" />
											</BinaryExpression.LeftExpression>
											<BinaryExpression.RightExpression>
												<Facet name="#LoopIndex" />
											</BinaryExpression.RightExpression>
										</BinaryExpression>
									</If.Condition>
									<If.True>
										<![CDATA[, ]]>
									</If.True>
								</If>
							</ForEach.Body>
						</ForEach>
						<![CDATA[)
		{			
			${TableNameSingularPascalCase} ${TableNameSingularCamelCase};			
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int queryExpectedRecordsAffected;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			commandParameters = new List<IDataParameter>();
			
]]>
	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Eq">
				<BinaryExpression.LeftExpression>
					<Facet name="ColumnIsPrimaryKey" />
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<Value type="System.Boolean" data="True" />
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[			commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.${ColumnDbType}, ${ColumnSize}, ${ColumnPrecision}, ${ColumnScale}, ${ColumnCSharpNullableLiteral}, "@${ColumnNamePascalCase}", ${ColumnNameCamelCase});
			commandParameters.Add(commandParameter);]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[			
			
			ConnectionSpecific${TableNameSingularPascalCase}SelectOneCommandMagic(unitOfWorkContext, commandParameters, out commandText, out queryExpectedRecordsAffected);
			
			${TableNameSingularCamelCase} = this.FetchModel<${TableNameSingularPascalCase}>(unitOfWorkContext, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapTo${TableNameSingularPascalCase});
							
			this.OnSelect${TableNameSingularPascalCase}(unitOfWorkContext, ${TableNameSingularCamelCase});

			return ${TableNameSingularCamelCase};
		}
		
		public IList<${TableNameSingularPascalCase}> Find${TableNamePluralPascalCase}(${TableNameSingularPascalCase}_Query ${TableNameSingularCamelCase}Query)
		{
			IList<${TableNameSingularPascalCase}> retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.Find${TableNamePluralPascalCase}(uowc, e), ${TableNameSingularCamelCase}Query);
			
			return retval;
		}
		
		public IList<${TableNameSingularPascalCase}> Find${TableNamePluralPascalCase}(UnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase}_Query ${TableNameSingularCamelCase}Query)
		{
			IList<${TableNameSingularPascalCase}> ${TableNamePluralCamelCase};			
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int queryExpectedRecordsAffected;
			object value;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");

			commandParameters = new List<IDataParameter>();
			
			if ((object)${TableNameSingularCamelCase}Query == null)			
			{
				ConnectionSpecific${TableNameSingularPascalCase}SelectAllCommandMagic(unitOfWorkContext, commandParameters, out commandText, out queryExpectedRecordsAffected);
			}
			else
			{
]]>
	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Or">
				<BinaryExpression.LeftExpression>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsPrimaryKey" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="IsView" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
<![CDATA[				value = !DataType.ObjectsEqualValueSemantics(${TableNameSingularCamelCase}Query.${ColumnNamePascalCase}, default(${ColumnCSharpClrNullableType})) ? ${TableNameSingularCamelCase}Query.${ColumnNamePascalCase} : null;
				
				if ((object)value != null && (object)${TableNameSingularCamelCase}Query.IsNull${ColumnNamePascalCase} == null)												
				{
					commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.${ColumnDbType}, ${ColumnSize}, ${ColumnPrecision}, ${ColumnScale}, ${ColumnCSharpNullableLiteral}, "@${ColumnNamePascalCase}", value);
					commandParameters.Add(commandParameter);
				}]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[
				
				ConnectionSpecific${TableNameSingularPascalCase}SelectForCommandMagic(unitOfWorkContext, ${TableNameSingularCamelCase}Query, commandParameters, out commandText, out queryExpectedRecordsAffected);
			}
			
			${TableNamePluralCamelCase} = this.QueryModel<${TableNameSingularPascalCase}>(unitOfWorkContext, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapTo${TableNameSingularPascalCase});			
			
			foreach (${TableNameSingularPascalCase} ${TableNameSingularCamelCase} in ${TableNamePluralCamelCase})
				this.OnSelect${TableNameSingularPascalCase}(unitOfWorkContext, ${TableNameSingularCamelCase});
							
			return ${TableNamePluralCamelCase};
		}
		
		public bool Save${TableNameSingularPascalCase}(${TableNameSingularPascalCase} ${TableNameSingularCamelCase})
		{
			bool retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.Save${TableNameSingularPascalCase}(uowc, e), ${TableNameSingularCamelCase});
			
			return retval;
		}
		
		public bool Save${TableNameSingularPascalCase}(UnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} ${TableNameSingularCamelCase})
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected, queryExpectedRecordsAffected;
			bool wasNew, retval;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("${TableNameSingularCamelCase}");
			
			wasNew = ${TableNameSingularCamelCase}.IsNew;
			
			commandParameters = new List<IDataParameter>();
			
			if (wasNew)
			{	
				this.OnPreInsert${TableNameSingularPascalCase}(unitOfWorkContext, ${TableNameSingularCamelCase});
				
]]>

	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Ne">
				<BinaryExpression.LeftExpression>
					<Facet name="ColumnIsIdentity" />
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<Value type="System.Boolean" data="True" />
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.${ColumnDbType}, ${ColumnSize}, ${ColumnPrecision}, ${ColumnScale}, ${ColumnCSharpNullableLiteral}, "@${ColumnNamePascalCase}", ${TableNameSingularCamelCase}.${ColumnNamePascalCase});
				commandParameters.Add(commandParameter);]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	</ForEach>

			
<![CDATA[		

				ConnectionSpecific${TableNameSingularPascalCase}InsertCommandMagic(unitOfWorkContext, commandParameters, out commandText, out persistNotExpectedRecordsAffected);
			}
			else
			{
				this.OnPreUpdate${TableNameSingularPascalCase}(unitOfWorkContext, ${TableNameSingularCamelCase});
				
]]>

	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="And">
				<BinaryExpression.LeftExpression>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsIdentity" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsPrimaryKey" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.${ColumnDbType}, ${ColumnSize}, ${ColumnPrecision}, ${ColumnScale}, ${ColumnCSharpNullableLiteral}, "@${ColumnNamePascalCase}", ${TableNameSingularCamelCase}.${ColumnNamePascalCase});
				commandParameters.Add(commandParameter);]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	</ForEach>

<![CDATA[

]]>	
	
	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Or">
				<BinaryExpression.LeftExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsIdentity" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsPrimaryKey" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[				commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.${ColumnDbType}, ${ColumnSize}, ${ColumnPrecision}, ${ColumnScale}, ${ColumnCSharpNullableLiteral}, "@${ColumnNamePascalCase}", ${TableNameSingularCamelCase}.${ColumnNamePascalCase});
				commandParameters.Add(commandParameter);]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	</ForEach>

			
<![CDATA[		

				ConnectionSpecific${TableNameSingularPascalCase}UpdateCommandMagic(unitOfWorkContext, commandParameters, out commandText, out persistNotExpectedRecordsAffected);		
			}			
			
			retval = this.PersistModel<${TableNameSingularPascalCase}>(unitOfWorkContext, ${TableNameSingularCamelCase}, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapTo${TableNameSingularPascalCase});
		
			if (!retval)
				return retval;
				
			ConnectionSpecific${TableNameSingularPascalCase}IdentityCommandMagic(unitOfWorkContext, commandParameters, out commandText, out queryExpectedRecordsAffected);
				
			if (wasNew && !DataType.IsNullOrWhiteSpace(commandText))
			{
				// select the identity on the same connection
				this.FillModel<${TableNameSingularPascalCase}>(unitOfWorkContext, ${TableNameSingularCamelCase}, CommandType.Text, commandText, commandParameters, queryExpectedRecordsAffected, MapTo${TableNameSingularPascalCase});
			}
			
			if (wasNew)
			{
				this.OnPostInsert${TableNameSingularPascalCase}(unitOfWorkContext, ${TableNameSingularCamelCase});
			}
			else
			{
				this.OnPostUpdate${TableNameSingularPascalCase}(unitOfWorkContext, ${TableNameSingularCamelCase});
			}			

			return retval;
		}
		
		public bool Discard${TableNameSingularPascalCase}(${TableNameSingularPascalCase} ${TableNameSingularCamelCase})
		{
			bool retval;
			
			retval = this.ExecuteAmbientUnitOfWorkAware((uowc, e) => this.Discard${TableNameSingularPascalCase}(uowc, e), ${TableNameSingularCamelCase});
			
			return retval;
		}
		
		public bool Discard${TableNameSingularPascalCase}(UnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} ${TableNameSingularCamelCase})
		{
			IDataParameter commandParameter;
			List<IDataParameter> commandParameters;
			string commandText;
			int persistNotExpectedRecordsAffected;
			bool retval;
			
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("${TableNameSingularCamelCase}");
			
			if (${TableNameSingularCamelCase}.IsNew)
				return true;
				
			commandParameters = new List<IDataParameter>();			
						
]]><ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Or">
				<BinaryExpression.LeftExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsIdentity" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsPrimaryKey" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[			commandParameter = unitOfWorkContext.CreateParameter(ParameterDirection.Input, DbType.${ColumnDbType}, ${ColumnSize}, ${ColumnPrecision}, ${ColumnScale}, ${ColumnCSharpNullableLiteral}, "@${ColumnNamePascalCase}", ${TableNameSingularCamelCase}.${ColumnNamePascalCase});
			commandParameters.Add(commandParameter);]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[

			this.OnPreDelete${TableNameSingularPascalCase}(unitOfWorkContext, ${TableNameSingularCamelCase});
		
			ConnectionSpecific${TableNameSingularPascalCase}DeleteCommandMagic(unitOfWorkContext, commandParameters, out commandText, out persistNotExpectedRecordsAffected);
			
			retval = this.PersistModel<${TableNameSingularPascalCase}>(unitOfWorkContext, ${TableNameSingularCamelCase}, CommandType.Text, commandText, commandParameters, persistNotExpectedRecordsAffected, MapTo${TableNameSingularPascalCase});

			this.OnPostDelete${TableNameSingularPascalCase}(unitOfWorkContext, ${TableNameSingularCamelCase});
						
			${TableNameSingularCamelCase}.IsNew = false;

			return retval;
		}
		
		private static void MapTo${TableNameSingularPascalCase}(IDictionary<string, object> result, ${TableNameSingularPascalCase} ${TableNameSingularCamelCase})
		{
			object value;
			
			if ((object)result == null)
				throw new ArgumentNullException("result");
				
			if ((object)${TableNameSingularCamelCase} == null)
				throw new ArgumentNullException("${TableNameSingularCamelCase}");
			
]]><ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Body>
			<![CDATA[			if (result.TryGetValue("${ColumnNamePascalCase}", out value))
				${TableNameSingularCamelCase}.${ColumnNamePascalCase} = value.ChangeType<${ColumnCSharpClrNullableType}>();
]]>
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
					<![CDATA[
]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[		}
		
		private static void ConnectionSpecific${TableNameSingularPascalCase}InsertCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecific${TableNameSingularPascalCase}InsertCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecific${TableNameSingularPascalCase}InsertCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecific${TableNameSingularPascalCase}InsertCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecific${TableNameSingularPascalCase}InsertCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

]]>
	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Ne">
				<BinaryExpression.LeftExpression>
					<Facet name="ColumnIsIdentity" />
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<Value type="System.Boolean" data="True" />
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@${ColumnNamePascalCase}");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="ntext" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="text" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Text", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="image" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Image", true));]]>
				</If.True>
			</If>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[

			commandText = @"]]><Import name="import_insert_sqlserver.xml" /><![CDATA[";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecific${TableNameSingularPascalCase}InsertCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"]]><Import name="import_insert_sqlce.xml" /><![CDATA[";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecific${TableNameSingularPascalCase}InsertCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"]]><Import name="import_insert_sqlite.xml" /><![CDATA[";
			persistNotExpectedRecordsAffected = SQLITE_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecific${TableNameSingularPascalCase}IdentityCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecific${TableNameSingularPascalCase}IdentityCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecific${TableNameSingularPascalCase}IdentityCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecific${TableNameSingularPascalCase}IdentityCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecific${TableNameSingularPascalCase}IdentityCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

]]>
	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Eq">
				<BinaryExpression.LeftExpression>
					<Value type="System.Boolean" data="False" />
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<Value type="System.Boolean" data="True" />
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@${ColumnNamePascalCase}");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="ntext" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="text" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Text", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="image" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Image", true));]]>
				</If.True>
			</If>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[		

			commandText = @"]]><Import name="import_identity_sqlserver.xml" /><![CDATA[";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecific${TableNameSingularPascalCase}IdentityCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"]]><Import name="import_identity_sqlce.xml" /><![CDATA[";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecific${TableNameSingularPascalCase}IdentityCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"]]><Import name="import_identity_sqlite.xml" /><![CDATA[";
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecific${TableNameSingularPascalCase}UpdateCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecific${TableNameSingularPascalCase}UpdateCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecific${TableNameSingularPascalCase}UpdateCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecific${TableNameSingularPascalCase}UpdateCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecific${TableNameSingularPascalCase}UpdateCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

]]>
	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="And">
				<BinaryExpression.LeftExpression>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsIdentity" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsPrimaryKey" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@${ColumnNamePascalCase}");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="ntext" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="text" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Text", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="image" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Image", true));]]>
				</If.True>
			</If>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>

<![CDATA[

]]>

	 <ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Or">
				<BinaryExpression.LeftExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsIdentity" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsPrimaryKey" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@${ColumnNamePascalCase}");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="ntext" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="text" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Text", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="image" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Image", true));]]>
				</If.True>
			</If>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
	 
<![CDATA[

			commandText = @"]]><Import name="import_update_sqlserver.xml" /><![CDATA[";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecific${TableNameSingularPascalCase}UpdateCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"]]><Import name="import_update_sqlce.xml" /><![CDATA[";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecific${TableNameSingularPascalCase}UpdateCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"]]><Import name="import_update_sqlite.xml" /><![CDATA[";
			persistNotExpectedRecordsAffected = SQLITE_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecific${TableNameSingularPascalCase}DeleteCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecific${TableNameSingularPascalCase}DeleteCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecific${TableNameSingularPascalCase}DeleteCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecific${TableNameSingularPascalCase}DeleteCommandMagic(commandParameters, out commandText, out persistNotExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecific${TableNameSingularPascalCase}DeleteCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

]]>
	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Or">
				<BinaryExpression.LeftExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsIdentity" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsPrimaryKey" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@${ColumnNamePascalCase}");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="ntext" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="text" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Text", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="image" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Image", true));]]>
				</If.True>
			</If>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[

			commandText = @"]]><Import name="import_delete_sqlserver.xml" /><![CDATA[";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecific${TableNameSingularPascalCase}DeleteCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"]]><Import name="import_delete_sqlce.xml" /><![CDATA[";
			persistNotExpectedRecordsAffected = MSSQL_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecific${TableNameSingularPascalCase}DeleteCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int persistNotExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"]]><Import name="import_delete_sqlite.xml" /><![CDATA[";
			persistNotExpectedRecordsAffected = SQLITE_PERSIST_NOT_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecific${TableNameSingularPascalCase}SelectOneCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecific${TableNameSingularPascalCase}SelectOneCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecific${TableNameSingularPascalCase}SelectOneCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecific${TableNameSingularPascalCase}SelectOneCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecific${TableNameSingularPascalCase}SelectOneCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

]]>
	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Eq">
				<BinaryExpression.LeftExpression>
					<Facet name="ColumnIsPrimaryKey" />
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<Value type="System.Boolean" data="True" />
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@${ColumnNamePascalCase}");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="ntext" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="text" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Text", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="image" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Image", true));]]>
				</If.True>
			</If>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[

			commandText = @"]]><Import name="import_selectone_sqlserver.xml" /><![CDATA[";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecific${TableNameSingularPascalCase}SelectOneCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"]]><Import name="import_selectone_sqlce.xml" /><![CDATA[";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecific${TableNameSingularPascalCase}SelectOneCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"]]><Import name="import_selectone_sqlite.xml" /><![CDATA[";
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecific${TableNameSingularPascalCase}SelectAllCommandMagic(UnitOfWorkContext unitOfWorkContext, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecific${TableNameSingularPascalCase}SelectAllCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecific${TableNameSingularPascalCase}SelectAllCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecific${TableNameSingularPascalCase}SelectAllCommandMagic(commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecific${TableNameSingularPascalCase}SelectAllCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

]]>
	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Eq">
				<BinaryExpression.LeftExpression>
					<Value type="System.Boolean" data="False" />
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<Value type="System.Boolean" data="True" />
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@${ColumnNamePascalCase}");

			if ((object)commandParameter == null)
				throw new InvalidOperationException("TODO (enhancement): add meaningful message");]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="ntext" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="text" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Text", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="image" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

			Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Image", true));]]>
				</If.True>
			</If>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[

			commandText = @"]]><Import name="import_selectall_sqlserver.xml" /><![CDATA[";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecific${TableNameSingularPascalCase}SelectAllCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"]]><Import name="import_selectall_sqlce.xml" /><![CDATA[";
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecific${TableNameSingularPascalCase}SelectAllCommandMagic(IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"]]><Import name="import_selectall_sqlite.xml" /><![CDATA[";
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void ConnectionSpecific${TableNameSingularPascalCase}SelectForCommandMagic(UnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase}_Query ${TableNameSingularCamelCase}Query, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			if ((object)unitOfWorkContext == null)
				throw new ArgumentNullException("unitOfWorkContext");
				
			if ((object)${TableNameSingularCamelCase}Query == null)
				throw new ArgumentNullException("${TableNameSingularCamelCase}Query");
			
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			switch (unitOfWorkContext.Connection.GetType().Name.ToLower())
			{
				case "sqlconnection":
					SqlSpecific${TableNameSingularPascalCase}SelectForCommandMagic(${TableNameSingularCamelCase}Query, commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqlceconnection":
					SqlCeSpecific${TableNameSingularPascalCase}SelectForCommandMagic(${TableNameSingularCamelCase}Query, commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				case "sqliteconnection":
					SqliteSpecific${TableNameSingularPascalCase}SelectForCommandMagic(${TableNameSingularCamelCase}Query, commandParameters, out commandText, out queryExpectedRecordsAffected);
					break;
				default:
					throw new InvalidOperationException("TODO (enhancement): add meaningful message"); 
			}
		}
		
		private static void SqlSpecific${TableNameSingularPascalCase}SelectForCommandMagic(${TableNameSingularPascalCase}_Query ${TableNameSingularCamelCase}Query, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;			
			string predicateFragment = "", sortFragment = "";
			object value;
			
			if ((object)${TableNameSingularCamelCase}Query == null)
				throw new ArgumentNullException("${TableNameSingularCamelCase}Query");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");

]]>
	<ForEach in="Columns" var-ct="#LoopCount" var-ix="#LoopIndex">
		<ForEach.Filter>
			<BinaryExpression operator="Or">
				<BinaryExpression.LeftExpression>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnIsPrimaryKey" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.LeftExpression>
				<BinaryExpression.RightExpression>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="IsView" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.Boolean" data="True" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</BinaryExpression.RightExpression>
			</BinaryExpression>
		</ForEach.Filter>
		<ForEach.Body>
			
<![CDATA[			commandParameter = commandParameters.SingleOrDefault(p => p.ParameterName == "@${ColumnNamePascalCase}");

			if ((object)commandParameter != null) // OK here to be NULL
			{]]>
			
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="ntext" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
				Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "NText", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="text" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[			
			
				Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Text", true));]]>
				</If.True>
			</If>
			<If>
				<If.Condition>
					<BinaryExpression operator="Eq">
						<BinaryExpression.LeftExpression>
							<Facet name="ColumnSqlType" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Value type="System.String" data="image" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

				Reflexion.SetLogicalPropertyValue(commandParameter, "SqlDbType", Enum.Parse(Type.GetType("System.Data.SqlDbType, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", true), "Image", true));]]>
				</If.True>
			</If>

<![CDATA[
			}]]>

			<If>
				<If.Condition>
					<BinaryExpression operator="Ne">
						<BinaryExpression.LeftExpression>
							<Facet name="#LoopCount" />
						</BinaryExpression.LeftExpression>
						<BinaryExpression.RightExpression>
							<Facet name="#LoopIndex" />
						</BinaryExpression.RightExpression>
					</BinaryExpression>
				</If.Condition>
				<If.True>
<![CDATA[

]]>
				</If.True>
			</If>
		</ForEach.Body>
	 </ForEach>
<![CDATA[

			commandText = @"]]><Import name="import_selectfor_sqlserver.xml" /><![CDATA[";

]]>

			<Import name="import_predicatefragment_sqlserver.xml" />
			<Import name="import_sortfragment_sqlserver.xml" />

<![CDATA[			
			commandText = string.Format(commandText, predicateFragment, sortFragment);
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqlCeSpecific${TableNameSingularPascalCase}SelectForCommandMagic(${TableNameSingularPascalCase}_Query ${TableNameSingularCamelCase}Query, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;			
			string predicateFragment = "", sortFragment = "";
			object value;
			
			if ((object)${TableNameSingularCamelCase}Query == null)
				throw new ArgumentNullException("${TableNameSingularCamelCase}Query");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"]]><Import name="import_selectfor_sqlce.xml" /><![CDATA[";

]]>

			<Import name="import_predicatefragment_sqlce.xml" />
			<Import name="import_sortfragment_sqlce.xml" />

<![CDATA[			
			commandText = string.Format(commandText, predicateFragment, sortFragment);
			queryExpectedRecordsAffected = MSSQL_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		private static void SqliteSpecific${TableNameSingularPascalCase}SelectForCommandMagic(${TableNameSingularPascalCase}_Query ${TableNameSingularCamelCase}Query, IEnumerable<IDataParameter> commandParameters, out string commandText, out int queryExpectedRecordsAffected)
		{
			IDataParameter commandParameter;			
			string predicateFragment = "", sortFragment = "";
			object value;
			
			if ((object)${TableNameSingularCamelCase}Query == null)
				throw new ArgumentNullException("${TableNameSingularCamelCase}Query");
				
			if ((object)commandParameters == null)
				throw new ArgumentNullException("commandParameters");
				
			commandText = @"]]><Import name="import_selectfor_sqlite.xml" /><![CDATA[";

]]>

			<Import name="import_predicatefragment_sqlite.xml" />
			<Import name="import_sortfragment_sqlite.xml" />

<![CDATA[
			commandText = string.Format(commandText, predicateFragment, sortFragment);
			queryExpectedRecordsAffected = SQLITE_QUERY_EXPECTED_RECORDS_AFFECTED;
		}
		
		partial void OnPreInsert${TableNameSingularPascalCase}(UnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} ${TableNameSingularCamelCase});
		
		partial void OnPostInsert${TableNameSingularPascalCase}(UnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} ${TableNameSingularCamelCase});
		
		partial void OnPreUpdate${TableNameSingularPascalCase}(UnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} ${TableNameSingularCamelCase});
		
		partial void OnPostUpdate${TableNameSingularPascalCase}(UnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} ${TableNameSingularCamelCase});
		
		partial void OnPreDelete${TableNameSingularPascalCase}(UnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} ${TableNameSingularCamelCase});
		
		partial void OnPostDelete${TableNameSingularPascalCase}(UnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} ${TableNameSingularCamelCase});
		
		partial void OnSelect${TableNameSingularPascalCase}(UnitOfWorkContext unitOfWorkContext, ${TableNameSingularPascalCase} ${TableNameSingularCamelCase});		
]]>
						<If>
							<If.Condition>
								<BinaryExpression operator="Ne">
									<BinaryExpression.LeftExpression>
										<Facet name="#LoopCount" />
									</BinaryExpression.LeftExpression>
									<BinaryExpression.RightExpression>
										<Facet name="#LoopIndex" />
									</BinaryExpression.RightExpression>
								</BinaryExpression>
							</If.Condition>
							<If.True>
								<![CDATA[
]]>
							</If.True>
						</If>
					</ForEach.Body>
				</ForEach>

			</ForEach.Body>
		</ForEach>

		<![CDATA[
		#endregion
	}
}
]]>
	</OutputScope>

</Template>